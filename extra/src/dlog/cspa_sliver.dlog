# Copyright (c) 2008-2010, Intel Corporation.
# Copyright (c) 2006-2007, The Trustees of Stanford University.
# All rights reserved.
# Licensed under the terms of the New BSD License.

# Pointer analysis.
# Assume call graph construction is fixed.

# Author: Mayur Naik (mhn@cs.stanford.edu), Percy Liang (pliang@cs.berkeley.edu)
# name=cspa-sliver-dlog

.include "F.dom"
.include "H.dom"
.include "I.dom"
.include "M.dom"
.include "T.dom"
.include "V.dom"
.include "Z.dom"
.include "C.dom"

.bddvarorder F0_I0xI1xM0xM1_T0_V0xV1_T1_H0xH1_C0xC1xC2_Z0

###
# Relations
###

HT(h:H0,t:T1) input
sub(t1:T1,t2:T0) input
MI(m:M,i:I) input
MH(m:M,h:H) input
MV(m:M,v:V) input
statIM(i:I,m:M) input

# Program statements
MobjValAsgnInst(m:M,l:V,h:H) input
MobjVarAsgnInst(m:M,l:V,r:V) input
MgetInstFldInst(m:M,l:V,b:V,f:F) input
MputInstFldInst(m:M,b:V,f:F,r:V) input
MgetStatFldInst(m:M,l:V,f:F) input
MputStatFldInst(m:M,f:F,r:V) input

# Filtered by reachability
RobjValAsgnInst(c:C,l:V,h:H) output
RobjVarAsgnInst(c:C,l:V,r:V) output
RgetInstFldInst(c:C,l:V,b:V,f:F) output
RputInstFldInst(c:C,b:V,f:F,r:V) output
RgetStatFldInst(c:C,l:V,f:F) output
RputStatFldInst(c:C,f:F,r:V) output

classT(t:T) input
staticTM(t:T,m:M) input
staticTF(t:T,f:F) input
clinitTM(t:T,m:M) input
IinvkArg(i:I0,n:Z0,v:V1) input
MmethArg(m:M0,n:Z0,v:V0) input
IinvkRet(i:I0,n:Z0,v:V0) input
MmethRet(m:M0,n:Z0,v:V1) input
argCopy(i:I0,u:V1,m:M0,v:V0) output
retCopy(i:I0,u:V0,m:M0,v:V1) output

VAfilter(v:V,a:C)

VAfilter(v,a) :- VHfilter(v,h), AH(a,h).

AH(a:C,h:H) input # abstract object a could have been allocated at site h
CfromIC(d:C,i:I,c:C) input # context d = proj(i,c)
AfromHC(a:C,h:H,c:C) input # abtract object a = proj(h,c)
EfromVC(e:C,v:V,c:C) input # contextual variable (v,e) = proj(v,c)

# Computed from 0-CFA: we don't want the call graph changing on us during refinement.
IM(i:I,m:M) input # call site i can resolve to method m
VH(v:V,h:H) input
reachableM(m:M) input # method is reachable
reachableT(t:T) # type is reachable

VEfromVE(v1:V0,e1:C0,v2:V1,e2:C1) output # contextual variable (v1,e1) points to everything that (v2,e2) points to

reachableCI(c:C,i:I) output
reachableCM(c:C,m:M) output

CICM(ci:C,i:I,cm:C,m:M) output # in context ci, call site i can call method m in context cm

VEA(v:V,e:C,a:C) output   # contextual variable (v,e) can point to abstract object a
FA(f:F,a:C) output        # static field f can point to abstract object a
AFA(a1:C,f:F,a2:C) output # abstract object a1 can point to abstract object a2 via field f

ItoH(i:I,h:H) output # i can call a method that contains h
ItoI(i:I,j:I) output # i can call a method that contains j
reachableH(h:H) output
reachableV(v:V) output

HtoH(g:H,h:H) output
skipMM(m:M,n:M) output

rM(m:M) output
rI(i:I) output

############################################################
# Constraints

### Extension of contexts

extCfromIC(d,i,c) :- CfromIC(d,i,c). # call-site-based
extCfromIC(d,i,c) :- IinvkArg(i,0,v), EfromVC(e,v,c), VEA(v,e,d). # (object-based - instance methods: use "this")
extCfromIC(d,i,c) :- statIM(i,_), c=d. # (object-based - static methods: copy)

# call site i in context c resolves to method m in context d
CICM(ci,i,cm,m) :- reachableCI(ci,i), IM(i,m), extCfromIC(cm,i,ci).

### Reachability

# Reachability of methods.
reachableCM(0,0). # Main method
reachableCM(0,m) :- clinitTM(t,m), reachableT(t). # Any class initializers
reachableCM(c,m) :- CICM(_,_,c,m). # If reachable in any context

# Reachability of call sites.
reachableCI(c,i) :- MI(m,i), reachableCM(c,m).

# Reachability of types
reachableT(t) :- reachableCM(_,m), MobjValAsgnInst(m,_,h), HT(h,t).
reachableT(t) :- reachableCM(_,m), staticTM(t,m).
reachableT(t) :- reachableCM(_,m), MputStatFldInst(m,f,_), staticTF(t,f).
reachableT(t) :- reachableCM(_,m), MgetStatFldInst(m,_,f), staticTF(t,f).
reachableT(t) :- classT(t), reachableT(s), sub(s,t).

### Inter-procedural (connect variables)

argCopy(i,vi,m,vm) :- IM(i,m), IinvkArg(i,z,vi), MmethArg(m,z,vm). # vi at call site i <=> vm in method m (argument)
retCopy(i,vi,m,vm) :- IM(i,m), IinvkRet(i,z,vi), MmethRet(m,z,vm). # vi at call site i <=> vm in method m (return value)

VEfromVE(vm,em,vi,ei) :- argCopy(i,vi,m,vm), CICM(ci,i,cm,m). # pass in arguments
VEfromVE(vi,ei,vm,em) :- retCopy(i,vi,m,vm), CICM(ci,i,cm,m). # return arguments

VEA(v,e,a) :- VEfromVE(v,e,vv,ee), VEA(vv,ee,a), VCfilter(e,o). # If d:v->o, then c:u->o

### Intra-procedural statements

# in context c, l = new h
RobjValAsgnInst(c,l,h) :- reachableCM(c,m), MobjValAsgnInst(m,l,h).
VEA(l,el,a) :- RobjValAsgnInst(c,l,h), EfromVC(el,l,c), AfromHC(a,h,c), VAfilter(l,a). split

# in context c, l = r
RobjVarAsgnInst(c,l,r) :- reachableCM(c,m), MobjVarAsgnInst(m,l,r).
VEA(l,el,a) :- RobjVarAsgnInst(c,l,r), EfromVC(el,l,c), EfromVC(er,r,c), VEA(r,er,a), VCfilter(l,a). split

# in context c, l = b.f
RgetInstFldInst(c,l,b,f) :- reachableCM(c,m), MgetInstFldInst(m,l,b,f).
VEA(l,el,aa) :- RgetInstFldInst(c,l,b,f), EfromVC(el,l,c), EfromVC(eb,b,c), VEA(b,eb,a), AFA(a,f,aa). split

# in context c, l = STATIC.f
RgetStatFldInst(c,l,f) :- reachableCM(c,m), MgetStatFldInst(m,l,f).
VEA(l,el,a) :- RgetStatFldInst(c,l,f), EfromVC(el,l,c), FA(f,a), VCfilter(l,a). split

# in context c, b.f = r
RputInstFldInst(c,b,f,r) :- reachableCM(c,m), MputInstFldInst(m,b,f,r).
AFA(a,f,aa) :- RputInstFldInst(c,b,f,r), EfromVC(eb,b,c), EfromVC(er,r,c), VEA(b,eb,a), VEA(r,er,aa). split

# in context c, STATIC.f = r
RputStatFldInst(c,f,r) :- reachableCM(c,m), MputStatFldInst(m,f,r).
FA(f,a) :- RputStatFldInst(c,f,r), EfromVC(er,r,c), VEA(r,er,a). split

### Miscellaneous

reachableH(h) :- reachableM(m), MH(m,h).
reachableV(v) :- reachableM(m), MV(m,v).

# Possible extensions based on fixed call graph (for building CC)
ItoH(i,h) :- IM(i,m), MH(m,h).
ItoI(i,j) :- IM(i,m), MI(m,j). # Also for call-site-based refinement

# For object-based refinement
HtoH(g,h) :- IinvkArg(i,0,v), VH(v,g), IM(i,m), skipMM(m,n), MH(n,h). split # g can be the "this" argument, calling method with h
skipMM(m,n) :- m=n.
skipMM(m,n) :- MI(m,i), statIM(i,n). # Idea: if analyze m in some context, we end up analyzing n in that context as well

# Project down
rM(m) :- reachableCM(_, m).
rI(i) :- reachableCI(_, i).
