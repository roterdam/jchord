### WARNING: do not edit this file directly since it is automatically generated and can be overwritten at any point.
# name=race-classic-kobj-trans-dlog

.include "C.dom"
.include "D.dom"
.include "E.dom"
.include "F.dom"
.include "H.dom"
.include "I.dom"
.include "M.dom"
.include "P.dom"
.include "T.dom"
.include "V.dom"
.include "Z.dom"
.bddvarorder F0_D0xD1xD2xD3xD4_P0xP1xP2_I0xI1xM0xM1_T0_V0xV1_T1_H0xH1_C0xC1xC2xC3_Z0_E0xE1

HT(h:H0,t:T1) input
sub(t1:T1,t2:T0) input
MI(m:M,i:I) input
MobjValAsgnInst(m:M,l:V,h:H) input
MobjVarAsgnInst(m:M,l:V,r:V) input
MgetInstFldInst(m:M,l:V,b:V,f:F) input
MputInstFldInst(m:M,b:V,f:F,r:V) input
MgetStatFldInst(m:M,l:V,f:F) input
MputStatFldInst(m:M,f:F,r:V) input
clsForNameIT(i:I0,t:T0) input
objNewInstIH(i:I0,h:H0) input
objNewInstIM(i:I0,m:M0) input
conNewInstIH(i:I0,h:H0) input
conNewInstIM(i:I0,m:M0) input
aryNewInstIH(i:I0,h:H0) input
RobjValAsgnInst(c:C,l:V,h:H) input
RobjVarAsgnInst(c:C,l:V,r:V) input
RgetInstFldInst(c:C,l:V,b:V,f:F) input
RputInstFldInst(c:C,b:V,f:F,r:V) input
RgetStatFldInst(c:C,l:V,f:F) input
RputStatFldInst(c:C,f:F,r:V) input
classT(t:T) input
staticTM(t:T,m:M) input
staticTF(t:T,f:F) input
clinitTM(t:T,m:M) input
MmethArg(m:M0,n:Z0,v:V0) input
MspcMethArg(m:M0,v:V0) input
IinvkArg(i:I0,n:Z0,v:V1) input
IinvkArg0(i:I0,v:V1) input
IinvkRet(i:I0,n:Z0,v:V0) input
argCopy(i:I0,u:V1,m:M0,v:V0) input
retCopy(i:I0,u:V0,m:M0,v:V1) input
VCfilter(v:V,c:C) input
CC(c:C,d:C) input
CH(c:C,h:H) input
epsilonV(v:V) input
reachableT(t:T) input
DIC(c:C,i:I,c:C) input
DIH(c:C,i:I,h:H) input
DI(c:C,i:I) input
DVDV(c:C0,u:V0,d:C1,v:V1) input
ctxtInsIHM(i:I,h:H,m:M) input
kobjSenIHM(i:I,h:H,m:M) input
kobjSenICM(i:I,c:C,m:M) input
ctxtInsSpecIM(i:I,m:M) input
kobjSenSpecIM(i:I,m:M) input
ctxtInsStatIM(i:I,m:M) input
ctxtCpyStatIM(i:I,m:M) input
reachableCI(c:C,i:I) input
reachableCM(c:C,m:M) input
CICM(c:C,i:I,d:C,m:M) input
DVC(c1:C,v:V,c2:C) input
CVC(c1:C,v:V,c2:C) input
FC(f:F,c:C) input
CFC(c1:C,f:F,c2:C) input
CHC(c:C,h:H,d:C) input
inQueryEE(e1:E,e2:E) input
ME(m:M0,e:E0) input
EV(e:E0,v:V0) input
PE(p:P0,e:E0) input
PP(p:P0,q:P1) input
MPhead(m:M0,p:P0) input
MPtail(m:M0,p:P0) input
PI(p:P0,i:I0) input
threadDHM(t:D,h:H,m:M) input
threadDCM(t:D,c:C,m:M) input
thrSenAbbrRootCM(c:C0,m:M0) input
thrSenAbbrReachableCM(c:C0,m:M0)  input
thrSenAbbrCICM(c:C0,i:I0,d:C1,m:M0)  input
reachableTCMZ(t:D0,c:C0,m:M0) input
reachableTCE(t:D0,c:C0,e:E0) input
startingRaceHext(t1:D0,c1:C0,e1:E0,t2:D1,c2:C1,e2:E1) input
statE(e:E0) input
CEC(c:C0,e:E0,o:C1) input
escA(a:C) input
escapingRaceHext(t1:D0,c1:C0,e1:E0,t2:D1,c2:C1,e2:E1) input
threadDC(t:D,c:C) input
ForkPMcs(caller:C,p1:P,callee:C)  input
ForkPHcs(caller:C,p1:P,callee:C,p2:P)  input
NonForkPMcs(caller:C,p1:P,callee:C,m2:M) input
NonForkPHcs(caller:C,p1:P,callee:C,p2:P) input
NonForkPTcs(caller:C,p1:P,callee:C,p2:P) input
PathEdgeZ(c:C,p:P,this:D,sThat:D,tThat:D) input
SummEdgeZ(c:C,p:P,this:D,sThat:D,tThat:D) input
mhpZ(c:C0,p:P0,t1:D0,t2:D1) input
mheZ(c:C0,e:E0,t1:D0,t2:D1) input
parallelRaceHext(t1:D0,c1:C0,e1:E0,t2:D1,c2:C1,e2:E1) input
outQueryEE(e1:E0,e2:E1) input
r_RobjValAsgnInst(c:C,l:V,h:H) input # track
r_RobjVarAsgnInst(c:C,l:V,r:V) input # track
r_RgetInstFldInst(c:C,l:V,b:V,f:F) input # track
r_RputInstFldInst(c:C,b:V,f:F,r:V) input # track
r_RgetStatFldInst(c:C,l:V,f:F) input # track
r_RputStatFldInst(c:C,f:F,r:V) input # track
r_CH(c:C,h:H) input # track
r_reachableT(t:T) input # track
r_DIC(c:C,i:I,c:C) input # track
r_DIH(c:C,i:I,h:H) input # track
r_DI(c:C,i:I) input # track
r_DVDV(c:C,u:V,d:C,v:V) input # track
r_kobjSenICM(i:I,c:C,m:M) input # track
r_reachableCI(c:C,i:I) input # track
r_reachableCM(c:C,m:M) input # track
r_CICM(c:C,i:I,d:C,m:M) input # track
r_DVC(c1:C,v:V,c2:C) input # track
r_CVC(c1:C,v:V,c2:C) input # track
r_FC(f:F,c:C) input # track
r_CFC(c1:C,f:F,c2:C) input # track
r_CHC(c:C,h:H,d:C) input # track
r_threadDCM(t:D,c:C,m:M) input # track
r_thrSenAbbrRootCM(c:C,m:M) input # track
r_thrSenAbbrReachableCM(c:C,m:M) input # track
r_thrSenAbbrCICM(c:C,i:I,d:C,m:M) input # track
r_reachableTCMZ(t:D,c:C,m:M) input # track
r_reachableTCE(t:D,c:C,e:E) input # track
r_startingRaceHext(t1:D,c1:C,e1:E,t2:D,c2:C,e2:E) input # track
r_CEC(c:C,e:E,o:C) input # track
r_escA(a:C) input # track
r_escapingRaceHext(t1:D,c1:C,e1:E,t2:D,c2:C,e2:E) input # track
r_threadDC(t:D,c:C) input # track
r_ForkPMcs(caller:C,p1:P,callee:C) input # track
r_ForkPHcs(caller:C,p1:P,callee:C,p2:P) input # track
r_NonForkPMcs(caller:C,p1:P,callee:C,m2:M) input # track
r_NonForkPHcs(caller:C,p1:P,callee:C,p2:P) input # track
r_NonForkPTcs(caller:C,p1:P,callee:C,p2:P) input # track
r_PathEdgeZ(c:C,p:P,this:D,sThat:D,tThat:D) input # track
r_SummEdgeZ(c:C,p:P,this:D,sThat:D,tThat:D) input # track
r_mhpZ(c:C,p:P,t1:D,t2:D) input # track
r_mheZ(c:C,e:E,t1:D,t2:D) input # track
r_parallelRaceHext(t1:D,c1:C,e1:E,t2:D,c2:C,e2:E) input # track
r_outQueryEE(e1:E,e2:E) input # track

### CHC(c,h,d) :- CC(c,d), CH(d,h).
# TRANS - t_CH_CHC CH CHC 0,1 2,1,0
t_CH_CHC(d:C,h:H,c:C) output
t_CH_CHC(d,h,c) :- r_CHC(c,h,d), CC(c,d), CH(d,h).

### kobjSenICM(i,o,m) :- kobjSenIHM(i,h,m), CH(o,h).
# TRANS - t_CH_kobjSenICM CH kobjSenICM 0,1 2,0,3
t_CH_kobjSenICM(o:C,h:H,i:I,m:M) output
t_CH_kobjSenICM(o,h,i,m) :- r_kobjSenICM(i,o,m), kobjSenIHM(i,h,m), CH(o,h).

### reachableCM(0,m) :- clinitTM(t,m), reachableT(t).
# TRANS - t_reachableT_reachableCM reachableT reachableCM 0 1,2
t_reachableT_reachableCM(t:T,0:C,m:M) output
t_reachableT_reachableCM(t,0,m) :- r_reachableCM(0,m), clinitTM(t,m), reachableT(t).

### reachableCM(c,m) :- CICM(_,_,c,m).
# TRANS - t_CICM_reachableCM CICM reachableCM 0,1,2,3 2,3
t_CICM_reachableCM(x1:C,x2:I,c:C,m:M) output
t_CICM_reachableCM(x1,x2,c,m) :- r_reachableCM(c,m), CICM(x1,x2,c,m).

### reachableCI(c,i) :- MI(m,i), reachableCM(c,m).
# TRANS - t_reachableCM_reachableCI reachableCM reachableCI 0,1 0,2
t_reachableCM_reachableCI(c:C,m:M,i:I) output
t_reachableCM_reachableCI(c,m,i) :- r_reachableCI(c,i), MI(m,i), reachableCM(c,m).

### DIC(c,i,o) :- IinvkArg0(i,v), DVC(c,v,o).
# TRANS - t_DVC_DIC DVC DIC 0,1,2 0,3,2
t_DVC_DIC(c:C,v:V,o:C,i:I) output
t_DVC_DIC(c,v,o,i) :- r_DIC(c,i,o), IinvkArg0(i,v), DVC(c,v,o).

### DIH(c,i,h) :- DIC(c,i,o), CH(o,h).
# TRANS - t_DIC_DIH DIC DIH 0,1,2 0,1,3
t_DIC_DIH(c:C,i:I,o:C,h:H) output
t_DIC_DIH(c,i,o,h) :- r_DIH(c,i,h), DIC(c,i,o), CH(o,h).
# TRANS - t_CH_DIH CH DIH 0,1 2,3,1
t_CH_DIH(o:C,h:H,c:C,i:I) output
t_CH_DIH(o,h,c,i) :- r_DIH(c,i,h), DIC(c,i,o), CH(o,h).

### DI(c,i) :- DIH(c,i,_).
# TRANS - t_DIH_DI DIH DI 0,1,2 0,1
t_DIH_DI(c:C,i:I,x3:H) output
t_DIH_DI(c,i,x3) :- r_DI(c,i), DIH(c,i,x3).

### CICM(c,i,0,m) :- reachableCI(c,i), ctxtInsIHM(i,h,m), DIH(c,i,h).
# TRANS - t_reachableCI_CICM reachableCI CICM 0,1 0,1,2,3
t_reachableCI_CICM(c:C,i:I,0:C,m:M) output
t_reachableCI_CICM(c,i,0,m) :- r_CICM(c,i,0,m), reachableCI(c,i), ctxtInsIHM(i,h,m), DIH(c,i,h).
# TRANS - t_DIH_CICM DIH CICM 0,1,2 0,1,3,4
t_DIH_CICM(c:C,i:I,h:H,0:C,m:M) output
t_DIH_CICM(c,i,h,0,m) :- r_CICM(c,i,0,m), reachableCI(c,i), ctxtInsIHM(i,h,m), DIH(c,i,h).

### CICM(c,i,o,m) :- reachableCI(c,i), kobjSenICM(i,o,m), DIC(c,i,o).
# TRANS - t_reachableCI_CICM1 reachableCI CICM 0,1 0,1,2,3
t_reachableCI_CICM1(c:C,i:I,o:C,m:M) output
t_reachableCI_CICM1(c,i,o,m) :- r_CICM(c,i,o,m), reachableCI(c,i), kobjSenICM(i,o,m), DIC(c,i,o).
# TRANS - t_kobjSenICM_CICM kobjSenICM CICM 0,1,2 3,0,1,2
t_kobjSenICM_CICM(i:I,o:C,m:M,c:C) output
t_kobjSenICM_CICM(i,o,m,c) :- r_CICM(c,i,o,m), reachableCI(c,i), kobjSenICM(i,o,m), DIC(c,i,o).
# TRANS - t_DIC_CICM DIC CICM 0,1,2 0,1,2,3
t_DIC_CICM(c:C,i:I,o:C,m:M) output
t_DIC_CICM(c,i,o,m) :- r_CICM(c,i,o,m), reachableCI(c,i), kobjSenICM(i,o,m), DIC(c,i,o).

### CICM(c,i,0,m) :- reachableCI(c,i), ctxtInsSpecIM(i,m), DI(c,i).
# TRANS - t_reachableCI_CICM2 reachableCI CICM 0,1 0,1,2,3
t_reachableCI_CICM2(c:C,i:I,0:C,m:M) output
t_reachableCI_CICM2(c,i,0,m) :- r_CICM(c,i,0,m), reachableCI(c,i), ctxtInsSpecIM(i,m), DI(c,i).
# TRANS - t_DI_CICM DI CICM 0,1 0,1,2,3
t_DI_CICM(c:C,i:I,0:C,m:M) output
t_DI_CICM(c,i,0,m) :- r_CICM(c,i,0,m), reachableCI(c,i), ctxtInsSpecIM(i,m), DI(c,i).

### CICM(c,i,o,m) :- reachableCI(c,i), kobjSenSpecIM(i,m), DIC(c,i,o).
# TRANS - t_reachableCI_CICM3 reachableCI CICM 0,1 0,1,2,3
t_reachableCI_CICM3(c:C,i:I,o:C,m:M) output
t_reachableCI_CICM3(c,i,o,m) :- r_CICM(c,i,o,m), reachableCI(c,i), kobjSenSpecIM(i,m), DIC(c,i,o).
# TRANS - t_DIC_CICM1 DIC CICM 0,1,2 0,1,2,3
t_DIC_CICM1(c:C,i:I,o:C,m:M) output
t_DIC_CICM1(c,i,o,m) :- r_CICM(c,i,o,m), reachableCI(c,i), kobjSenSpecIM(i,m), DIC(c,i,o).

### CICM(c,i,0,m) :- reachableCI(c,i), ctxtInsStatIM(i,m).
# TRANS - t_reachableCI_CICM4 reachableCI CICM 0,1 0,1,2,3
t_reachableCI_CICM4(c:C,i:I,0:C,m:M) output
t_reachableCI_CICM4(c,i,0,m) :- r_CICM(c,i,0,m), reachableCI(c,i), ctxtInsStatIM(i,m).

### CICM(c,i,d,m) :- reachableCI(c,i), ctxtCpyStatIM(i,m), d=c.
# TRANS - t_reachableCI_CICM5 reachableCI CICM 0,1 0,1,2,3
t_reachableCI_CICM5(c:C,i:I,d:C,m:M) output
t_reachableCI_CICM5(c,i,d,m) :- r_CICM(c,i,d,m), reachableCI(c,i), ctxtCpyStatIM(i,m), d=c.

### DVC(c,v,o) :- reachableCM(c,m), MspcMethArg(m,v), o=c.
# TRANS - t_reachableCM_DVC reachableCM DVC 0,1 0,2,3
t_reachableCM_DVC(c:C,m:M,v:V,o:C) output
t_reachableCM_DVC(c,m,v,o) :- r_DVC(c,v,o), reachableCM(c,m), MspcMethArg(m,v), o=c.

### DVDV(d,v,c,u) :- argCopy(i,u,m,v), CICM(c,i,d,m).
# TRANS - t_CICM_DVDV CICM DVDV 0,1,2,3 2,4,0,5
t_CICM_DVDV(c:C,i:I,d:C,m:M,v:V,u:V) output
t_CICM_DVDV(c,i,d,m,v,u) :- r_DVDV(d,v,c,u), argCopy(i,u,m,v), CICM(c,i,d,m).

### DVDV(c,u,d,v) :- retCopy(i,u,m,v), CICM(c,i,d,m).
# TRANS - t_CICM_DVDV1 CICM DVDV 0,1,2,3 0,4,2,5
t_CICM_DVDV1(c:C,i:I,d:C,m:M,u:V,v:V) output
t_CICM_DVDV1(c,i,d,m,u,v) :- r_DVDV(c,u,d,v), retCopy(i,u,m,v), CICM(c,i,d,m).

### DVC(c,u,o) :- DVDV(c,u,d,v), DVC(d,v,o), VCfilter(u,o).
# TRANS - t_DVDV_DVC DVDV DVC 0,1,2,3 0,1,4
t_DVDV_DVC(c:C,u:V,d:C,v:V,o:C) output
t_DVDV_DVC(c,u,d,v,o) :- r_DVC(c,u,o), DVDV(c,u,d,v), DVC(d,v,o), VCfilter(u,o).
# TRANS - t_DVC_DVC DVC DVC 0,1,2 3,4,2
t_DVC_DVC(d:C,v:V,o:C,c:C,u:V) output
t_DVC_DVC(d,v,o,c,u) :- r_DVC(c,u,o), DVDV(c,u,d,v), DVC(d,v,o), VCfilter(u,o).

### RobjValAsgnInst(c,l,h) :- reachableCM(c,m), MobjValAsgnInst(m,l,h).
# TRANS - t_reachableCM_RobjValAsgnInst reachableCM RobjValAsgnInst 0,1 0,2,3
t_reachableCM_RobjValAsgnInst(c:C,m:M,l:V,h:H) output
t_reachableCM_RobjValAsgnInst(c,m,l,h) :- r_RobjValAsgnInst(c,l,h), reachableCM(c,m), MobjValAsgnInst(m,l,h).

### DVC(c,l,o) :- RobjValAsgnInst(c,l,h), CHC(c,h,o).
# TRANS - t_RobjValAsgnInst_DVC RobjValAsgnInst DVC 0,1,2 0,1,3
t_RobjValAsgnInst_DVC(c:C,l:V,h:H,o:C) output
t_RobjValAsgnInst_DVC(c,l,h,o) :- r_DVC(c,l,o), RobjValAsgnInst(c,l,h), CHC(c,h,o).
# TRANS - t_CHC_DVC CHC DVC 0,1,2 0,3,2
t_CHC_DVC(c:C,h:H,o:C,l:V) output
t_CHC_DVC(c,h,o,l) :- r_DVC(c,l,o), RobjValAsgnInst(c,l,h), CHC(c,h,o).

### RobjVarAsgnInst(c,l,r) :- reachableCM(c,m), MobjVarAsgnInst(m,l,r).
# TRANS - t_reachableCM_RobjVarAsgnInst reachableCM RobjVarAsgnInst 0,1 0,2,3
t_reachableCM_RobjVarAsgnInst(c:C,m:M,l:V,r:V) output
t_reachableCM_RobjVarAsgnInst(c,m,l,r) :- r_RobjVarAsgnInst(c,l,r), reachableCM(c,m), MobjVarAsgnInst(m,l,r).

### DVC(c,l,c1) :- RobjVarAsgnInst(c,l,r), DVC(c,r,c1), VCfilter(l,c1).
# TRANS - t_RobjVarAsgnInst_DVC RobjVarAsgnInst DVC 0,1,2 0,1,3
t_RobjVarAsgnInst_DVC(c:C,l:V,r:V,c1:C) output
t_RobjVarAsgnInst_DVC(c,l,r,c1) :- r_DVC(c,l,c1), RobjVarAsgnInst(c,l,r), DVC(c,r,c1), VCfilter(l,c1).
# TRANS - t_DVC_DVC1 DVC DVC 0,1,2 0,3,2
t_DVC_DVC1(c:C,r:V,c1:C,l:V) output
t_DVC_DVC1(c,r,c1,l) :- r_DVC(c,l,c1), RobjVarAsgnInst(c,l,r), DVC(c,r,c1), VCfilter(l,c1).

### RgetInstFldInst(c,l,b,f) :- reachableCM(c,m), MgetInstFldInst(m,l,b,f).
# TRANS - t_reachableCM_RgetInstFldInst reachableCM RgetInstFldInst 0,1 0,2,3,4
t_reachableCM_RgetInstFldInst(c:C,m:M,l:V,b:V,f:F) output
t_reachableCM_RgetInstFldInst(c,m,l,b,f) :- r_RgetInstFldInst(c,l,b,f), reachableCM(c,m), MgetInstFldInst(m,l,b,f).

### DVC(c,l,c2) :- RgetInstFldInst(c,l,b,f), DVC(c,b,c1), CFC(c1,f,c2).
# TRANS - t_RgetInstFldInst_DVC RgetInstFldInst DVC 0,1,2,3 0,1,4
t_RgetInstFldInst_DVC(c:C,l:V,b:V,f:F,c2:C) output
t_RgetInstFldInst_DVC(c,l,b,f,c2) :- r_DVC(c,l,c2), RgetInstFldInst(c,l,b,f), DVC(c,b,c1), CFC(c1,f,c2).
# TRANS - t_DVC_DVC2 DVC DVC 0,1,2 0,3,4
t_DVC_DVC2(c:C,b:V,c1:C,l:V,c2:C) output
t_DVC_DVC2(c,b,c1,l,c2) :- r_DVC(c,l,c2), RgetInstFldInst(c,l,b,f), DVC(c,b,c1), CFC(c1,f,c2).
# TRANS - t_CFC_DVC CFC DVC 0,1,2 3,4,2
t_CFC_DVC(c1:C,f:F,c2:C,c:C,l:V) output
t_CFC_DVC(c1,f,c2,c,l) :- r_DVC(c,l,c2), RgetInstFldInst(c,l,b,f), DVC(c,b,c1), CFC(c1,f,c2).

### RgetStatFldInst(c,l,f) :- reachableCM(c,m), MgetStatFldInst(m,l,f).
# TRANS - t_reachableCM_RgetStatFldInst reachableCM RgetStatFldInst 0,1 0,2,3
t_reachableCM_RgetStatFldInst(c:C,m:M,l:V,f:F) output
t_reachableCM_RgetStatFldInst(c,m,l,f) :- r_RgetStatFldInst(c,l,f), reachableCM(c,m), MgetStatFldInst(m,l,f).

### DVC(c,l,o) :- RgetStatFldInst(c,l,f), FC(f,o).
# TRANS - t_RgetStatFldInst_DVC RgetStatFldInst DVC 0,1,2 0,1,3
t_RgetStatFldInst_DVC(c:C,l:V,f:F,o:C) output
t_RgetStatFldInst_DVC(c,l,f,o) :- r_DVC(c,l,o), RgetStatFldInst(c,l,f), FC(f,o).
# TRANS - t_FC_DVC FC DVC 0,1 2,3,1
t_FC_DVC(f:F,o:C,c:C,l:V) output
t_FC_DVC(f,o,c,l) :- r_DVC(c,l,o), RgetStatFldInst(c,l,f), FC(f,o).

### RputInstFldInst(c,b,f,r) :- reachableCM(c,m), MputInstFldInst(m,b,f,r).
# TRANS - t_reachableCM_RputInstFldInst reachableCM RputInstFldInst 0,1 0,2,3,4
t_reachableCM_RputInstFldInst(c:C,m:M,b:V,f:F,r:V) output
t_reachableCM_RputInstFldInst(c,m,b,f,r) :- r_RputInstFldInst(c,b,f,r), reachableCM(c,m), MputInstFldInst(m,b,f,r).

### CFC(c1,f,c2) :- RputInstFldInst(c,b,f,r), DVC(c,b,c1), DVC(c,r,c2).
# TRANS - t_RputInstFldInst_CFC RputInstFldInst CFC 0,1,2,3 4,2,5
t_RputInstFldInst_CFC(c:C,b:V,f:F,r:V,c1:C,c2:C) output
t_RputInstFldInst_CFC(c,b,f,r,c1,c2) :- r_CFC(c1,f,c2), RputInstFldInst(c,b,f,r), DVC(c,b,c1), DVC(c,r,c2).
# TRANS - t_DVC_CFC DVC CFC 0,1,2 2,3,4
t_DVC_CFC(c:C,b:V,c1:C,f:F,c2:C) output
t_DVC_CFC(c,b,c1,f,c2) :- r_CFC(c1,f,c2), RputInstFldInst(c,b,f,r), DVC(c,b,c1), DVC(c,r,c2).
# TRANS - t_DVC_CFC1 DVC CFC 0,1,2 3,4,2
t_DVC_CFC1(c:C,r:V,c2:C,c1:C,f:F) output
t_DVC_CFC1(c,r,c2,c1,f) :- r_CFC(c1,f,c2), RputInstFldInst(c,b,f,r), DVC(c,b,c1), DVC(c,r,c2).

### RputStatFldInst(c,f,r) :- reachableCM(c,m), MputStatFldInst(m,f,r).
# TRANS - t_reachableCM_RputStatFldInst reachableCM RputStatFldInst 0,1 0,2,3
t_reachableCM_RputStatFldInst(c:C,m:M,f:F,r:V) output
t_reachableCM_RputStatFldInst(c,m,f,r) :- r_RputStatFldInst(c,f,r), reachableCM(c,m), MputStatFldInst(m,f,r).

### FC(f,o) :- RputStatFldInst(c,f,r), DVC(c,r,o).
# TRANS - t_RputStatFldInst_FC RputStatFldInst FC 0,1,2 1,3
t_RputStatFldInst_FC(c:C,f:F,r:V,o:C) output
t_RputStatFldInst_FC(c,f,r,o) :- r_FC(f,o), RputStatFldInst(c,f,r), DVC(c,r,o).
# TRANS - t_DVC_FC DVC FC 0,1,2 3,2
t_DVC_FC(c:C,r:V,o:C,f:F) output
t_DVC_FC(c,r,o,f) :- r_FC(f,o), RputStatFldInst(c,f,r), DVC(c,r,o).

### reachableCM(c,m) :- reachableCI(c,i), objNewInstIM(i,m).
# TRANS - t_reachableCI_reachableCM reachableCI reachableCM 0,1 0,2
t_reachableCI_reachableCM(c:C,i:I,m:M) output
t_reachableCI_reachableCM(c,i,m) :- r_reachableCM(c,m), reachableCI(c,i), objNewInstIM(i,m).

### reachableCM(c,m) :- reachableCI(c,i), conNewInstIM(i,m).
# TRANS - t_reachableCI_reachableCM1 reachableCI reachableCM 0,1 0,2
t_reachableCI_reachableCM1(c:C,i:I,m:M) output
t_reachableCI_reachableCM1(c,i,m) :- r_reachableCM(c,m), reachableCI(c,i), conNewInstIM(i,m).

### DVC(c,v,o) :- reachableCI(c,i), objNewInstIM(i,m), MmethArg(m,0,v), objNewInstIH(i,h), CHC(c,h,o).
# TRANS - t_reachableCI_DVC reachableCI DVC 0,1 0,2,3
t_reachableCI_DVC(c:C,i:I,v:V,o:C) output
t_reachableCI_DVC(c,i,v,o) :- r_DVC(c,v,o), reachableCI(c,i), objNewInstIM(i,m), MmethArg(m,0,v), objNewInstIH(i,h), CHC(c,h,o).
# TRANS - t_CHC_DVC1 CHC DVC 0,1,2 0,3,2
t_CHC_DVC1(c:C,h:H,o:C,v:V) output
t_CHC_DVC1(c,h,o,v) :- r_DVC(c,v,o), reachableCI(c,i), objNewInstIM(i,m), MmethArg(m,0,v), objNewInstIH(i,h), CHC(c,h,o).

### DVC(c,v,o) :- reachableCI(c,i), objNewInstIH(i,h), IinvkRet(i,0,v), CHC(c,h,o).
# TRANS - t_reachableCI_DVC1 reachableCI DVC 0,1 0,2,3
t_reachableCI_DVC1(c:C,i:I,v:V,o:C) output
t_reachableCI_DVC1(c,i,v,o) :- r_DVC(c,v,o), reachableCI(c,i), objNewInstIH(i,h), IinvkRet(i,0,v), CHC(c,h,o).
# TRANS - t_CHC_DVC2 CHC DVC 0,1,2 0,3,2
t_CHC_DVC2(c:C,h:H,o:C,v:V) output
t_CHC_DVC2(c,h,o,v) :- r_DVC(c,v,o), reachableCI(c,i), objNewInstIH(i,h), IinvkRet(i,0,v), CHC(c,h,o).

### DVC(c,v,o2) :- reachableCI(c,i), conNewInstIM(i,m), IinvkArg(i,1,u), MmethArg(m,1,v), DVC(c,u,o), CFC(o,0,o2).
# TRANS - t_reachableCI_DVC2 reachableCI DVC 0,1 0,2,3
t_reachableCI_DVC2(c:C,i:I,v:V,o2:C) output
t_reachableCI_DVC2(c,i,v,o2) :- r_DVC(c,v,o2), reachableCI(c,i), conNewInstIM(i,m), IinvkArg(i,1,u), MmethArg(m,1,v), DVC(c,u,o), CFC(o,0,o2).
# TRANS - t_DVC_DVC3 DVC DVC 0,1,2 0,3,4
t_DVC_DVC3(c:C,u:V,o:C,v:V,o2:C) output
t_DVC_DVC3(c,u,o,v,o2) :- r_DVC(c,v,o2), reachableCI(c,i), conNewInstIM(i,m), IinvkArg(i,1,u), MmethArg(m,1,v), DVC(c,u,o), CFC(o,0,o2).
# TRANS - t_CFC_DVC1 CFC DVC 0,1,2 3,4,2
t_CFC_DVC1(o:C,0:F,o2:C,c:C,v:V) output
t_CFC_DVC1(o,0,o2,c,v) :- r_DVC(c,v,o2), reachableCI(c,i), conNewInstIM(i,m), IinvkArg(i,1,u), MmethArg(m,1,v), DVC(c,u,o), CFC(o,0,o2).

### DVC(c,v,o) :- reachableCI(c,i), conNewInstIM(i,m), MmethArg(m,0,v), conNewInstIH(i,h), CHC(c,h,o).
# TRANS - t_reachableCI_DVC3 reachableCI DVC 0,1 0,2,3
t_reachableCI_DVC3(c:C,i:I,v:V,o:C) output
t_reachableCI_DVC3(c,i,v,o) :- r_DVC(c,v,o), reachableCI(c,i), conNewInstIM(i,m), MmethArg(m,0,v), conNewInstIH(i,h), CHC(c,h,o).
# TRANS - t_CHC_DVC3 CHC DVC 0,1,2 0,3,2
t_CHC_DVC3(c:C,h:H,o:C,v:V) output
t_CHC_DVC3(c,h,o,v) :- r_DVC(c,v,o), reachableCI(c,i), conNewInstIM(i,m), MmethArg(m,0,v), conNewInstIH(i,h), CHC(c,h,o).

### DVC(c,v,o) :- reachableCI(c,i), conNewInstIH(i,h), IinvkRet(i,0,v), CHC(c,h,o).
# TRANS - t_reachableCI_DVC4 reachableCI DVC 0,1 0,2,3
t_reachableCI_DVC4(c:C,i:I,v:V,o:C) output
t_reachableCI_DVC4(c,i,v,o) :- r_DVC(c,v,o), reachableCI(c,i), conNewInstIH(i,h), IinvkRet(i,0,v), CHC(c,h,o).
# TRANS - t_CHC_DVC4 CHC DVC 0,1,2 0,3,2
t_CHC_DVC4(c:C,h:H,o:C,v:V) output
t_CHC_DVC4(c,h,o,v) :- r_DVC(c,v,o), reachableCI(c,i), conNewInstIH(i,h), IinvkRet(i,0,v), CHC(c,h,o).

### DVC(c,v,o) :- reachableCI(c,i), aryNewInstIH(i,h), IinvkRet(i,0,v), CHC(c,h,o).
# TRANS - t_reachableCI_DVC5 reachableCI DVC 0,1 0,2,3
t_reachableCI_DVC5(c:C,i:I,v:V,o:C) output
t_reachableCI_DVC5(c,i,v,o) :- r_DVC(c,v,o), reachableCI(c,i), aryNewInstIH(i,h), IinvkRet(i,0,v), CHC(c,h,o).
# TRANS - t_CHC_DVC5 CHC DVC 0,1,2 0,3,2
t_CHC_DVC5(c:C,h:H,o:C,v:V) output
t_CHC_DVC5(c,h,o,v) :- r_DVC(c,v,o), reachableCI(c,i), aryNewInstIH(i,h), IinvkRet(i,0,v), CHC(c,h,o).

### DVC(_,v,o) :- DVC(_,v,o), epsilonV(v).
# TRANS - t_DVC_DVC4 DVC DVC 0,1,2 3,1,2
t_DVC_DVC4(x5:C,v:V,o:C,x4:C) output
t_DVC_DVC4(x5,v,o,x4) :- r_DVC(x4,v,o), DVC(x5,v,o), epsilonV(v).

### reachableT(t) :- reachableCI(_,i), conNewInstIH(i,h), HT(h,t).
# TRANS - t_reachableCI_reachableT reachableCI reachableT 0,1 2
t_reachableCI_reachableT(x6:C,i:I,t:T) output
t_reachableCI_reachableT(x6,i,t) :- r_reachableT(t), reachableCI(x6,i), conNewInstIH(i,h), HT(h,t).

### reachableT(t) :- reachableCI(_,i), objNewInstIH(i,h), HT(h,t).
# TRANS - t_reachableCI_reachableT1 reachableCI reachableT 0,1 2
t_reachableCI_reachableT1(x7:C,i:I,t:T) output
t_reachableCI_reachableT1(x7,i,t) :- r_reachableT(t), reachableCI(x7,i), objNewInstIH(i,h), HT(h,t).

### reachableT(t) :- reachableCI(_,i), clsForNameIT(i,t).
# TRANS - t_reachableCI_reachableT2 reachableCI reachableT 0,1 2
t_reachableCI_reachableT2(x8:C,i:I,t:T) output
t_reachableCI_reachableT2(x8,i,t) :- r_reachableT(t), reachableCI(x8,i), clsForNameIT(i,t).

### reachableT(t) :- reachableCM(_,m), MobjValAsgnInst(m,_,h), HT(h,t).
# TRANS - t_reachableCM_reachableT reachableCM reachableT 0,1 2
t_reachableCM_reachableT(x9:C,m:M,t:T) output
t_reachableCM_reachableT(x9,m,t) :- r_reachableT(t), reachableCM(x9,m), MobjValAsgnInst(m,_,h), HT(h,t).

### reachableT(t) :- reachableCM(_,m), staticTM(t,m).
# TRANS - t_reachableCM_reachableT1 reachableCM reachableT 0,1 2
t_reachableCM_reachableT1(x11:C,m:M,t:T) output
t_reachableCM_reachableT1(x11,m,t) :- r_reachableT(t), reachableCM(x11,m), staticTM(t,m).

### reachableT(t) :- reachableCM(_,m), MputStatFldInst(m,f,_), staticTF(t,f).
# TRANS - t_reachableCM_reachableT2 reachableCM reachableT 0,1 2
t_reachableCM_reachableT2(x12:C,m:M,t:T) output
t_reachableCM_reachableT2(x12,m,t) :- r_reachableT(t), reachableCM(x12,m), MputStatFldInst(m,f,_), staticTF(t,f).

### reachableT(t) :- reachableCM(_,m), MgetStatFldInst(m,_,f), staticTF(t,f).
# TRANS - t_reachableCM_reachableT3 reachableCM reachableT 0,1 2
t_reachableCM_reachableT3(x14:C,m:M,t:T) output
t_reachableCM_reachableT3(x14,m,t) :- r_reachableT(t), reachableCM(x14,m), MgetStatFldInst(m,_,f), staticTF(t,f).

### reachableT(t) :- classT(t), reachableT(s), sub(s,t).
# TRANS - t_reachableT_reachableT reachableT reachableT 0 1
t_reachableT_reachableT(s:T,t:T) output
t_reachableT_reachableT(s,t) :- r_reachableT(t), classT(t), reachableT(s), sub(s,t).

### CVC(0,v,o) :- DVC(_,v,o), epsilonV(v).
# TRANS - t_DVC_CVC DVC CVC 0,1,2 3,1,2
t_DVC_CVC(x16:C,v:V,o:C,0:C) output
t_DVC_CVC(x16,v,o,0) :- r_CVC(0,v,o), DVC(x16,v,o), epsilonV(v).

### CVC(c,v,o) :- DVC(c,v,o), !epsilonV(v).
# TRANS - t_DVC_CVC1 DVC CVC 0,1,2 0,1,2
t_DVC_CVC1(c:C,v:V,o:C) output
t_DVC_CVC1(c,v,o) :- r_CVC(c,v,o), DVC(c,v,o), !epsilonV(v).

### escA(a) :- FC(_,a).
# TRANS - t_FC_escA FC escA 0,1 1
t_FC_escA(x17:F,a:C) output
t_FC_escA(x17,a) :- r_escA(a), FC(x17,a).

### escA(a) :- reachableCM(c,1), MmethArg(1,0,v), CVC(c,v,a).
# TRANS ts t_reachableCM_escA reachableCM escA 0,1 2
t_reachableCM_escA(c:C,1:M,a:C) output
t_reachableCM_escA(c,1,a) :- r_escA(a), reachableCM(c,1), MmethArg(1,0,v), CVC(c,v,a).
# TRANS ts t_CVC_escA CVC escA 0,1,2 2
t_CVC_escA(c:C,v:V,a:C) output
t_CVC_escA(c,v,a) :- r_escA(a), reachableCM(c,1), MmethArg(1,0,v), CVC(c,v,a).

### escA(a) :- escA(b), CFC(b,_,a).
# TRANS - t_escA_escA escA escA 0 1
t_escA_escA(b:C,a:C) output
t_escA_escA(b,a) :- r_escA(a), escA(b), CFC(b,_,a).
# TRANS - t_CFC_escA CFC escA 0,1,2 2
t_CFC_escA(b:C,x18:F,a:C) output
t_CFC_escA(b,x18,a) :- r_escA(a), escA(b), CFC(b,x18,a).

### thrSenAbbrRootCM(d,1) :- thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,1).
# TRANS - t_thrSenAbbrReachableCM_thrSenAbbrRootCM thrSenAbbrReachableCM thrSenAbbrRootCM 0,1 2,3
t_thrSenAbbrReachableCM_thrSenAbbrRootCM(c:C,m:M,d:C,1:M) output
t_thrSenAbbrReachableCM_thrSenAbbrRootCM(c,m,d,1) :- r_thrSenAbbrRootCM(d,1), thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,1).
# TRANS - t_CICM_thrSenAbbrRootCM CICM thrSenAbbrRootCM 0,1,2,3 2,3
t_CICM_thrSenAbbrRootCM(c:C,i:I,d:C,1:M) output
t_CICM_thrSenAbbrRootCM(c,i,d,1) :- r_thrSenAbbrRootCM(d,1), thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,1).

### thrSenAbbrReachableCM(c,m) :- thrSenAbbrRootCM(c,m).
# TRANS - t_thrSenAbbrRootCM_thrSenAbbrReachableCM thrSenAbbrRootCM thrSenAbbrReachableCM 0,1 0,1
t_thrSenAbbrRootCM_thrSenAbbrReachableCM(c:C,m:M) output
t_thrSenAbbrRootCM_thrSenAbbrReachableCM(c,m) :- r_thrSenAbbrReachableCM(c,m), thrSenAbbrRootCM(c,m).

### thrSenAbbrReachableCM(d,n) :- thrSenAbbrCICM(_,_,d,n).
# TRANS - t_thrSenAbbrCICM_thrSenAbbrReachableCM thrSenAbbrCICM thrSenAbbrReachableCM 0,1,2,3 2,3
t_thrSenAbbrCICM_thrSenAbbrReachableCM(x19:C,x20:I,d:C,n:M) output
t_thrSenAbbrCICM_thrSenAbbrReachableCM(x19,x20,d,n) :- r_thrSenAbbrReachableCM(d,n), thrSenAbbrCICM(x19,x20,d,n).

### thrSenAbbrCICM(c,i,d,n) :- thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,n), n!=1.
# TRANS - t_thrSenAbbrReachableCM_thrSenAbbrCICM thrSenAbbrReachableCM thrSenAbbrCICM 0,1 0,2,3,4
t_thrSenAbbrReachableCM_thrSenAbbrCICM(c:C,m:M,i:I,d:C,n:M) output
t_thrSenAbbrReachableCM_thrSenAbbrCICM(c,m,i,d,n) :- r_thrSenAbbrCICM(c,i,d,n), thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,n), n!=1.
# TRANS - t_CICM_thrSenAbbrCICM CICM thrSenAbbrCICM 0,1,2,3 0,1,2,3
t_CICM_thrSenAbbrCICM(c:C,i:I,d:C,n:M) output
t_CICM_thrSenAbbrCICM(c,i,d,n) :- r_thrSenAbbrCICM(c,i,d,n), thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,n), n!=1.

### threadDCM(b,c,1) :- threadDHM(b,h,1), reachableCM(c,1), MmethArg(1,0,v), CVC(c,v,o), CH(o,h).
# TRANS - t_reachableCM_threadDCM reachableCM threadDCM 0,1 2,0,1
t_reachableCM_threadDCM(c:C,1:M,b:D) output
t_reachableCM_threadDCM(c,1,b) :- r_threadDCM(b,c,1), threadDHM(b,h,1), reachableCM(c,1), MmethArg(1,0,v), CVC(c,v,o), CH(o,h).
# TRANS - t_CVC_threadDCM CVC threadDCM 0,1,2 3,0,4
t_CVC_threadDCM(c:C,v:V,o:C,b:D,1:M) output
t_CVC_threadDCM(c,v,o,b,1) :- r_threadDCM(b,c,1), threadDHM(b,h,1), reachableCM(c,1), MmethArg(1,0,v), CVC(c,v,o), CH(o,h).
# TRANS - t_CH_threadDCM CH threadDCM 0,1 2,3,4
t_CH_threadDCM(o:C,h:H,b:D,c:C,1:M) output
t_CH_threadDCM(o,h,b,c,1) :- r_threadDCM(b,c,1), threadDHM(b,h,1), reachableCM(c,1), MmethArg(1,0,v), CVC(c,v,o), CH(o,h).

### reachableTCMZ(t,c,m) :- threadDCM(t,c,m).
# TRANS - t_threadDCM_reachableTCMZ threadDCM reachableTCMZ 0,1,2 0,1,2
t_threadDCM_reachableTCMZ(t:D,c:C,m:M) output
t_threadDCM_reachableTCMZ(t,c,m) :- r_reachableTCMZ(t,c,m), threadDCM(t,c,m).

### reachableTCMZ(t,d,n) :- reachableTCMZ(t,c,m), MI(m,i), thrSenAbbrCICM(c,i,d,n).
# TRANS - t_reachableTCMZ_reachableTCMZ reachableTCMZ reachableTCMZ 0,1,2 0,3,4
t_reachableTCMZ_reachableTCMZ(t:D,c:C,m:M,d:C,n:M) output
t_reachableTCMZ_reachableTCMZ(t,c,m,d,n) :- r_reachableTCMZ(t,d,n), reachableTCMZ(t,c,m), MI(m,i), thrSenAbbrCICM(c,i,d,n).
# TRANS - t_thrSenAbbrCICM_reachableTCMZ thrSenAbbrCICM reachableTCMZ 0,1,2,3 4,2,3
t_thrSenAbbrCICM_reachableTCMZ(c:C,i:I,d:C,n:M,t:D) output
t_thrSenAbbrCICM_reachableTCMZ(c,i,d,n,t) :- r_reachableTCMZ(t,d,n), reachableTCMZ(t,c,m), MI(m,i), thrSenAbbrCICM(c,i,d,n).

### reachableTCE(t,c,e) :- reachableTCMZ(t,c,m), ME(m,e).
# TRANS - t_reachableTCMZ_reachableTCE reachableTCMZ reachableTCE 0,1,2 0,1,3
t_reachableTCMZ_reachableTCE(t:D,c:C,m:M,e:E) output
t_reachableTCMZ_reachableTCE(t,c,m,e) :- r_reachableTCE(t,c,e), reachableTCMZ(t,c,m), ME(m,e).

### startingRaceHext(t1,c1,e1,t2,c2,e2) :- inQueryEE(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2).
# TRANS - t_reachableTCE_startingRaceHext reachableTCE startingRaceHext 0,1,2 0,1,2,3,4,5
t_reachableTCE_startingRaceHext(t1:D,c1:C,e1:E,t2:D,c2:C,e2:E) output
t_reachableTCE_startingRaceHext(t1,c1,e1,t2,c2,e2) :- r_startingRaceHext(t1,c1,e1,t2,c2,e2), inQueryEE(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2).
# TRANS - t_reachableTCE_startingRaceHext1 reachableTCE startingRaceHext 0,1,2 3,4,5,0,1,2
t_reachableTCE_startingRaceHext1(t2:D,c2:C,e2:E,t1:D,c1:C,e1:E) output
t_reachableTCE_startingRaceHext1(t2,c2,e2,t1,c1,e1) :- r_startingRaceHext(t1,c1,e1,t2,c2,e2), inQueryEE(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2).

### startingRaceHext(t1,c1,e1,t2,c2,e2) :- inQueryEE(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, c1<c2.
# TRANS - t_reachableTCE_startingRaceHext2 reachableTCE startingRaceHext 0,1,2 0,1,2,3,4,5
t_reachableTCE_startingRaceHext2(t1:D,c1:C,e1:E,t2:D,c2:C,e2:E) output
t_reachableTCE_startingRaceHext2(t1,c1,e1,t2,c2,e2) :- r_startingRaceHext(t1,c1,e1,t2,c2,e2), inQueryEE(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, c1<c2.
# TRANS - t_reachableTCE_startingRaceHext3 reachableTCE startingRaceHext 0,1,2 3,4,5,0,1,2
t_reachableTCE_startingRaceHext3(t2:D,c2:C,e2:E,t1:D,c1:C,e1:E) output
t_reachableTCE_startingRaceHext3(t2,c2,e2,t1,c1,e1) :- r_startingRaceHext(t1,c1,e1,t2,c2,e2), inQueryEE(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, c1<c2.

### startingRaceHext(t1,c1,e1,t2,c2,e2) :- inQueryEE(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, c1=c2, t1<=t2.
# TRANS - t_reachableTCE_startingRaceHext4 reachableTCE startingRaceHext 0,1,2 0,1,2,3,4,5
t_reachableTCE_startingRaceHext4(t1:D,c1:C,e1:E,t2:D,c2:C,e2:E) output
t_reachableTCE_startingRaceHext4(t1,c1,e1,t2,c2,e2) :- r_startingRaceHext(t1,c1,e1,t2,c2,e2), inQueryEE(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, c1=c2, t1<=t2.
# TRANS - t_reachableTCE_startingRaceHext5 reachableTCE startingRaceHext 0,1,2 3,4,5,0,1,2
t_reachableTCE_startingRaceHext5(t2:D,c2:C,e2:E,t1:D,c1:C,e1:E) output
t_reachableTCE_startingRaceHext5(t2,c2,e2,t1,c1,e1) :- r_startingRaceHext(t1,c1,e1,t2,c2,e2), inQueryEE(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, c1=c2, t1<=t2.

### CEC(c,e,o) :- EV(e,v), CVC(c,v,o), escA(o).
# TRANS - t_CVC_CEC CVC CEC 0,1,2 0,3,2
t_CVC_CEC(c:C,v:V,o:C,e:E) output
t_CVC_CEC(c,v,o,e) :- r_CEC(c,e,o), EV(e,v), CVC(c,v,o), escA(o).
# TRANS - t_escA_CEC escA CEC 0 1,2,0
t_escA_CEC(o:C,c:C,e:E) output
t_escA_CEC(o,c,e) :- r_CEC(c,e,o), EV(e,v), CVC(c,v,o), escA(o).

### escapingRaceHext(t1,c1,e1,t2,c2,e2) :- startingRaceHext(t1,c1,e1,t2,c2,e2), CEC(c1,e1,o), CEC(c2,e2,o).
# TRANS - t_startingRaceHext_escapingRaceHext startingRaceHext escapingRaceHext 0,1,2,3,4,5 0,1,2,3,4,5
t_startingRaceHext_escapingRaceHext(t1:D,c1:C,e1:E,t2:D,c2:C,e2:E) output
t_startingRaceHext_escapingRaceHext(t1,c1,e1,t2,c2,e2) :- r_escapingRaceHext(t1,c1,e1,t2,c2,e2), startingRaceHext(t1,c1,e1,t2,c2,e2), CEC(c1,e1,o), CEC(c2,e2,o).
# TRANS - t_CEC_escapingRaceHext CEC escapingRaceHext 0,1,2 3,0,1,4,5,6
t_CEC_escapingRaceHext(c1:C,e1:E,o:C,t1:D,t2:D,c2:C,e2:E) output
t_CEC_escapingRaceHext(c1,e1,o,t1,t2,c2,e2) :- r_escapingRaceHext(t1,c1,e1,t2,c2,e2), startingRaceHext(t1,c1,e1,t2,c2,e2), CEC(c1,e1,o), CEC(c2,e2,o).
# TRANS - t_CEC_escapingRaceHext1 CEC escapingRaceHext 0,1,2 3,4,5,6,0,1
t_CEC_escapingRaceHext1(c2:C,e2:E,o:C,t1:D,c1:C,e1:E,t2:D) output
t_CEC_escapingRaceHext1(c2,e2,o,t1,c1,e1,t2) :- r_escapingRaceHext(t1,c1,e1,t2,c2,e2), startingRaceHext(t1,c1,e1,t2,c2,e2), CEC(c1,e1,o), CEC(c2,e2,o).

### escapingRaceHext(t1,c1,e1,t2,c2,e2) :- startingRaceHext(t1,c1,e1,t2,c2,e2), statE(e1), statE(e2).
# TRANS - t_startingRaceHext_escapingRaceHext1 startingRaceHext escapingRaceHext 0,1,2,3,4,5 0,1,2,3,4,5
t_startingRaceHext_escapingRaceHext1(t1:D,c1:C,e1:E,t2:D,c2:C,e2:E) output
t_startingRaceHext_escapingRaceHext1(t1,c1,e1,t2,c2,e2) :- r_escapingRaceHext(t1,c1,e1,t2,c2,e2), startingRaceHext(t1,c1,e1,t2,c2,e2), statE(e1), statE(e2).

### NonForkPMcs(c,p,d,m) :- CICM(c,i,d,m), m!=1, PI(p,i).
# TRANS - t_CICM_NonForkPMcs CICM NonForkPMcs 0,1,2,3 0,4,2,3
t_CICM_NonForkPMcs(c:C,i:I,d:C,m:M,p:P) output
t_CICM_NonForkPMcs(c,i,d,m,p) :- r_NonForkPMcs(c,p,d,m), CICM(c,i,d,m), m!=1, PI(p,i).

### NonForkPHcs(c,p,d,h) :- NonForkPMcs(c,p,d,m), MPhead(m,h).
# TRANS - t_NonForkPMcs_NonForkPHcs NonForkPMcs NonForkPHcs 0,1,2,3 0,1,2,4
t_NonForkPMcs_NonForkPHcs(c:C,p:P,d:C,m:M,h:P) output
t_NonForkPMcs_NonForkPHcs(c,p,d,m,h) :- r_NonForkPHcs(c,p,d,h), NonForkPMcs(c,p,d,m), MPhead(m,h).

### NonForkPTcs(c,p,d,t) :- NonForkPMcs(c,p,d,m), MPtail(m,t).
# TRANS - t_NonForkPMcs_NonForkPTcs NonForkPMcs NonForkPTcs 0,1,2,3 0,1,2,4
t_NonForkPMcs_NonForkPTcs(c:C,p:P,d:C,m:M,t:P) output
t_NonForkPMcs_NonForkPTcs(c,p,d,m,t) :- r_NonForkPTcs(c,p,d,t), NonForkPMcs(c,p,d,m), MPtail(m,t).

### ForkPMcs(c,p,d) :- CICM(c,i,d,1), PI(p,i).
# TRANS - t_CICM_ForkPMcs CICM ForkPMcs 0,1,2,3 0,4,2
t_CICM_ForkPMcs(c:C,i:I,d:C,1:M,p:P) output
t_CICM_ForkPMcs(c,i,d,1,p) :- r_ForkPMcs(c,p,d), CICM(c,i,d,1), PI(p,i).

### ForkPHcs(c,p,d,h) :- ForkPMcs(c,p,d), MPhead(1,h).
# TRANS - t_ForkPMcs_ForkPHcs ForkPMcs ForkPHcs 0,1,2 0,1,2,3
t_ForkPMcs_ForkPHcs(c:C,p:P,d:C,h:P) output
t_ForkPMcs_ForkPHcs(c,p,d,h) :- r_ForkPHcs(c,p,d,h), ForkPMcs(c,p,d), MPhead(1,h).

### threadDC(t,c) :- threadDCM(t,c,1).
# TRANS - t_threadDCM_threadDC threadDCM threadDC 0,1,2 0,1
t_threadDCM_threadDC(t:D,c:C,1:M) output
t_threadDCM_threadDC(t,c,1) :- r_threadDC(t,c), threadDCM(t,c,1).

### PathEdgeZ(c,q,t,t1,t2) :- PathEdgeZ(c,p,t,t1,t2), PP(p,q).
# TRANS - t_PathEdgeZ_PathEdgeZ PathEdgeZ PathEdgeZ 0,1,2,3,4 0,5,2,3,4
t_PathEdgeZ_PathEdgeZ(c:C,p:P,t:D,t1:D,t2:D,q:P) output
t_PathEdgeZ_PathEdgeZ(c,p,t,t1,t2,q) :- r_PathEdgeZ(c,q,t,t1,t2), PathEdgeZ(c,p,t,t1,t2), PP(p,q).

### PathEdgeZ(d,q,t,t1,t2) :- NonForkPHcs(c,p,d,q), PathEdgeZ(c,p,t,_,t2), t1=t2.
# TRANS - t_NonForkPHcs_PathEdgeZ NonForkPHcs PathEdgeZ 0,1,2,3 2,3,4,5,6
t_NonForkPHcs_PathEdgeZ(c:C,p:P,d:C,q:P,t:D,t1:D,t2:D) output
t_NonForkPHcs_PathEdgeZ(c,p,d,q,t,t1,t2) :- r_PathEdgeZ(d,q,t,t1,t2), NonForkPHcs(c,p,d,q), PathEdgeZ(c,p,t,_,t2), t1=t2.
# TRANS - t_PathEdgeZ_PathEdgeZ1 PathEdgeZ PathEdgeZ 0,1,2,3,4 5,6,2,7,4
t_PathEdgeZ_PathEdgeZ1(c:C,p:P,t:D,x21:D,t2:D,d:C,q:P,t1:D) output
t_PathEdgeZ_PathEdgeZ1(c,p,t,x21,t2,d,q,t1) :- r_PathEdgeZ(d,q,t,t1,t2), NonForkPHcs(c,p,d,q), PathEdgeZ(c,p,t,x21,t2), t1=t2.

### SummEdgeZ(c,p,t,t1,t2) :- NonForkPTcs(c,p,d,q), PathEdgeZ(d,q,t,t1,t2).
# TRANS - t_NonForkPTcs_SummEdgeZ NonForkPTcs SummEdgeZ 0,1,2,3 0,1,4,5,6
t_NonForkPTcs_SummEdgeZ(c:C,p:P,d:C,q:P,t:D,t1:D,t2:D) output
t_NonForkPTcs_SummEdgeZ(c,p,d,q,t,t1,t2) :- r_SummEdgeZ(c,p,t,t1,t2), NonForkPTcs(c,p,d,q), PathEdgeZ(d,q,t,t1,t2).
# TRANS - t_PathEdgeZ_SummEdgeZ PathEdgeZ SummEdgeZ 0,1,2,3,4 5,6,2,3,4
t_PathEdgeZ_SummEdgeZ(d:C,q:P,t:D,t1:D,t2:D,c:C,p:P) output
t_PathEdgeZ_SummEdgeZ(d,q,t,t1,t2,c,p) :- r_SummEdgeZ(c,p,t,t1,t2), NonForkPTcs(c,p,d,q), PathEdgeZ(d,q,t,t1,t2).

### PathEdgeZ(c,r,t,t1,t3) :- SummEdgeZ(c,p,t,t2,t3), PathEdgeZ(c,p,t,t1,t2), PP(p,r).
# TRANS - t_SummEdgeZ_PathEdgeZ SummEdgeZ PathEdgeZ 0,1,2,3,4 0,5,2,6,4
t_SummEdgeZ_PathEdgeZ(c:C,p:P,t:D,t2:D,t3:D,r:P,t1:D) output
t_SummEdgeZ_PathEdgeZ(c,p,t,t2,t3,r,t1) :- r_PathEdgeZ(c,r,t,t1,t3), SummEdgeZ(c,p,t,t2,t3), PathEdgeZ(c,p,t,t1,t2), PP(p,r).
# TRANS - t_PathEdgeZ_PathEdgeZ2 PathEdgeZ PathEdgeZ 0,1,2,3,4 0,5,2,3,6
t_PathEdgeZ_PathEdgeZ2(c:C,p:P,t:D,t1:D,t2:D,r:P,t3:D) output
t_PathEdgeZ_PathEdgeZ2(c,p,t,t1,t2,r,t3) :- r_PathEdgeZ(c,r,t,t1,t3), SummEdgeZ(c,p,t,t2,t3), PathEdgeZ(c,p,t,t1,t2), PP(p,r).

### PathEdgeZ(c,r,t,t1,t2) :- ForkPMcs(c,p,d), PathEdgeZ(c,p,t,t1,_), PP(p,r), threadDC(t2,d).
# TRANS - t_ForkPMcs_PathEdgeZ ForkPMcs PathEdgeZ 0,1,2 0,3,4,5,6
t_ForkPMcs_PathEdgeZ(c:C,p:P,d:C,r:P,t:D,t1:D,t2:D) output
t_ForkPMcs_PathEdgeZ(c,p,d,r,t,t1,t2) :- r_PathEdgeZ(c,r,t,t1,t2), ForkPMcs(c,p,d), PathEdgeZ(c,p,t,t1,_), PP(p,r), threadDC(t2,d).
# TRANS - t_PathEdgeZ_PathEdgeZ3 PathEdgeZ PathEdgeZ 0,1,2,3,4 0,5,2,3,6
t_PathEdgeZ_PathEdgeZ3(c:C,p:P,t:D,t1:D,x22:D,r:P,t2:D) output
t_PathEdgeZ_PathEdgeZ3(c,p,t,t1,x22,r,t2) :- r_PathEdgeZ(c,r,t,t1,t2), ForkPMcs(c,p,d), PathEdgeZ(c,p,t,t1,x22), PP(p,r), threadDC(t2,d).
# TRANS - t_threadDC_PathEdgeZ threadDC PathEdgeZ 0,1 2,3,4,5,0
t_threadDC_PathEdgeZ(t2:D,d:C,c:C,r:P,t:D,t1:D) output
t_threadDC_PathEdgeZ(t2,d,c,r,t,t1) :- r_PathEdgeZ(c,r,t,t1,t2), ForkPMcs(c,p,d), PathEdgeZ(c,p,t,t1,_), PP(p,r), threadDC(t2,d).

### PathEdgeZ(c,r,t,t1,t3) :- ForkPMcs(c,p,d), PathEdgeZ(c,p,t,t1,_), PP(p,r), threadDC(t2,d), PathEdgeZ(d,q,t2,0,t3), MPtail(1,q).
# TRANS - t_ForkPMcs_PathEdgeZ1 ForkPMcs PathEdgeZ 0,1,2 0,3,4,5,6
t_ForkPMcs_PathEdgeZ1(c:C,p:P,d:C,r:P,t:D,t1:D,t3:D) output
t_ForkPMcs_PathEdgeZ1(c,p,d,r,t,t1,t3) :- r_PathEdgeZ(c,r,t,t1,t3), ForkPMcs(c,p,d), PathEdgeZ(c,p,t,t1,_), PP(p,r), threadDC(t2,d), PathEdgeZ(d,q,t2,0,t3), MPtail(1,q).
# TRANS - t_PathEdgeZ_PathEdgeZ4 PathEdgeZ PathEdgeZ 0,1,2,3,4 0,5,2,3,6
t_PathEdgeZ_PathEdgeZ4(c:C,p:P,t:D,t1:D,x23:D,r:P,t3:D) output
t_PathEdgeZ_PathEdgeZ4(c,p,t,t1,x23,r,t3) :- r_PathEdgeZ(c,r,t,t1,t3), ForkPMcs(c,p,d), PathEdgeZ(c,p,t,t1,x23), PP(p,r), threadDC(t2,d), PathEdgeZ(d,q,t2,0,t3), MPtail(1,q).
# TRANS - t_threadDC_PathEdgeZ1 threadDC PathEdgeZ 0,1 2,3,4,5,6
t_threadDC_PathEdgeZ1(t2:D,d:C,c:C,r:P,t:D,t1:D,t3:D) output
t_threadDC_PathEdgeZ1(t2,d,c,r,t,t1,t3) :- r_PathEdgeZ(c,r,t,t1,t3), ForkPMcs(c,p,d), PathEdgeZ(c,p,t,t1,_), PP(p,r), threadDC(t2,d), PathEdgeZ(d,q,t2,0,t3), MPtail(1,q).
# TRANS - t_PathEdgeZ_PathEdgeZ5 PathEdgeZ PathEdgeZ 0,1,2,3,4 5,6,7,8,4
t_PathEdgeZ_PathEdgeZ5(d:C,q:P,t2:D,0:D,t3:D,c:C,r:P,t:D,t1:D) output
t_PathEdgeZ_PathEdgeZ5(d,q,t2,0,t3,c,r,t,t1) :- r_PathEdgeZ(c,r,t,t1,t3), ForkPMcs(c,p,d), PathEdgeZ(c,p,t,t1,_), PP(p,r), threadDC(t2,d), PathEdgeZ(d,q,t2,0,t3), MPtail(1,q).

### PathEdgeZ(d,h,x,y,z) :- ForkPHcs(c,p,d,h), PathEdgeZ(c,p,y,_,_), threadDC(x,d), z=y.
# TRANS - t_ForkPHcs_PathEdgeZ ForkPHcs PathEdgeZ 0,1,2,3 2,3,4,5,6
t_ForkPHcs_PathEdgeZ(c:C,p:P,d:C,h:P,x:D,y:D,z:D) output
t_ForkPHcs_PathEdgeZ(c,p,d,h,x,y,z) :- r_PathEdgeZ(d,h,x,y,z), ForkPHcs(c,p,d,h), PathEdgeZ(c,p,y,_,_), threadDC(x,d), z=y.
# TRANS - t_PathEdgeZ_PathEdgeZ6 PathEdgeZ PathEdgeZ 0,1,2,3,4 5,6,7,2,8
t_PathEdgeZ_PathEdgeZ6(c:C,p:P,y:D,x24:D,x25:D,d:C,h:P,x:D,z:D) output
t_PathEdgeZ_PathEdgeZ6(c,p,y,x24,x25,d,h,x,z) :- r_PathEdgeZ(d,h,x,y,z), ForkPHcs(c,p,d,h), PathEdgeZ(c,p,y,x24,x25), threadDC(x,d), z=y.
# TRANS - t_threadDC_PathEdgeZ2 threadDC PathEdgeZ 0,1 1,2,0,3,4
t_threadDC_PathEdgeZ2(x:D,d:C,h:P,y:D,z:D) output
t_threadDC_PathEdgeZ2(x,d,h,y,z) :- r_PathEdgeZ(d,h,x,y,z), ForkPHcs(c,p,d,h), PathEdgeZ(c,p,y,_,_), threadDC(x,d), z=y.

### PathEdgeZ(d,h,x,y,z) :- ForkPHcs(c,p,d,h), PathEdgeZ(c,p,_,_,y), threadDC(x,d), z=y.
# TRANS - t_ForkPHcs_PathEdgeZ1 ForkPHcs PathEdgeZ 0,1,2,3 2,3,4,5,6
t_ForkPHcs_PathEdgeZ1(c:C,p:P,d:C,h:P,x:D,y:D,z:D) output
t_ForkPHcs_PathEdgeZ1(c,p,d,h,x,y,z) :- r_PathEdgeZ(d,h,x,y,z), ForkPHcs(c,p,d,h), PathEdgeZ(c,p,_,_,y), threadDC(x,d), z=y.
# TRANS - t_PathEdgeZ_PathEdgeZ7 PathEdgeZ PathEdgeZ 0,1,2,3,4 5,6,7,4,8
t_PathEdgeZ_PathEdgeZ7(c:C,p:P,x26:D,x27:D,y:D,d:C,h:P,x:D,z:D) output
t_PathEdgeZ_PathEdgeZ7(c,p,x26,x27,y,d,h,x,z) :- r_PathEdgeZ(d,h,x,y,z), ForkPHcs(c,p,d,h), PathEdgeZ(c,p,x26,x27,y), threadDC(x,d), z=y.
# TRANS - t_threadDC_PathEdgeZ3 threadDC PathEdgeZ 0,1 1,2,0,3,4
t_threadDC_PathEdgeZ3(x:D,d:C,h:P,y:D,z:D) output
t_threadDC_PathEdgeZ3(x,d,h,y,z) :- r_PathEdgeZ(d,h,x,y,z), ForkPHcs(c,p,d,h), PathEdgeZ(c,p,_,_,y), threadDC(x,d), z=y.

### PathEdgeZ(e,h,x,y,z) :- ForkPHcs(c,p,d,h), PathEdgeZ(c,p,_,_,x), threadDC(x,e), threadDC(y,d), z=y.
# TRANS - t_ForkPHcs_PathEdgeZ2 ForkPHcs PathEdgeZ 0,1,2,3 4,3,5,6,7
t_ForkPHcs_PathEdgeZ2(c:C,p:P,d:C,h:P,e:C,x:D,y:D,z:D) output
t_ForkPHcs_PathEdgeZ2(c,p,d,h,e,x,y,z) :- r_PathEdgeZ(e,h,x,y,z), ForkPHcs(c,p,d,h), PathEdgeZ(c,p,_,_,x), threadDC(x,e), threadDC(y,d), z=y.
# TRANS - t_PathEdgeZ_PathEdgeZ8 PathEdgeZ PathEdgeZ 0,1,2,3,4 5,6,4,7,8
t_PathEdgeZ_PathEdgeZ8(c:C,p:P,x28:D,x29:D,x:D,e:C,h:P,y:D,z:D) output
t_PathEdgeZ_PathEdgeZ8(c,p,x28,x29,x,e,h,y,z) :- r_PathEdgeZ(e,h,x,y,z), ForkPHcs(c,p,d,h), PathEdgeZ(c,p,x28,x29,x), threadDC(x,e), threadDC(y,d), z=y.
# TRANS - t_threadDC_PathEdgeZ4 threadDC PathEdgeZ 0,1 1,2,0,3,4
t_threadDC_PathEdgeZ4(x:D,e:C,h:P,y:D,z:D) output
t_threadDC_PathEdgeZ4(x,e,h,y,z) :- r_PathEdgeZ(e,h,x,y,z), ForkPHcs(c,p,d,h), PathEdgeZ(c,p,_,_,x), threadDC(x,e), threadDC(y,d), z=y.
# TRANS - t_threadDC_PathEdgeZ5 threadDC PathEdgeZ 0,1 2,3,4,0,5
t_threadDC_PathEdgeZ5(y:D,d:C,e:C,h:P,x:D,z:D) output
t_threadDC_PathEdgeZ5(y,d,e,h,x,z) :- r_PathEdgeZ(e,h,x,y,z), ForkPHcs(c,p,d,h), PathEdgeZ(c,p,_,_,x), threadDC(x,e), threadDC(y,d), z=y.

### mhpZ(c,p,t1,t2) :- PathEdgeZ(c,p,t1,_,t2), t1!=0, t2!=0.
# TRANS - t_PathEdgeZ_mhpZ PathEdgeZ mhpZ 0,1,2,3,4 0,1,2,4
t_PathEdgeZ_mhpZ(c:C,p:P,t1:D,x30:D,t2:D) output
t_PathEdgeZ_mhpZ(c,p,t1,x30,t2) :- r_mhpZ(c,p,t1,t2), PathEdgeZ(c,p,t1,x30,t2), t1!=0, t2!=0.

### mheZ(c,e,t1,t2) :- mhpZ(c,p,t1,t2), PE(p,e).
# TRANS - t_mhpZ_mheZ mhpZ mheZ 0,1,2,3 0,4,2,3
t_mhpZ_mheZ(c:C,p:P,t1:D,t2:D,e:E) output
t_mhpZ_mheZ(c,p,t1,t2,e) :- r_mheZ(c,e,t1,t2), mhpZ(c,p,t1,t2), PE(p,e).

### parallelRaceHext(t1,c1,e1,t2,c2,e2) :- escapingRaceHext(t1,c1,e1,t2,c2,e2), mheZ(c1,e1,t1,t2), mheZ(c2,e2,t2,t1).
# TRANS - t_escapingRaceHext_parallelRaceHext escapingRaceHext parallelRaceHext 0,1,2,3,4,5 0,1,2,3,4,5
t_escapingRaceHext_parallelRaceHext(t1:D,c1:C,e1:E,t2:D,c2:C,e2:E) output
t_escapingRaceHext_parallelRaceHext(t1,c1,e1,t2,c2,e2) :- r_parallelRaceHext(t1,c1,e1,t2,c2,e2), escapingRaceHext(t1,c1,e1,t2,c2,e2), mheZ(c1,e1,t1,t2), mheZ(c2,e2,t2,t1).
# TRANS - t_mheZ_parallelRaceHext mheZ parallelRaceHext 0,1,2,3 2,0,1,3,4,5
t_mheZ_parallelRaceHext(c1:C,e1:E,t1:D,t2:D,c2:C,e2:E) output
t_mheZ_parallelRaceHext(c1,e1,t1,t2,c2,e2) :- r_parallelRaceHext(t1,c1,e1,t2,c2,e2), escapingRaceHext(t1,c1,e1,t2,c2,e2), mheZ(c1,e1,t1,t2), mheZ(c2,e2,t2,t1).
# TRANS - t_mheZ_parallelRaceHext1 mheZ parallelRaceHext 0,1,2,3 3,4,5,2,0,1
t_mheZ_parallelRaceHext1(c2:C,e2:E,t2:D,t1:D,c1:C,e1:E) output
t_mheZ_parallelRaceHext1(c2,e2,t2,t1,c1,e1) :- r_parallelRaceHext(t1,c1,e1,t2,c2,e2), escapingRaceHext(t1,c1,e1,t2,c2,e2), mheZ(c1,e1,t1,t2), mheZ(c2,e2,t2,t1).

### outQueryEE(e1,e2) :- parallelRaceHext(_,_,e1,_,_,e2).
# TRANS - t_parallelRaceHext_outQueryEE parallelRaceHext outQueryEE 0,1,2,3,4,5 2,5
t_parallelRaceHext_outQueryEE(x31:D,x32:C,e1:E,x33:D,x34:C,e2:E) output
t_parallelRaceHext_outQueryEE(x31,x32,e1,x33,x34,e2) :- r_outQueryEE(e1,e2), parallelRaceHext(x31,x32,e1,x33,x34,e2).
