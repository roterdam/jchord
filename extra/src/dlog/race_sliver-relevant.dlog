### WARNING: do not edit this file directly since it is automatically generated and can be overwritten at any point.
.include "C.dom"
.include "E.dom"
.include "F.dom"
.include "H.dom"
.include "I.dom"
.include "M.dom"
.include "T.dom"
.include "V.dom"
.include "Z.dom"
.include "A.dom"
.bddvarorder F0_A0xA1xA2xA3xA4_P0xP1_I0xI1xM0xM1_T0_V0xV1_T1_H0xH1_C0xC1xC2xC3_Z0_E0xE1
HT(h:H0,t:T1) input
sub(t1:T1,t2:T0) input
MI(m:M,i:I) input
MH(m:M,h:H) input
MV(m:M,v:V) input
statIM(i:I,m:M) input
classT(t:T) input
staticTM(t:T,m:M) input
staticTF(t:T,f:F) input
clinitTM(t:T,m:M) input
IinvkArg(i:I0,n:Z0,v:V1) input
MmethArg(m:M0,n:Z0,v:V0) input
VHfilter(v:V,h:H) input
MobjValAsgnInst(m:M,l:V,h:H)     input
MobjVarAsgnInst(m:M,l:V,r:V)     input
MgetInstFldInst(m:M,l:V,b:V,f:F) input
MputInstFldInst(m:M,b:V,f:F,r:V) input
MgetStatFldInst(m:M,l:V,f:F)     input
MputStatFldInst(m:M,f:F,r:V)     input
IM(i:I,m:M) input
argIVMV(i:I0,u:V1,m:M0,v:V0) input
retIVMV(i:I0,u:V0,m:M0,v:V1) input
reachableT(t:T) input
CfromHC(cm:C,h:H,c:C) input
r_CfromHC(cm:C,h:H,c:C) output # track
CfromIC(cm:C,i:I,c:C) input
r_CfromIC(cm:C,i:I,c:C) output # track
HfromC(h:H,c:C) input
objI(i:I) input
inQuery(e1:E,e2:E) input
reachableCI(c:C,i:I) input
r_reachableCI(c:C,i:I) output # track
reachableCM(c:C,m:M) input
r_reachableCM(c:C,m:M) output # track
VCfromVC(v1:V0,e1:C0,v2:V1,e2:C1) input
r_VCfromVC(v1:V,e1:C,v2:V,e2:C) output # track
CICM(ci:C,i:I,cm:C,m:M) input
r_CICM(ci:C,i:I,cm:C,m:M) output # track
VAfilter(v:V,a:C) input
r_VAfilter(v:V,a:C) output # track
VCA(v:V,e:C,a:C) input
r_VCA(v:V,e:C,a:C) output # track
FA(f:F,a:C) input
r_FA(f:F,a:C) output # track
AFA(a1:C,f:F,a2:C) input
r_AFA(a1:C,f:F,a2:C) output # track

### VAfilter(v,a) :- VHfilter(v,h), HfromC(h,a).

### reachableCM(0,m) :- clinitTM(t,m), reachableT(t).

### reachableCM(cm,m) :- CICM(_,_,cm,m).
r_CICM(x6,x7,cm,m) :- r_reachableCM(cm,m), CICM(x6,x7,cm,m).

### reachableCI(c,i) :- reachableCM(c,m), MI(m,i).
r_reachableCM(c,m) :- r_reachableCI(c,i), reachableCM(c,m), MI(m,i).

### CICM(ci,i,cm,m) :- !objI(i), reachableCI(ci,i), IM(i,m), CfromIC(cm,i,ci).
r_reachableCI(ci,i) :- r_CICM(ci,i,cm,m), !objI(i), reachableCI(ci,i), IM(i,m), CfromIC(cm,i,ci).
r_CfromIC(cm,i,ci) :- r_CICM(ci,i,cm,m), !objI(i), reachableCI(ci,i), IM(i,m), CfromIC(cm,i,ci).

### CICM(ci,i,cm,m) :- objI(i), reachableCI(ci,i), IM(i,m), !statIM(i,m), IinvkArg(i,0,v), VCA(v,ci,cm).
r_reachableCI(ci,i) :- r_CICM(ci,i,cm,m), objI(i), reachableCI(ci,i), IM(i,m), !statIM(i,m), IinvkArg(i,0,v), VCA(v,ci,cm).
r_VCA(v,ci,cm) :- r_CICM(ci,i,cm,m), objI(i), reachableCI(ci,i), IM(i,m), !statIM(i,m), IinvkArg(i,0,v), VCA(v,ci,cm).

### CICM(ci,i,cm,m) :- objI(i), reachableCI(ci,i), statIM(i,m), ci=cm.
r_reachableCI(ci,i) :- r_CICM(ci,i,cm,m), objI(i), reachableCI(ci,i), statIM(i,m), ci=cm.

### VCfromVC(vm,cm,vi,ci) :- argIVMV(i,vi,m,vm), CICM(ci,i,cm,m).
r_CICM(ci,i,cm,m) :- r_VCfromVC(vm,cm,vi,ci), argIVMV(i,vi,m,vm), CICM(ci,i,cm,m).

### VCfromVC(vi,ci,vm,cm) :- retIVMV(i,vi,m,vm), CICM(ci,i,cm,m).
r_CICM(ci,i,cm,m) :- r_VCfromVC(vi,ci,vm,cm), retIVMV(i,vi,m,vm), CICM(ci,i,cm,m).

### VCA(v,c,a) :- VCfromVC(v,c,vv,cc), VCA(vv,cc,a), VAfilter(v,a).
r_VCfromVC(v,c,vv,cc) :- r_VCA(v,c,a), VCfromVC(v,c,vv,cc), VCA(vv,cc,a), VAfilter(v,a).
r_VCA(vv,cc,a) :- r_VCA(v,c,a), VCfromVC(v,c,vv,cc), VCA(vv,cc,a), VAfilter(v,a).
r_VAfilter(v,a) :- r_VCA(v,c,a), VCfromVC(v,c,vv,cc), VCA(vv,cc,a), VAfilter(v,a).

### VCA(l,c,a) :- reachableCM(c,m), MobjValAsgnInst(m,l,h), CfromHC(a,h,c).
r_reachableCM(c,m) :- r_VCA(l,c,a), reachableCM(c,m), MobjValAsgnInst(m,l,h), CfromHC(a,h,c).
r_CfromHC(a,h,c) :- r_VCA(l,c,a), reachableCM(c,m), MobjValAsgnInst(m,l,h), CfromHC(a,h,c).

### VCA(l,c,a) :- reachableCM(c,m), MobjVarAsgnInst(m,l,r), VCA(r,c,a), VAfilter(l,a).
r_reachableCM(c,m) :- r_VCA(l,c,a), reachableCM(c,m), MobjVarAsgnInst(m,l,r), VCA(r,c,a), VAfilter(l,a).
r_VCA(r,c,a) :- r_VCA(l,c,a), reachableCM(c,m), MobjVarAsgnInst(m,l,r), VCA(r,c,a), VAfilter(l,a).
r_VAfilter(l,a) :- r_VCA(l,c,a), reachableCM(c,m), MobjVarAsgnInst(m,l,r), VCA(r,c,a), VAfilter(l,a).

### VCA(l,c,aa) :- reachableCM(c,m), MgetInstFldInst(m,l,b,f), VCA(b,c,a), AFA(a,f,aa).
r_reachableCM(c,m) :- r_VCA(l,c,aa), reachableCM(c,m), MgetInstFldInst(m,l,b,f), VCA(b,c,a), AFA(a,f,aa).
r_VCA(b,c,a) :- r_VCA(l,c,aa), reachableCM(c,m), MgetInstFldInst(m,l,b,f), VCA(b,c,a), AFA(a,f,aa).
r_AFA(a,f,aa) :- r_VCA(l,c,aa), reachableCM(c,m), MgetInstFldInst(m,l,b,f), VCA(b,c,a), AFA(a,f,aa).

### VCA(l,c,a) :- reachableCM(c,m), MgetStatFldInst(m,l,f), FA(f,a).
r_reachableCM(c,m) :- r_VCA(l,c,a), reachableCM(c,m), MgetStatFldInst(m,l,f), FA(f,a).
r_FA(f,a) :- r_VCA(l,c,a), reachableCM(c,m), MgetStatFldInst(m,l,f), FA(f,a).

### AFA(a,f,aa) :- reachableCM(c,m), MputInstFldInst(m,b,f,r), VCA(b,c,a), VCA(r,c,aa).
r_reachableCM(c,m) :- r_AFA(a,f,aa), reachableCM(c,m), MputInstFldInst(m,b,f,r), VCA(b,c,a), VCA(r,c,aa).
r_VCA(b,c,a) :- r_AFA(a,f,aa), reachableCM(c,m), MputInstFldInst(m,b,f,r), VCA(b,c,a), VCA(r,c,aa).
r_VCA(r,c,aa) :- r_AFA(a,f,aa), reachableCM(c,m), MputInstFldInst(m,b,f,r), VCA(b,c,a), VCA(r,c,aa).

### FA(f,a) :- reachableCM(c,m), MputStatFldInst(m,f,r), VCA(r,c,a).
r_reachableCM(c,m) :- r_FA(f,a), reachableCM(c,m), MputStatFldInst(m,f,r), VCA(r,c,a).
r_VCA(r,c,a) :- r_FA(f,a), reachableCM(c,m), MputStatFldInst(m,f,r), VCA(r,c,a).
# name=race-sliver-relevant-dlog
ME(m:M0,e:E0) input
statF(f:F0) input
EF(e:E0,f:F0) input
EV(e:E0,v:V0) input
PE(p:P0,e:E0) input
PP(p:P0,q:P1) input
MPhead(m:M0,p:P0) input
MPtail(m:M0,p:P0) input
PI(p:P0,i:I0) input
threadAOCM(t:A,o:C,c:C,m:M) input
escA(a:C) input
r_escA(a:C) output # track
thrSenAbbrRootCM(c:C0,m:M0) input
r_thrSenAbbrRootCM(c:C,m:M) output # track
thrSenAbbrReachableCM(c:C0,m:M0)  input
r_thrSenAbbrReachableCM(c:C,m:M) output # track
thrSenAbbrCICM(c:C0,i:I0,d:C1,m:M0)  input
r_thrSenAbbrCICM(c:C,i:I,d:C,m:M) output # track
reachableTCM(t:A0,c:C0,m:M0) input
r_reachableTCM(t:A,c:C,m:M) output # track
reachableTCE(t:A0,c:C0,e:E0) input
r_reachableTCE(t:A,c:C,e:E) output # track
startingRaceHext(t1:A0,c1:C0,e1:E0,t2:A1,c2:C1,e2:E1) input
r_startingRaceHext(t1:A,c1:C,e1:E,t2:A,c2:C,e2:E) output # track
statE(e:E0) input
r_statE(e:E) output # track
CEC(c:C0,e:E0,o:C1) input
r_CEC(c:C,e:E,o:C) output # track
escapingRaceHext(t1:A0,c1:C0,e1:E0,t2:A1,c2:C1,e2:E1) input
r_escapingRaceHext(t1:A,c1:C,e1:E,t2:A,c2:C,e2:E) output # track
threadAC(t:A,c:C) input
r_threadAC(t:A,c:C) output # track
ForkPMcs(caller:C,p1:P,callee:C)  input
r_ForkPMcs(caller:C,p1:P,callee:C) output # track
ForkPHcs(caller:C,p1:P,callee:C,p2:P)  input
r_ForkPHcs(caller:C,p1:P,callee:C,p2:P) output # track
NonForkPMcs(caller:C,p1:P,callee:C,m2:M) input
r_NonForkPMcs(caller:C,p1:P,callee:C,m2:M) output # track
NonForkPHcs(caller:C,p1:P,callee:C,p2:P) input
r_NonForkPHcs(caller:C,p1:P,callee:C,p2:P) output # track
NonForkPTcs(caller:C,p1:P,callee:C,p2:P) input
r_NonForkPTcs(caller:C,p1:P,callee:C,p2:P) output # track
PathEdge(c:C,p:P,this:A,sThat:A,tThat:A)  input
r_PathEdge(c:C,p:P,this:A,sThat:A,tThat:A) output # track
SummEdge(c:C,p:P,this:A,sThat:A,tThat:A) input
r_SummEdge(c:C,p:P,this:A,sThat:A,tThat:A) output # track
mhp(c:C0,p:P0,t1:A0,t2:A1) input
r_mhp(c:C,p:P,t1:A,t2:A) output # track
mhe(c:C0,e:E0,t1:A0,t2:A1) input
r_mhe(c:C,e:E,t1:A,t2:A) output # track
parallelRaceHext(t1:A0,c1:C0,e1:E0,t2:A1,c2:C1,e2:E1) input
r_parallelRaceHext(t1:A,c1:C,e1:E,t2:A,c2:C,e2:E) output # track
outQuery(e1:E0,e2:E1) input
r_outQuery(e1:E,e2:E) output # track
threadOC(o:C0,c:C1) input

### escA(a) :- FA(_,a).
r_FA(x8,a) :- r_escA(a), FA(x8,a).

### escA(a) :- reachableCM(c,1), MmethArg(1,0,v), VCA(v,c,a).
r_reachableCM(c,1) :- r_escA(a), reachableCM(c,1), MmethArg(1,0,v), VCA(v,c,a).
r_VCA(v,c,a) :- r_escA(a), reachableCM(c,1), MmethArg(1,0,v), VCA(v,c,a).

### escA(a) :- escA(b), AFA(b,_,a).
r_escA(b) :- r_escA(a), escA(b), AFA(b,_,a).
r_AFA(b,x9,a) :- r_escA(a), escA(b), AFA(b,x9,a).

### thrSenAbbrRootCM(d,1) :- thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,1).
r_thrSenAbbrReachableCM(c,m) :- r_thrSenAbbrRootCM(d,1), thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,1).
r_CICM(c,i,d,1) :- r_thrSenAbbrRootCM(d,1), thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,1).

### thrSenAbbrReachableCM(c,m) :- thrSenAbbrRootCM(c,m).
r_thrSenAbbrRootCM(c,m) :- r_thrSenAbbrReachableCM(c,m), thrSenAbbrRootCM(c,m).

### thrSenAbbrReachableCM(d,n) :- thrSenAbbrCICM(_,_,d,n).
r_thrSenAbbrCICM(x10,x11,d,n) :- r_thrSenAbbrReachableCM(d,n), thrSenAbbrCICM(x10,x11,d,n).

### thrSenAbbrCICM(c,i,d,n) :- thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,n), !=(n,1).
r_thrSenAbbrReachableCM(c,m) :- r_thrSenAbbrCICM(c,i,d,n), thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,n), !=(n,1).
r_CICM(c,i,d,n) :- r_thrSenAbbrCICM(c,i,d,n), thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,n), !=(n,1).

### reachableTCM(t,c,m) :- threadAOCM(t,_,c,m).

### reachableTCM(t,d,n) :- reachableTCM(t,c,m), MI(m,i), thrSenAbbrCICM(c,i,d,n).
r_reachableTCM(t,c,m) :- r_reachableTCM(t,d,n), reachableTCM(t,c,m), MI(m,i), thrSenAbbrCICM(c,i,d,n).
r_thrSenAbbrCICM(c,i,d,n) :- r_reachableTCM(t,d,n), reachableTCM(t,c,m), MI(m,i), thrSenAbbrCICM(c,i,d,n).

### reachableTCE(t,c,e) :- reachableTCM(t,c,m), ME(m,e).
r_reachableTCM(t,c,m) :- r_reachableTCE(t,c,e), reachableTCM(t,c,m), ME(m,e).

### startingRaceHext(t1,c1,e1,t2,c2,e2) :- inQuery(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2).
r_reachableTCE(t1,c1,e1) :- r_startingRaceHext(t1,c1,e1,t2,c2,e2), inQuery(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2).
r_reachableTCE(t2,c2,e2) :- r_startingRaceHext(t1,c1,e1,t2,c2,e2), inQuery(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2).

### startingRaceHext(t1,c1,e1,t2,c2,e2) :- query(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, <(c1,c2).
r_reachableTCE(t1,c1,e1) :- r_startingRaceHext(t1,c1,e1,t2,c2,e2), query(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, <(c1,c2).
r_reachableTCE(t2,c2,e2) :- r_startingRaceHext(t1,c1,e1,t2,c2,e2), query(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, <(c1,c2).

### startingRaceHext(t1,c1,e1,t2,c2,e2) :- query(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, c1=c2, <=(t1,t2).
r_reachableTCE(t1,c1,e1) :- r_startingRaceHext(t1,c1,e1,t2,c2,e2), query(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, c1=c2, <=(t1,t2).
r_reachableTCE(t2,c2,e2) :- r_startingRaceHext(t1,c1,e1,t2,c2,e2), query(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, c1=c2, <=(t1,t2).

### statE(e) :- EF(e,f), statF(f).

### CEC(c,e,o) :- EV(e,v), VCA(v,c,o), escO(o).
r_VCA(v,c,o) :- r_CEC(c,e,o), EV(e,v), VCA(v,c,o), escO(o).

### escapingRaceHext(t1,c1,e1,t2,c2,e2) :- startingRaceHext(t1,c1,e1,t2,c2,e2), CEC(c1,e1,o), CEC(c2,e2,o).
r_startingRaceHext(t1,c1,e1,t2,c2,e2) :- r_escapingRaceHext(t1,c1,e1,t2,c2,e2), startingRaceHext(t1,c1,e1,t2,c2,e2), CEC(c1,e1,o), CEC(c2,e2,o).
r_CEC(c1,e1,o) :- r_escapingRaceHext(t1,c1,e1,t2,c2,e2), startingRaceHext(t1,c1,e1,t2,c2,e2), CEC(c1,e1,o), CEC(c2,e2,o).
r_CEC(c2,e2,o) :- r_escapingRaceHext(t1,c1,e1,t2,c2,e2), startingRaceHext(t1,c1,e1,t2,c2,e2), CEC(c1,e1,o), CEC(c2,e2,o).

### escapingRaceHext(t1,c1,e1,t2,c2,e2) :- startingRaceHext(t1,c1,e1,t2,c2,e2), statE(e1), statE(e2).
r_startingRaceHext(t1,c1,e1,t2,c2,e2) :- r_escapingRaceHext(t1,c1,e1,t2,c2,e2), startingRaceHext(t1,c1,e1,t2,c2,e2), statE(e1), statE(e2).
r_statE(e1) :- r_escapingRaceHext(t1,c1,e1,t2,c2,e2), startingRaceHext(t1,c1,e1,t2,c2,e2), statE(e1), statE(e2).
r_statE(e2) :- r_escapingRaceHext(t1,c1,e1,t2,c2,e2), startingRaceHext(t1,c1,e1,t2,c2,e2), statE(e1), statE(e2).

### NonForkPMcs(c,p,d,m) :- CICM(c,i,d,m), !=(m,1), PI(p,i).
r_CICM(c,i,d,m) :- r_NonForkPMcs(c,p,d,m), CICM(c,i,d,m), !=(m,1), PI(p,i).

### NonForkPHcs(c,p,d,h) :- NonForkPMcs(c,p,d,m), MPhead(m,h).
r_NonForkPMcs(c,p,d,m) :- r_NonForkPHcs(c,p,d,h), NonForkPMcs(c,p,d,m), MPhead(m,h).

### NonForkPTcs(c,p,d,t) :- NonForkPMcs(c,p,d,m), MPtail(m,t).
r_NonForkPMcs(c,p,d,m) :- r_NonForkPTcs(c,p,d,t), NonForkPMcs(c,p,d,m), MPtail(m,t).

### ForkPMcs(c,p,d) :- CICM(c,i,d,1), PI(p,i).
r_CICM(c,i,d,1) :- r_ForkPMcs(c,p,d), CICM(c,i,d,1), PI(p,i).

### ForkPHcs(c,p,d,h) :- ForkPMcs(c,p,d), MPhead(1,h).
r_ForkPMcs(c,p,d) :- r_ForkPHcs(c,p,d,h), ForkPMcs(c,p,d), MPhead(1,h).

### threadAC(t,c) :- threadAOCM(t,_,c,1).

### PathEdge(c,q,t,t1,t2) :- PathEdge(c,p,t,t1,t2), PP(p,q).
r_PathEdge(c,p,t,t1,t2) :- r_PathEdge(c,q,t,t1,t2), PathEdge(c,p,t,t1,t2), PP(p,q).

### PathEdge(d,q,t,t1,t2) :- NonForkPHcs(c,p,d,q), PathEdge(c,p,t,_,t2), t1=t2.
r_NonForkPHcs(c,p,d,q) :- r_PathEdge(d,q,t,t1,t2), NonForkPHcs(c,p,d,q), PathEdge(c,p,t,_,t2), t1=t2.
r_PathEdge(c,p,t,x14,t2) :- r_PathEdge(d,q,t,t1,t2), NonForkPHcs(c,p,d,q), PathEdge(c,p,t,x14,t2), t1=t2.

### SummEdge(c,p,t,t1,t2) :- NonForkPTcs(c,p,d,q), PathEdge(d,q,t,t1,t2).
r_NonForkPTcs(c,p,d,q) :- r_SummEdge(c,p,t,t1,t2), NonForkPTcs(c,p,d,q), PathEdge(d,q,t,t1,t2).
r_PathEdge(d,q,t,t1,t2) :- r_SummEdge(c,p,t,t1,t2), NonForkPTcs(c,p,d,q), PathEdge(d,q,t,t1,t2).

### PathEdge(c,r,t,t1,t3) :- SummEdge(c,p,t,t2,t3), PathEdge(c,p,t,t1,t2), PP(p,r).
r_SummEdge(c,p,t,t2,t3) :- r_PathEdge(c,r,t,t1,t3), SummEdge(c,p,t,t2,t3), PathEdge(c,p,t,t1,t2), PP(p,r).
r_PathEdge(c,p,t,t1,t2) :- r_PathEdge(c,r,t,t1,t3), SummEdge(c,p,t,t2,t3), PathEdge(c,p,t,t1,t2), PP(p,r).

### PathEdge(c,r,t,t1,t2) :- ForkPMcs(c,p,d), PathEdge(c,p,t,t1,_), PP(p,r), threadAC(t2,d).
r_ForkPMcs(c,p,d) :- r_PathEdge(c,r,t,t1,t2), ForkPMcs(c,p,d), PathEdge(c,p,t,t1,_), PP(p,r), threadAC(t2,d).
r_PathEdge(c,p,t,t1,x15) :- r_PathEdge(c,r,t,t1,t2), ForkPMcs(c,p,d), PathEdge(c,p,t,t1,x15), PP(p,r), threadAC(t2,d).
r_threadAC(t2,d) :- r_PathEdge(c,r,t,t1,t2), ForkPMcs(c,p,d), PathEdge(c,p,t,t1,_), PP(p,r), threadAC(t2,d).

### PathEdge(c,r,t,t1,t3) :- ForkPMcs(c,p,d), PathEdge(c,p,t,t1,_), PP(p,r), threadAC(t2,d), PathEdge(d,q,t2,0,t3), MPtail(1,q).
r_ForkPMcs(c,p,d) :- r_PathEdge(c,r,t,t1,t3), ForkPMcs(c,p,d), PathEdge(c,p,t,t1,_), PP(p,r), threadAC(t2,d), PathEdge(d,q,t2,0,t3), MPtail(1,q).
r_PathEdge(c,p,t,t1,x16) :- r_PathEdge(c,r,t,t1,t3), ForkPMcs(c,p,d), PathEdge(c,p,t,t1,x16), PP(p,r), threadAC(t2,d), PathEdge(d,q,t2,0,t3), MPtail(1,q).
r_threadAC(t2,d) :- r_PathEdge(c,r,t,t1,t3), ForkPMcs(c,p,d), PathEdge(c,p,t,t1,_), PP(p,r), threadAC(t2,d), PathEdge(d,q,t2,0,t3), MPtail(1,q).
r_PathEdge(d,q,t2,0,t3) :- r_PathEdge(c,r,t,t1,t3), ForkPMcs(c,p,d), PathEdge(c,p,t,t1,_), PP(p,r), threadAC(t2,d), PathEdge(d,q,t2,0,t3), MPtail(1,q).

### PathEdge(d,h,x,y,z) :- ForkPHcs(c,p,d,h), PathEdge(c,p,y,_,_), threadAC(x,d), z=y.
r_ForkPHcs(c,p,d,h) :- r_PathEdge(d,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,y,_,_), threadAC(x,d), z=y.
r_PathEdge(c,p,y,x17,x18) :- r_PathEdge(d,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,y,x17,x18), threadAC(x,d), z=y.
r_threadAC(x,d) :- r_PathEdge(d,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,y,_,_), threadAC(x,d), z=y.

### PathEdge(d,h,x,y,z) :- ForkPHcs(c,p,d,h), PathEdge(c,p,_,_,y), threadAC(x,d), z=y.
r_ForkPHcs(c,p,d,h) :- r_PathEdge(d,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,_,_,y), threadAC(x,d), z=y.
r_PathEdge(c,p,x19,x20,y) :- r_PathEdge(d,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,x19,x20,y), threadAC(x,d), z=y.
r_threadAC(x,d) :- r_PathEdge(d,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,_,_,y), threadAC(x,d), z=y.

### PathEdge(e,h,x,y,z) :- ForkPHcs(c,p,d,h), PathEdge(c,p,_,_,x), threadAC(x,e), threadAC(y,d), z=y.
r_ForkPHcs(c,p,d,h) :- r_PathEdge(e,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,_,_,x), threadAC(x,e), threadAC(y,d), z=y.
r_PathEdge(c,p,x21,x22,x) :- r_PathEdge(e,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,x21,x22,x), threadAC(x,e), threadAC(y,d), z=y.
r_threadAC(x,e) :- r_PathEdge(e,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,_,_,x), threadAC(x,e), threadAC(y,d), z=y.
r_threadAC(y,d) :- r_PathEdge(e,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,_,_,x), threadAC(x,e), threadAC(y,d), z=y.

### mhp(c,p,t1,t2) :- PathEdge(c,p,t1,_,t2), !=(t1,0), !=(t2,0).
r_PathEdge(c,p,t1,x23,t2) :- r_mhp(c,p,t1,t2), PathEdge(c,p,t1,x23,t2), !=(t1,0), !=(t2,0).

### mhe(c,e,t1,t2) :- mhp(c,p,t1,t2), PE(p,e).
r_mhp(c,p,t1,t2) :- r_mhe(c,e,t1,t2), mhp(c,p,t1,t2), PE(p,e).

### parallelRaceHext(t1,c1,e1,t2,c2,e2) :- escapingRaceHext(t1,c1,e1,t2,c2,e2), mhe(c1,e1,t1,t2), mhe(c2,e2,t2,t1).
r_escapingRaceHext(t1,c1,e1,t2,c2,e2) :- r_parallelRaceHext(t1,c1,e1,t2,c2,e2), escapingRaceHext(t1,c1,e1,t2,c2,e2), mhe(c1,e1,t1,t2), mhe(c2,e2,t2,t1).
r_mhe(c1,e1,t1,t2) :- r_parallelRaceHext(t1,c1,e1,t2,c2,e2), escapingRaceHext(t1,c1,e1,t2,c2,e2), mhe(c1,e1,t1,t2), mhe(c2,e2,t2,t1).
r_mhe(c2,e2,t2,t1) :- r_parallelRaceHext(t1,c1,e1,t2,c2,e2), escapingRaceHext(t1,c1,e1,t2,c2,e2), mhe(c1,e1,t1,t2), mhe(c2,e2,t2,t1).

### outQuery(e1,e2) :- parallelRaceHext(_,_,e1,_,_,e2).
r_parallelRaceHext(x24,x25,e1,x26,x27,e2) :- r_outQuery(e1,e2), parallelRaceHext(x24,x25,e1,x26,x27,e2).

### Base case
r_outQuery(e1:E,e2:E) :- outQuery(e1:E,e2:E).
