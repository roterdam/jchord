# name=race-sliver-dlog

.include "E.dom"
.include "F.dom"
.include "M.dom"
.include "V.dom"
.include "A.dom"
.include "C.dom"
.include "P.dom"
.include "I.dom"

.bddvarorder F0_A0xA1xA2_I0xI1xM0xM1xP0xP1_V0xV1_C0xC1xC2xC3_E0xE1

###
# Relations
###

# relations capturing basic program facts
ME(m:M0,e:E0) input
MI(m:M0,i:I0) input
statF(f:F0) input
EF(e:E0,f:F0) input
EV(e:E0,v:V0) input
PE(p:P0,e:E0) input
PP(p:P0,q:P1) input
MPhead(m:M0,p:P0) input
MPtail(m:M0,p:P0) input
PI(p:P0,i:I0) input

# all race queries (from race_sliver-init.dlog)
query(e1:E0,e2:E1) input

# relations computed by may-alias/thread-escape/call-graph analyses
CVC(c:C0,v:V0,o:C1) input
CICM(c:C,i:I,d:C,m:M) input
escO(o:C0) input
threadAOCM(t:A,o:C,c:C,m:M) input

# relations needed to compute startingRaceHext
thrSenAbbrRootCM(c:C0,m:M0)
thrSenAbbrReachableCM(c:C0,m:M0) 
thrSenAbbrCICM(c:C0,i:I0,d:C1,m:M0) 
reachableTCM(t:A0,c:C0,m:M0)
reachableTCE(t:A0,c:C0,e:E0)
startingRaceHext(t1:A0,c1:C0,e1:E0,t2:A1,c2:C1,e2:E1)

# relations needed to compute escapingRaceHext
statE(e:E0)
CEC(c:C0,e:E0,o:C1) 
escapingRaceHext(t1:A0,c1:C0,e1:E0,t2:A1,c2:C1,e2:E1)

# relations needed to compute parallelRaceHext
threadAC(t:A,c:C)
ForkPMcs(caller:C,p1:P,callee:C) 
ForkPHcs(caller:C,p1:P,callee:C,p2:P) 
NonForkPMcs(caller:C,p1:P,callee:C,m2:M)
NonForkPHcs(caller:C,p1:P,callee:C,p2:P)
NonForkPTcs(caller:C,p1:P,callee:C,p2:P)
PathEdge(c:C,p:P,this:A,sThat:A,tThat:A) 
SummEdge(c:C,p:P,this:A,sThat:A,tThat:A)
mhp(c:C0,p:P0,t1:A0,t2:A1)
mhe(c:C0,e:E0,t1:A0,t2:A1)
parallelRaceHext(t1:A0,c1:C0,e1:E0,t2:A1,c2:C1,e2:E1)

# final race queries 
outQuery(e1:E0,e2:E1) output

###
# Constraints
###

thrSenAbbrRootCM(0,0).
thrSenAbbrRootCM(d,1) :- thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,1).
thrSenAbbrReachableCM(c,m) :- thrSenAbbrRootCM(c,m).
thrSenAbbrReachableCM(d,n) :- thrSenAbbrCICM(_,_,d,n).
thrSenAbbrCICM(c,i,d,n) :- thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,n), n!=1.

reachableTCM(t,c,m) :- threadAOCM(t,_,c,m).
reachableTCM(t,d,n) :- reachableTCM(t,c,m), MI(m,i), thrSenAbbrCICM(c,i,d,n).
reachableTCE(t,c,e) :- reachableTCM(t,c,m), ME(m,e).

startingRaceHext(t1,c1,e1,t2,c2,e2) :- query(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2).
startingRaceHext(t1,c1,e1,t2,c2,e2) :- query(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, c1 < c2.
startingRaceHext(t1,c1,e1,t2,c2,e2) :- query(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, c1 = c2, t1 <= t2.

###

statE(e) :- EF(e,f), statF(f).
CEC(c,e,o) :- EV(e,v), CVC(c,v,o), escO(o).

escapingRaceHext(t1,c1,e1,t2,c2,e2) :- startingRaceHext(t1,c1,e1,t2,c2,e2), CEC(c1,e1,o), CEC(c2,e2,o).
escapingRaceHext(t1,c1,e1,t2,c2,e2) :- startingRaceHext(t1,c1,e1,t2,c2,e2), statE(e1), statE(e2).

###

NonForkPMcs(c,p,d,m) :- CICM(c,i,d,m), m!=1, PI(p,i).
NonForkPHcs(c,p,d,h) :- NonForkPMcs(c,p,d,m), MPhead(m,h).
NonForkPTcs(c,p,d,t) :- NonForkPMcs(c,p,d,m), MPtail(m,t).
ForkPMcs(c,p,d) :- CICM(c,i,d,1), PI(p,i).
ForkPHcs(c,p,d,h) :- ForkPMcs(c,p,d), MPhead(1,h).
threadAC(t,c) :- threadAOCM(t,_,c,1).

PathEdge(0,0,1,0,0).
PathEdge(c,q,t,t1,t2) :- PathEdge(c,p,t,t1,t2), PP(p,q).
PathEdge(d,q,t,t1,t2) :- NonForkPHcs(c,p,d,q) , PathEdge(c,p,t,_ ,t2), t1=t2.
SummEdge(c,p,t,t1,t2) :- NonForkPTcs(c,p,d,q) , PathEdge(d,q,t,t1,t2).
PathEdge(c,r,t,t1,t3) :- SummEdge(c,p,t,t2,t3), PathEdge(c,p,t,t1,t2), PP(p,r).
PathEdge(c,r,t,t1,t2) :- ForkPMcs(c,p,d), PathEdge(c,p,t,t1,_), PP(p,r), threadAC(t2,d).
PathEdge(c,r,t,t1,t3) :- ForkPMcs(c,p,d), PathEdge(c,p,t,t1,_), PP(p,r), threadAC(t2,d), PathEdge(d,q,t2,0,t3), MPtail(1,q).
PathEdge(d,h,x,y,z) :- ForkPHcs(c,p,d,h), PathEdge(c,p,y,_,_), threadAC(x,d), z=y. split
PathEdge(d,h,x,y,z) :- ForkPHcs(c,p,d,h), PathEdge(c,p,_,_,y), threadAC(x,d), z=y. split
PathEdge(e,h,x,y,z) :- ForkPHcs(c,p,d,h), PathEdge(c,p,_,_,x), threadAC(x,e), threadAC(y,d), z=y. split

mhp(c,p,t1,t2) :- PathEdge(c,p,t1,_,t2), t1!=0, t2!=0.
mhe(c,e,t1,t2) :- mhp(c,p,t1,t2), PE(p,e).

parallelRaceHext(t1,c1,e1,t2,c2,e2) :- escapingRaceHext(t1,c1,e1,t2,c2,e2), mhe(c1,e1,t1,t2), mhe(c2,e2,t2,t1).

###

outQuery(e1,e2) :- parallelRaceHext(_,_,e1,_,_,e2).
