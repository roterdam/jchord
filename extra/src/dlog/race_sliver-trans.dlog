### WARNING: do not edit this file directly since it is automatically generated and can be overwritten at any point.
.include "C.dom"
.include "E.dom"
.include "F.dom"
.include "H.dom"
.include "I.dom"
.include "M.dom"
.include "T.dom"
.include "V.dom"
.include "Z.dom"
.include "A.dom"
.bddvarorder F0_A0xA1xA2xA3xA4_P0xP1_I0xI1xM0xM1_T0_V0xV1_T1_H0xH1_C0xC1xC2xC3_Z0_E0xE1
HT(h:H0,t:T1) input
sub(t1:T1,t2:T0) input
MI(m:M,i:I) input
MH(m:M,h:H) input
MV(m:M,v:V) input
statIM(i:I,m:M) input
classT(t:T) input
staticTM(t:T,m:M) input
staticTF(t:T,f:F) input
clinitTM(t:T,m:M) input
IinvkArg(i:I0,n:Z0,v:V1) input
MmethArg(m:M0,n:Z0,v:V0) input
VHfilter(v:V,h:H) input
MobjValAsgnInst(m:M,l:V,h:H)     input
MobjVarAsgnInst(m:M,l:V,r:V)     input
MgetInstFldInst(m:M,l:V,b:V,f:F) input
MputInstFldInst(m:M,b:V,f:F,r:V) input
MgetStatFldInst(m:M,l:V,f:F)     input
MputStatFldInst(m:M,f:F,r:V)     input
IM(i:I,m:M) input
argIVMV(i:I0,u:V1,m:M0,v:V0) input
retIVMV(i:I0,u:V0,m:M0,v:V1) input
reachableT(t:T) input
CfromHC(cm:C,h:H,c:C) input
r_CfromHC(cm:C,h:H,c:C) input # track
CfromIC(cm:C,i:I,c:C) input
r_CfromIC(cm:C,i:I,c:C) input # track
HfromC(h:H,c:C) input
objI(i:I) input
inQuery(e1:E,e2:E) input
reachableCI(c:C,i:I) input
r_reachableCI(c:C,i:I) input # track
reachableCM(c:C,m:M) input
r_reachableCM(c:C,m:M) input # track
VCfromVC(v1:V0,e1:C0,v2:V1,e2:C1) input
r_VCfromVC(v1:V,e1:C,v2:V,e2:C) input # track
CICM(ci:C,i:I,cm:C,m:M) input
r_CICM(ci:C,i:I,cm:C,m:M) input # track
VAfilter(v:V,a:C) input
r_VAfilter(v:V,a:C) input # track
VCA(v:V,e:C,a:C) input
r_VCA(v:V,e:C,a:C) input # track
FA(f:F,a:C) input
r_FA(f:F,a:C) input # track
AFA(a1:C,f:F,a2:C) input
r_AFA(a1:C,f:F,a2:C) input # track

### VAfilter(v,a) :- VHfilter(v,h), HfromC(h,a).

### reachableCM(0,m) :- clinitTM(t,m), reachableT(t).

### reachableCM(cm,m) :- CICM(_,_,cm,m).
# TRANS - t_CICM_reachableCM1 CICM reachableCM 0,1,2,3 2,3
t_CICM_reachableCM1(x6:C,x7:I,cm:C,m:M) output
t_CICM_reachableCM1(x6,x7,cm,m) :- r_reachableCM(cm,m), CICM(x6,x7,cm,m).

### reachableCI(c,i) :- reachableCM(c,m), MI(m,i).
# TRANS - t_reachableCM_reachableCI1 reachableCM reachableCI 0,1 0,2
t_reachableCM_reachableCI1(c:C,m:M,i:I) output
t_reachableCM_reachableCI1(c,m,i) :- r_reachableCI(c,i), reachableCM(c,m), MI(m,i).

### CICM(ci,i,cm,m) :- !objI(i), reachableCI(ci,i), IM(i,m), CfromIC(cm,i,ci).
# TRANS call t_reachableCI_CICM3 reachableCI CICM 0,1 0,1,2,3
t_reachableCI_CICM3(ci:C,i:I,cm:C,m:M) output
t_reachableCI_CICM3(ci,i,cm,m) :- r_CICM(ci,i,cm,m), !objI(i), reachableCI(ci,i), IM(i,m), CfromIC(cm,i,ci).
# TRANS call t_CfromIC_CICM1 CfromIC CICM 0,1,2 2,1,0,3
t_CfromIC_CICM1(cm:C,i:I,ci:C,m:M) output
t_CfromIC_CICM1(cm,i,ci,m) :- r_CICM(ci,i,cm,m), !objI(i), reachableCI(ci,i), IM(i,m), CfromIC(cm,i,ci).

### CICM(ci,i,cm,m) :- objI(i), reachableCI(ci,i), IM(i,m), !statIM(i,m), IinvkArg(i,0,v), VCA(v,ci,cm).
# TRANS callI t_reachableCI_CICM4 reachableCI CICM 0,1 0,1,2,3
t_reachableCI_CICM4(ci:C,i:I,cm:C,m:M) output
t_reachableCI_CICM4(ci,i,cm,m) :- r_CICM(ci,i,cm,m), objI(i), reachableCI(ci,i), IM(i,m), !statIM(i,m), IinvkArg(i,0,v), VCA(v,ci,cm).
# TRANS callI t_VCA_CICM1 VCA CICM 0,1,2 1,3,2,4
t_VCA_CICM1(v:V,ci:C,cm:C,i:I,m:M) output
t_VCA_CICM1(v,ci,cm,i,m) :- r_CICM(ci,i,cm,m), objI(i), reachableCI(ci,i), IM(i,m), !statIM(i,m), IinvkArg(i,0,v), VCA(v,ci,cm).

### CICM(ci,i,cm,m) :- objI(i), reachableCI(ci,i), statIM(i,m), ci=cm.
# TRANS callS t_reachableCI_CICM5 reachableCI CICM 0,1 0,1,2,3
t_reachableCI_CICM5(ci:C,i:I,cm:C,m:M) output
t_reachableCI_CICM5(ci,i,cm,m) :- r_CICM(ci,i,cm,m), objI(i), reachableCI(ci,i), statIM(i,m), ci=cm.

### VCfromVC(vm,cm,vi,ci) :- argIVMV(i,vi,m,vm), CICM(ci,i,cm,m).
# TRANS arg t_CICM_VCfromVC2 CICM VCfromVC 0,1,2,3 4,2,5,0
t_CICM_VCfromVC2(ci:C,i:I,cm:C,m:M,vm:V,vi:V) output
t_CICM_VCfromVC2(ci,i,cm,m,vm,vi) :- r_VCfromVC(vm,cm,vi,ci), argIVMV(i,vi,m,vm), CICM(ci,i,cm,m).

### VCfromVC(vi,ci,vm,cm) :- retIVMV(i,vi,m,vm), CICM(ci,i,cm,m).
# TRANS ret t_CICM_VCfromVC3 CICM VCfromVC 0,1,2,3 4,0,5,2
t_CICM_VCfromVC3(ci:C,i:I,cm:C,m:M,vi:V,vm:V) output
t_CICM_VCfromVC3(ci,i,cm,m,vi,vm) :- r_VCfromVC(vi,ci,vm,cm), retIVMV(i,vi,m,vm), CICM(ci,i,cm,m).

### VCA(v,c,a) :- VCfromVC(v,c,vv,cc), VCA(vv,cc,a), VAfilter(v,a).
# TRANS - t_VCfromVC_VCA1 VCfromVC VCA 0,1,2,3 0,1,4
t_VCfromVC_VCA1(v:V,c:C,vv:V,cc:C,a:C) output
t_VCfromVC_VCA1(v,c,vv,cc,a) :- r_VCA(v,c,a), VCfromVC(v,c,vv,cc), VCA(vv,cc,a), VAfilter(v,a).
# TRANS - t_VCA_VCA3 VCA VCA 0,1,2 3,4,2
t_VCA_VCA3(vv:V,cc:C,a:C,v:V,c:C) output
t_VCA_VCA3(vv,cc,a,v,c) :- r_VCA(v,c,a), VCfromVC(v,c,vv,cc), VCA(vv,cc,a), VAfilter(v,a).
# TRANS - t_VAfilter_VCA2 VAfilter VCA 0,1 0,2,1
t_VAfilter_VCA2(v:V,a:C,c:C) output
t_VAfilter_VCA2(v,a,c) :- r_VCA(v,c,a), VCfromVC(v,c,vv,cc), VCA(vv,cc,a), VAfilter(v,a).

### VCA(l,c,a) :- reachableCM(c,m), MobjValAsgnInst(m,l,h), CfromHC(a,h,c).
# TRANS new t_reachableCM_VCA4 reachableCM VCA 0,1 2,0,3
t_reachableCM_VCA4(c:C,m:M,l:V,a:C) output
t_reachableCM_VCA4(c,m,l,a) :- r_VCA(l,c,a), reachableCM(c,m), MobjValAsgnInst(m,l,h), CfromHC(a,h,c).
# TRANS new t_CfromHC_VCA1 CfromHC VCA 0,1,2 3,2,0
t_CfromHC_VCA1(a:C,h:H,c:C,l:V) output
t_CfromHC_VCA1(a,h,c,l) :- r_VCA(l,c,a), reachableCM(c,m), MobjValAsgnInst(m,l,h), CfromHC(a,h,c).

### VCA(l,c,a) :- reachableCM(c,m), MobjVarAsgnInst(m,l,r), VCA(r,c,a), VAfilter(l,a).
# TRANS var t_reachableCM_VCA5 reachableCM VCA 0,1 2,0,3
t_reachableCM_VCA5(c:C,m:M,l:V,a:C) output
t_reachableCM_VCA5(c,m,l,a) :- r_VCA(l,c,a), reachableCM(c,m), MobjVarAsgnInst(m,l,r), VCA(r,c,a), VAfilter(l,a).
# TRANS var t_VCA_VCA4 VCA VCA 0,1,2 3,1,2
t_VCA_VCA4(r:V,c:C,a:C,l:V) output
t_VCA_VCA4(r,c,a,l) :- r_VCA(l,c,a), reachableCM(c,m), MobjVarAsgnInst(m,l,r), VCA(r,c,a), VAfilter(l,a).
# TRANS var t_VAfilter_VCA3 VAfilter VCA 0,1 0,2,1
t_VAfilter_VCA3(l:V,a:C,c:C) output
t_VAfilter_VCA3(l,a,c) :- r_VCA(l,c,a), reachableCM(c,m), MobjVarAsgnInst(m,l,r), VCA(r,c,a), VAfilter(l,a).

### VCA(l,c,aa) :- reachableCM(c,m), MgetInstFldInst(m,l,b,f), VCA(b,c,a), AFA(a,f,aa).
# TRANS hr t_reachableCM_VCA6 reachableCM VCA 0,1 2,0,3
t_reachableCM_VCA6(c:C,m:M,l:V,aa:C) output
t_reachableCM_VCA6(c,m,l,aa) :- r_VCA(l,c,aa), reachableCM(c,m), MgetInstFldInst(m,l,b,f), VCA(b,c,a), AFA(a,f,aa).
# TRANS hr t_VCA_VCA5 VCA VCA 0,1,2 3,1,4
t_VCA_VCA5(b:V,c:C,a:C,l:V,aa:C) output
t_VCA_VCA5(b,c,a,l,aa) :- r_VCA(l,c,aa), reachableCM(c,m), MgetInstFldInst(m,l,b,f), VCA(b,c,a), AFA(a,f,aa).
# TRANS hr t_AFA_VCA1 AFA VCA 0,1,2 3,4,2
t_AFA_VCA1(a:C,f:F,aa:C,l:V,c:C) output
t_AFA_VCA1(a,f,aa,l,c) :- r_VCA(l,c,aa), reachableCM(c,m), MgetInstFldInst(m,l,b,f), VCA(b,c,a), AFA(a,f,aa).

### VCA(l,c,a) :- reachableCM(c,m), MgetStatFldInst(m,l,f), FA(f,a).
# TRANS gr t_reachableCM_VCA7 reachableCM VCA 0,1 2,0,3
t_reachableCM_VCA7(c:C,m:M,l:V,a:C) output
t_reachableCM_VCA7(c,m,l,a) :- r_VCA(l,c,a), reachableCM(c,m), MgetStatFldInst(m,l,f), FA(f,a).
# TRANS gr t_FA_VCA1 FA VCA 0,1 2,3,1
t_FA_VCA1(f:F,a:C,l:V,c:C) output
t_FA_VCA1(f,a,l,c) :- r_VCA(l,c,a), reachableCM(c,m), MgetStatFldInst(m,l,f), FA(f,a).

### AFA(a,f,aa) :- reachableCM(c,m), MputInstFldInst(m,b,f,r), VCA(b,c,a), VCA(r,c,aa).
# TRANS hw t_reachableCM_AFA1 reachableCM AFA 0,1 2,3,4
t_reachableCM_AFA1(c:C,m:M,a:C,f:F,aa:C) output
t_reachableCM_AFA1(c,m,a,f,aa) :- r_AFA(a,f,aa), reachableCM(c,m), MputInstFldInst(m,b,f,r), VCA(b,c,a), VCA(r,c,aa).
# TRANS hw t_VCA_AFA2 VCA AFA 0,1,2 2,3,4
t_VCA_AFA2(b:V,c:C,a:C,f:F,aa:C) output
t_VCA_AFA2(b,c,a,f,aa) :- r_AFA(a,f,aa), reachableCM(c,m), MputInstFldInst(m,b,f,r), VCA(b,c,a), VCA(r,c,aa).
# TRANS hw t_VCA_AFA3 VCA AFA 0,1,2 3,4,2
t_VCA_AFA3(r:V,c:C,aa:C,a:C,f:F) output
t_VCA_AFA3(r,c,aa,a,f) :- r_AFA(a,f,aa), reachableCM(c,m), MputInstFldInst(m,b,f,r), VCA(b,c,a), VCA(r,c,aa).

### FA(f,a) :- reachableCM(c,m), MputStatFldInst(m,f,r), VCA(r,c,a).
# TRANS gw t_reachableCM_FA1 reachableCM FA 0,1 2,3
t_reachableCM_FA1(c:C,m:M,f:F,a:C) output
t_reachableCM_FA1(c,m,f,a) :- r_FA(f,a), reachableCM(c,m), MputStatFldInst(m,f,r), VCA(r,c,a).
# TRANS gw t_VCA_FA1 VCA FA 0,1,2 3,2
t_VCA_FA1(r:V,c:C,a:C,f:F) output
t_VCA_FA1(r,c,a,f) :- r_FA(f,a), reachableCM(c,m), MputStatFldInst(m,f,r), VCA(r,c,a).
# name=race-sliver-trans-dlog
ME(m:M0,e:E0) input
statF(f:F0) input
EF(e:E0,f:F0) input
EV(e:E0,v:V0) input
PE(p:P0,e:E0) input
PP(p:P0,q:P1) input
MPhead(m:M0,p:P0) input
MPtail(m:M0,p:P0) input
PI(p:P0,i:I0) input
threadAOCM(t:A,o:C,c:C,m:M) input
escA(a:C) input
r_escA(a:C) input # track
thrSenAbbrRootCM(c:C0,m:M0) input
r_thrSenAbbrRootCM(c:C,m:M) input # track
thrSenAbbrReachableCM(c:C0,m:M0)  input
r_thrSenAbbrReachableCM(c:C,m:M) input # track
thrSenAbbrCICM(c:C0,i:I0,d:C1,m:M0)  input
r_thrSenAbbrCICM(c:C,i:I,d:C,m:M) input # track
reachableTCM(t:A0,c:C0,m:M0) input
r_reachableTCM(t:A,c:C,m:M) input # track
reachableTCE(t:A0,c:C0,e:E0) input
r_reachableTCE(t:A,c:C,e:E) input # track
startingRaceHext(t1:A0,c1:C0,e1:E0,t2:A1,c2:C1,e2:E1) input
r_startingRaceHext(t1:A,c1:C,e1:E,t2:A,c2:C,e2:E) input # track
statE(e:E0) input
r_statE(e:E) input # track
CEC(c:C0,e:E0,o:C1) input
r_CEC(c:C,e:E,o:C) input # track
escapingRaceHext(t1:A0,c1:C0,e1:E0,t2:A1,c2:C1,e2:E1) input
r_escapingRaceHext(t1:A,c1:C,e1:E,t2:A,c2:C,e2:E) input # track
threadAC(t:A,c:C) input
r_threadAC(t:A,c:C) input # track
ForkPMcs(caller:C,p1:P,callee:C)  input
r_ForkPMcs(caller:C,p1:P,callee:C) input # track
ForkPHcs(caller:C,p1:P,callee:C,p2:P)  input
r_ForkPHcs(caller:C,p1:P,callee:C,p2:P) input # track
NonForkPMcs(caller:C,p1:P,callee:C,m2:M) input
r_NonForkPMcs(caller:C,p1:P,callee:C,m2:M) input # track
NonForkPHcs(caller:C,p1:P,callee:C,p2:P) input
r_NonForkPHcs(caller:C,p1:P,callee:C,p2:P) input # track
NonForkPTcs(caller:C,p1:P,callee:C,p2:P) input
r_NonForkPTcs(caller:C,p1:P,callee:C,p2:P) input # track
PathEdge(c:C,p:P,this:A,sThat:A,tThat:A)  input
r_PathEdge(c:C,p:P,this:A,sThat:A,tThat:A) input # track
SummEdge(c:C,p:P,this:A,sThat:A,tThat:A) input
r_SummEdge(c:C,p:P,this:A,sThat:A,tThat:A) input # track
mhp(c:C0,p:P0,t1:A0,t2:A1) input
r_mhp(c:C,p:P,t1:A,t2:A) input # track
mhe(c:C0,e:E0,t1:A0,t2:A1) input
r_mhe(c:C,e:E,t1:A,t2:A) input # track
parallelRaceHext(t1:A0,c1:C0,e1:E0,t2:A1,c2:C1,e2:E1) input
r_parallelRaceHext(t1:A,c1:C,e1:E,t2:A,c2:C,e2:E) input # track
outQuery(e1:E0,e2:E1) input
r_outQuery(e1:E,e2:E) input # track
threadOC(o:C0,c:C1) input

### escA(a) :- FA(_,a).
# TRANS - t_FA_escA1 FA escA 0,1 1
t_FA_escA1(x8:F,a:C) output
t_FA_escA1(x8,a) :- r_escA(a), FA(x8,a).

### escA(a) :- reachableCM(c,1), MmethArg(1,0,v), VCA(v,c,a).
# TRANS ts t_reachableCM_escA1 reachableCM escA 0,1 2
t_reachableCM_escA1(c:C,1:M,a:C) output
t_reachableCM_escA1(c,1,a) :- r_escA(a), reachableCM(c,1), MmethArg(1,0,v), VCA(v,c,a).
# TRANS ts t_VCA_escA1 VCA escA 0,1,2 2
t_VCA_escA1(v:V,c:C,a:C) output
t_VCA_escA1(v,c,a) :- r_escA(a), reachableCM(c,1), MmethArg(1,0,v), VCA(v,c,a).

### escA(a) :- escA(b), AFA(b,_,a).
# TRANS - t_escA_escA1 escA escA 0 1
t_escA_escA1(b:C,a:C) output
t_escA_escA1(b,a) :- r_escA(a), escA(b), AFA(b,_,a).
# TRANS - t_AFA_escA1 AFA escA 0,1,2 2
t_AFA_escA1(b:C,x9:F,a:C) output
t_AFA_escA1(b,x9,a) :- r_escA(a), escA(b), AFA(b,x9,a).

### thrSenAbbrRootCM(d,1) :- thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,1).
# TRANS - t_thrSenAbbrReachableCM_thrSenAbbrRootCM thrSenAbbrReachableCM thrSenAbbrRootCM 0,1 2,3
t_thrSenAbbrReachableCM_thrSenAbbrRootCM(c:C,m:M,d:C,1:M) output
t_thrSenAbbrReachableCM_thrSenAbbrRootCM(c,m,d,1) :- r_thrSenAbbrRootCM(d,1), thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,1).
# TRANS - t_CICM_thrSenAbbrRootCM CICM thrSenAbbrRootCM 0,1,2,3 2,3
t_CICM_thrSenAbbrRootCM(c:C,i:I,d:C,1:M) output
t_CICM_thrSenAbbrRootCM(c,i,d,1) :- r_thrSenAbbrRootCM(d,1), thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,1).

### thrSenAbbrReachableCM(c,m) :- thrSenAbbrRootCM(c,m).
# TRANS - t_thrSenAbbrRootCM_thrSenAbbrReachableCM thrSenAbbrRootCM thrSenAbbrReachableCM 0,1 0,1
t_thrSenAbbrRootCM_thrSenAbbrReachableCM(c:C,m:M) output
t_thrSenAbbrRootCM_thrSenAbbrReachableCM(c,m) :- r_thrSenAbbrReachableCM(c,m), thrSenAbbrRootCM(c,m).

### thrSenAbbrReachableCM(d,n) :- thrSenAbbrCICM(_,_,d,n).
# TRANS - t_thrSenAbbrCICM_thrSenAbbrReachableCM thrSenAbbrCICM thrSenAbbrReachableCM 0,1,2,3 2,3
t_thrSenAbbrCICM_thrSenAbbrReachableCM(x10:C,x11:I,d:C,n:M) output
t_thrSenAbbrCICM_thrSenAbbrReachableCM(x10,x11,d,n) :- r_thrSenAbbrReachableCM(d,n), thrSenAbbrCICM(x10,x11,d,n).

### thrSenAbbrCICM(c,i,d,n) :- thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,n), n!=1.
# TRANS - t_thrSenAbbrReachableCM_thrSenAbbrCICM thrSenAbbrReachableCM thrSenAbbrCICM 0,1 0,2,3,4
t_thrSenAbbrReachableCM_thrSenAbbrCICM(c:C,m:M,i:I,d:C,n:M) output
t_thrSenAbbrReachableCM_thrSenAbbrCICM(c,m,i,d,n) :- r_thrSenAbbrCICM(c,i,d,n), thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,n), n!=1.
# TRANS - t_CICM_thrSenAbbrCICM CICM thrSenAbbrCICM 0,1,2,3 0,1,2,3
t_CICM_thrSenAbbrCICM(c:C,i:I,d:C,n:M) output
t_CICM_thrSenAbbrCICM(c,i,d,n) :- r_thrSenAbbrCICM(c,i,d,n), thrSenAbbrReachableCM(c,m), MI(m,i), CICM(c,i,d,n), n!=1.

### reachableTCM(t,c,m) :- threadAOCM(t,_,c,m).

### reachableTCM(t,d,n) :- reachableTCM(t,c,m), MI(m,i), thrSenAbbrCICM(c,i,d,n).
# TRANS - t_reachableTCM_reachableTCM reachableTCM reachableTCM 0,1,2 0,3,4
t_reachableTCM_reachableTCM(t:A,c:C,m:M,d:C,n:M) output
t_reachableTCM_reachableTCM(t,c,m,d,n) :- r_reachableTCM(t,d,n), reachableTCM(t,c,m), MI(m,i), thrSenAbbrCICM(c,i,d,n).
# TRANS - t_thrSenAbbrCICM_reachableTCM thrSenAbbrCICM reachableTCM 0,1,2,3 4,2,3
t_thrSenAbbrCICM_reachableTCM(c:C,i:I,d:C,n:M,t:A) output
t_thrSenAbbrCICM_reachableTCM(c,i,d,n,t) :- r_reachableTCM(t,d,n), reachableTCM(t,c,m), MI(m,i), thrSenAbbrCICM(c,i,d,n).

### reachableTCE(t,c,e) :- reachableTCM(t,c,m), ME(m,e).
# TRANS - t_reachableTCM_reachableTCE reachableTCM reachableTCE 0,1,2 0,1,3
t_reachableTCM_reachableTCE(t:A,c:C,m:M,e:E) output
t_reachableTCM_reachableTCE(t,c,m,e) :- r_reachableTCE(t,c,e), reachableTCM(t,c,m), ME(m,e).

### startingRaceHext(t1,c1,e1,t2,c2,e2) :- inQuery(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2).
# TRANS - t_reachableTCE_startingRaceHext reachableTCE startingRaceHext 0,1,2 0,1,2,3,4,5
t_reachableTCE_startingRaceHext(t1:A,c1:C,e1:E,t2:A,c2:C,e2:E) output
t_reachableTCE_startingRaceHext(t1,c1,e1,t2,c2,e2) :- r_startingRaceHext(t1,c1,e1,t2,c2,e2), inQuery(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2).
# TRANS - t_reachableTCE_startingRaceHext1 reachableTCE startingRaceHext 0,1,2 3,4,5,0,1,2
t_reachableTCE_startingRaceHext1(t2:A,c2:C,e2:E,t1:A,c1:C,e1:E) output
t_reachableTCE_startingRaceHext1(t2,c2,e2,t1,c1,e1) :- r_startingRaceHext(t1,c1,e1,t2,c2,e2), inQuery(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2).

### startingRaceHext(t1,c1,e1,t2,c2,e2) :- query(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, c1<c2.
# TRANS - t_reachableTCE_startingRaceHext2 reachableTCE startingRaceHext 0,1,2 0,1,2,3,4,5
t_reachableTCE_startingRaceHext2(t1:A,c1:C,e1:E,t2:A,c2:C,e2:E) output
t_reachableTCE_startingRaceHext2(t1,c1,e1,t2,c2,e2) :- r_startingRaceHext(t1,c1,e1,t2,c2,e2), query(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, c1<c2.
# TRANS - t_reachableTCE_startingRaceHext3 reachableTCE startingRaceHext 0,1,2 3,4,5,0,1,2
t_reachableTCE_startingRaceHext3(t2:A,c2:C,e2:E,t1:A,c1:C,e1:E) output
t_reachableTCE_startingRaceHext3(t2,c2,e2,t1,c1,e1) :- r_startingRaceHext(t1,c1,e1,t2,c2,e2), query(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, c1<c2.

### startingRaceHext(t1,c1,e1,t2,c2,e2) :- query(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, c1=c2, t1<=t2.
# TRANS - t_reachableTCE_startingRaceHext4 reachableTCE startingRaceHext 0,1,2 0,1,2,3,4,5
t_reachableTCE_startingRaceHext4(t1:A,c1:C,e1:E,t2:A,c2:C,e2:E) output
t_reachableTCE_startingRaceHext4(t1,c1,e1,t2,c2,e2) :- r_startingRaceHext(t1,c1,e1,t2,c2,e2), query(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, c1=c2, t1<=t2.
# TRANS - t_reachableTCE_startingRaceHext5 reachableTCE startingRaceHext 0,1,2 3,4,5,0,1,2
t_reachableTCE_startingRaceHext5(t2:A,c2:C,e2:E,t1:A,c1:C,e1:E) output
t_reachableTCE_startingRaceHext5(t2,c2,e2,t1,c1,e1) :- r_startingRaceHext(t1,c1,e1,t2,c2,e2), query(e1,e2), reachableTCE(t1,c1,e1), reachableTCE(t2,c2,e2), e1=e2, c1=c2, t1<=t2.

### statE(e) :- EF(e,f), statF(f).

### CEC(c,e,o) :- EV(e,v), VCA(v,c,o), escO(o).
# TRANS - t_VCA_CEC VCA CEC 0,1,2 1,3,2
t_VCA_CEC(v:V,c:C,o:C,e:E) output
t_VCA_CEC(v,c,o,e) :- r_CEC(c,e,o), EV(e,v), VCA(v,c,o), escO(o).

### escapingRaceHext(t1,c1,e1,t2,c2,e2) :- startingRaceHext(t1,c1,e1,t2,c2,e2), CEC(c1,e1,o), CEC(c2,e2,o).
# TRANS - t_startingRaceHext_escapingRaceHext startingRaceHext escapingRaceHext 0,1,2,3,4,5 0,1,2,3,4,5
t_startingRaceHext_escapingRaceHext(t1:A,c1:C,e1:E,t2:A,c2:C,e2:E) output
t_startingRaceHext_escapingRaceHext(t1,c1,e1,t2,c2,e2) :- r_escapingRaceHext(t1,c1,e1,t2,c2,e2), startingRaceHext(t1,c1,e1,t2,c2,e2), CEC(c1,e1,o), CEC(c2,e2,o).
# TRANS - t_CEC_escapingRaceHext CEC escapingRaceHext 0,1,2 3,0,1,4,5,6
t_CEC_escapingRaceHext(c1:C,e1:E,o:C,t1:A,t2:A,c2:C,e2:E) output
t_CEC_escapingRaceHext(c1,e1,o,t1,t2,c2,e2) :- r_escapingRaceHext(t1,c1,e1,t2,c2,e2), startingRaceHext(t1,c1,e1,t2,c2,e2), CEC(c1,e1,o), CEC(c2,e2,o).
# TRANS - t_CEC_escapingRaceHext1 CEC escapingRaceHext 0,1,2 3,4,5,6,0,1
t_CEC_escapingRaceHext1(c2:C,e2:E,o:C,t1:A,c1:C,e1:E,t2:A) output
t_CEC_escapingRaceHext1(c2,e2,o,t1,c1,e1,t2) :- r_escapingRaceHext(t1,c1,e1,t2,c2,e2), startingRaceHext(t1,c1,e1,t2,c2,e2), CEC(c1,e1,o), CEC(c2,e2,o).

### escapingRaceHext(t1,c1,e1,t2,c2,e2) :- startingRaceHext(t1,c1,e1,t2,c2,e2), statE(e1), statE(e2).
# TRANS - t_startingRaceHext_escapingRaceHext1 startingRaceHext escapingRaceHext 0,1,2,3,4,5 0,1,2,3,4,5
t_startingRaceHext_escapingRaceHext1(t1:A,c1:C,e1:E,t2:A,c2:C,e2:E) output
t_startingRaceHext_escapingRaceHext1(t1,c1,e1,t2,c2,e2) :- r_escapingRaceHext(t1,c1,e1,t2,c2,e2), startingRaceHext(t1,c1,e1,t2,c2,e2), statE(e1), statE(e2).
# TRANS - t_statE_escapingRaceHext statE escapingRaceHext 0 1,2,0,3,4,5
t_statE_escapingRaceHext(e1:E,t1:A,c1:C,t2:A,c2:C,e2:E) output
t_statE_escapingRaceHext(e1,t1,c1,t2,c2,e2) :- r_escapingRaceHext(t1,c1,e1,t2,c2,e2), startingRaceHext(t1,c1,e1,t2,c2,e2), statE(e1), statE(e2).
# TRANS - t_statE_escapingRaceHext1 statE escapingRaceHext 0 1,2,3,4,5,0
t_statE_escapingRaceHext1(e2:E,t1:A,c1:C,e1:E,t2:A,c2:C) output
t_statE_escapingRaceHext1(e2,t1,c1,e1,t2,c2) :- r_escapingRaceHext(t1,c1,e1,t2,c2,e2), startingRaceHext(t1,c1,e1,t2,c2,e2), statE(e1), statE(e2).

### NonForkPMcs(c,p,d,m) :- CICM(c,i,d,m), m!=1, PI(p,i).
# TRANS - t_CICM_NonForkPMcs CICM NonForkPMcs 0,1,2,3 0,4,2,3
t_CICM_NonForkPMcs(c:C,i:I,d:C,m:M,p:P) output
t_CICM_NonForkPMcs(c,i,d,m,p) :- r_NonForkPMcs(c,p,d,m), CICM(c,i,d,m), m!=1, PI(p,i).

### NonForkPHcs(c,p,d,h) :- NonForkPMcs(c,p,d,m), MPhead(m,h).
# TRANS - t_NonForkPMcs_NonForkPHcs NonForkPMcs NonForkPHcs 0,1,2,3 0,1,2,4
t_NonForkPMcs_NonForkPHcs(c:C,p:P,d:C,m:M,h:P) output
t_NonForkPMcs_NonForkPHcs(c,p,d,m,h) :- r_NonForkPHcs(c,p,d,h), NonForkPMcs(c,p,d,m), MPhead(m,h).

### NonForkPTcs(c,p,d,t) :- NonForkPMcs(c,p,d,m), MPtail(m,t).
# TRANS - t_NonForkPMcs_NonForkPTcs NonForkPMcs NonForkPTcs 0,1,2,3 0,1,2,4
t_NonForkPMcs_NonForkPTcs(c:C,p:P,d:C,m:M,t:P) output
t_NonForkPMcs_NonForkPTcs(c,p,d,m,t) :- r_NonForkPTcs(c,p,d,t), NonForkPMcs(c,p,d,m), MPtail(m,t).

### ForkPMcs(c,p,d) :- CICM(c,i,d,1), PI(p,i).
# TRANS - t_CICM_ForkPMcs CICM ForkPMcs 0,1,2,3 0,4,2
t_CICM_ForkPMcs(c:C,i:I,d:C,1:M,p:P) output
t_CICM_ForkPMcs(c,i,d,1,p) :- r_ForkPMcs(c,p,d), CICM(c,i,d,1), PI(p,i).

### ForkPHcs(c,p,d,h) :- ForkPMcs(c,p,d), MPhead(1,h).
# TRANS - t_ForkPMcs_ForkPHcs ForkPMcs ForkPHcs 0,1,2 0,1,2,3
t_ForkPMcs_ForkPHcs(c:C,p:P,d:C,h:P) output
t_ForkPMcs_ForkPHcs(c,p,d,h) :- r_ForkPHcs(c,p,d,h), ForkPMcs(c,p,d), MPhead(1,h).

### threadAC(t,c) :- threadAOCM(t,_,c,1).

### PathEdge(c,q,t,t1,t2) :- PathEdge(c,p,t,t1,t2), PP(p,q).
# TRANS - t_PathEdge_PathEdge PathEdge PathEdge 0,1,2,3,4 0,5,2,3,4
t_PathEdge_PathEdge(c:C,p:P,t:A,t1:A,t2:A,q:P) output
t_PathEdge_PathEdge(c,p,t,t1,t2,q) :- r_PathEdge(c,q,t,t1,t2), PathEdge(c,p,t,t1,t2), PP(p,q).

### PathEdge(d,q,t,t1,t2) :- NonForkPHcs(c,p,d,q), PathEdge(c,p,t,_,t2), t1=t2.
# TRANS - t_NonForkPHcs_PathEdge NonForkPHcs PathEdge 0,1,2,3 2,3,4,5,6
t_NonForkPHcs_PathEdge(c:C,p:P,d:C,q:P,t:A,t1:A,t2:A) output
t_NonForkPHcs_PathEdge(c,p,d,q,t,t1,t2) :- r_PathEdge(d,q,t,t1,t2), NonForkPHcs(c,p,d,q), PathEdge(c,p,t,_,t2), t1=t2.
# TRANS - t_PathEdge_PathEdge1 PathEdge PathEdge 0,1,2,3,4 5,6,2,7,4
t_PathEdge_PathEdge1(c:C,p:P,t:A,x14:A,t2:A,d:C,q:P,t1:A) output
t_PathEdge_PathEdge1(c,p,t,x14,t2,d,q,t1) :- r_PathEdge(d,q,t,t1,t2), NonForkPHcs(c,p,d,q), PathEdge(c,p,t,x14,t2), t1=t2.

### SummEdge(c,p,t,t1,t2) :- NonForkPTcs(c,p,d,q), PathEdge(d,q,t,t1,t2).
# TRANS - t_NonForkPTcs_SummEdge NonForkPTcs SummEdge 0,1,2,3 0,1,4,5,6
t_NonForkPTcs_SummEdge(c:C,p:P,d:C,q:P,t:A,t1:A,t2:A) output
t_NonForkPTcs_SummEdge(c,p,d,q,t,t1,t2) :- r_SummEdge(c,p,t,t1,t2), NonForkPTcs(c,p,d,q), PathEdge(d,q,t,t1,t2).
# TRANS - t_PathEdge_SummEdge PathEdge SummEdge 0,1,2,3,4 5,6,2,3,4
t_PathEdge_SummEdge(d:C,q:P,t:A,t1:A,t2:A,c:C,p:P) output
t_PathEdge_SummEdge(d,q,t,t1,t2,c,p) :- r_SummEdge(c,p,t,t1,t2), NonForkPTcs(c,p,d,q), PathEdge(d,q,t,t1,t2).

### PathEdge(c,r,t,t1,t3) :- SummEdge(c,p,t,t2,t3), PathEdge(c,p,t,t1,t2), PP(p,r).
# TRANS - t_SummEdge_PathEdge SummEdge PathEdge 0,1,2,3,4 0,5,2,6,4
t_SummEdge_PathEdge(c:C,p:P,t:A,t2:A,t3:A,r:P,t1:A) output
t_SummEdge_PathEdge(c,p,t,t2,t3,r,t1) :- r_PathEdge(c,r,t,t1,t3), SummEdge(c,p,t,t2,t3), PathEdge(c,p,t,t1,t2), PP(p,r).
# TRANS - t_PathEdge_PathEdge2 PathEdge PathEdge 0,1,2,3,4 0,5,2,3,6
t_PathEdge_PathEdge2(c:C,p:P,t:A,t1:A,t2:A,r:P,t3:A) output
t_PathEdge_PathEdge2(c,p,t,t1,t2,r,t3) :- r_PathEdge(c,r,t,t1,t3), SummEdge(c,p,t,t2,t3), PathEdge(c,p,t,t1,t2), PP(p,r).

### PathEdge(c,r,t,t1,t2) :- ForkPMcs(c,p,d), PathEdge(c,p,t,t1,_), PP(p,r), threadAC(t2,d).
# TRANS - t_ForkPMcs_PathEdge ForkPMcs PathEdge 0,1,2 0,3,4,5,6
t_ForkPMcs_PathEdge(c:C,p:P,d:C,r:P,t:A,t1:A,t2:A) output
t_ForkPMcs_PathEdge(c,p,d,r,t,t1,t2) :- r_PathEdge(c,r,t,t1,t2), ForkPMcs(c,p,d), PathEdge(c,p,t,t1,_), PP(p,r), threadAC(t2,d).
# TRANS - t_PathEdge_PathEdge3 PathEdge PathEdge 0,1,2,3,4 0,5,2,3,6
t_PathEdge_PathEdge3(c:C,p:P,t:A,t1:A,x15:A,r:P,t2:A) output
t_PathEdge_PathEdge3(c,p,t,t1,x15,r,t2) :- r_PathEdge(c,r,t,t1,t2), ForkPMcs(c,p,d), PathEdge(c,p,t,t1,x15), PP(p,r), threadAC(t2,d).
# TRANS - t_threadAC_PathEdge threadAC PathEdge 0,1 2,3,4,5,0
t_threadAC_PathEdge(t2:A,d:C,c:C,r:P,t:A,t1:A) output
t_threadAC_PathEdge(t2,d,c,r,t,t1) :- r_PathEdge(c,r,t,t1,t2), ForkPMcs(c,p,d), PathEdge(c,p,t,t1,_), PP(p,r), threadAC(t2,d).

### PathEdge(c,r,t,t1,t3) :- ForkPMcs(c,p,d), PathEdge(c,p,t,t1,_), PP(p,r), threadAC(t2,d), PathEdge(d,q,t2,0,t3), MPtail(1,q).
# TRANS - t_ForkPMcs_PathEdge1 ForkPMcs PathEdge 0,1,2 0,3,4,5,6
t_ForkPMcs_PathEdge1(c:C,p:P,d:C,r:P,t:A,t1:A,t3:A) output
t_ForkPMcs_PathEdge1(c,p,d,r,t,t1,t3) :- r_PathEdge(c,r,t,t1,t3), ForkPMcs(c,p,d), PathEdge(c,p,t,t1,_), PP(p,r), threadAC(t2,d), PathEdge(d,q,t2,0,t3), MPtail(1,q).
# TRANS - t_PathEdge_PathEdge4 PathEdge PathEdge 0,1,2,3,4 0,5,2,3,6
t_PathEdge_PathEdge4(c:C,p:P,t:A,t1:A,x16:A,r:P,t3:A) output
t_PathEdge_PathEdge4(c,p,t,t1,x16,r,t3) :- r_PathEdge(c,r,t,t1,t3), ForkPMcs(c,p,d), PathEdge(c,p,t,t1,x16), PP(p,r), threadAC(t2,d), PathEdge(d,q,t2,0,t3), MPtail(1,q).
# TRANS - t_threadAC_PathEdge1 threadAC PathEdge 0,1 2,3,4,5,6
t_threadAC_PathEdge1(t2:A,d:C,c:C,r:P,t:A,t1:A,t3:A) output
t_threadAC_PathEdge1(t2,d,c,r,t,t1,t3) :- r_PathEdge(c,r,t,t1,t3), ForkPMcs(c,p,d), PathEdge(c,p,t,t1,_), PP(p,r), threadAC(t2,d), PathEdge(d,q,t2,0,t3), MPtail(1,q).
# TRANS - t_PathEdge_PathEdge5 PathEdge PathEdge 0,1,2,3,4 5,6,7,8,4
t_PathEdge_PathEdge5(d:C,q:P,t2:A,0:A,t3:A,c:C,r:P,t:A,t1:A) output
t_PathEdge_PathEdge5(d,q,t2,0,t3,c,r,t,t1) :- r_PathEdge(c,r,t,t1,t3), ForkPMcs(c,p,d), PathEdge(c,p,t,t1,_), PP(p,r), threadAC(t2,d), PathEdge(d,q,t2,0,t3), MPtail(1,q).

### PathEdge(d,h,x,y,z) :- ForkPHcs(c,p,d,h), PathEdge(c,p,y,_,_), threadAC(x,d), z=y.
# TRANS - t_ForkPHcs_PathEdge ForkPHcs PathEdge 0,1,2,3 2,3,4,5,6
t_ForkPHcs_PathEdge(c:C,p:P,d:C,h:P,x:A,y:A,z:A) output
t_ForkPHcs_PathEdge(c,p,d,h,x,y,z) :- r_PathEdge(d,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,y,_,_), threadAC(x,d), z=y.
# TRANS - t_PathEdge_PathEdge6 PathEdge PathEdge 0,1,2,3,4 5,6,7,2,8
t_PathEdge_PathEdge6(c:C,p:P,y:A,x17:A,x18:A,d:C,h:P,x:A,z:A) output
t_PathEdge_PathEdge6(c,p,y,x17,x18,d,h,x,z) :- r_PathEdge(d,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,y,x17,x18), threadAC(x,d), z=y.
# TRANS - t_threadAC_PathEdge2 threadAC PathEdge 0,1 1,2,0,3,4
t_threadAC_PathEdge2(x:A,d:C,h:P,y:A,z:A) output
t_threadAC_PathEdge2(x,d,h,y,z) :- r_PathEdge(d,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,y,_,_), threadAC(x,d), z=y.

### PathEdge(d,h,x,y,z) :- ForkPHcs(c,p,d,h), PathEdge(c,p,_,_,y), threadAC(x,d), z=y.
# TRANS - t_ForkPHcs_PathEdge1 ForkPHcs PathEdge 0,1,2,3 2,3,4,5,6
t_ForkPHcs_PathEdge1(c:C,p:P,d:C,h:P,x:A,y:A,z:A) output
t_ForkPHcs_PathEdge1(c,p,d,h,x,y,z) :- r_PathEdge(d,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,_,_,y), threadAC(x,d), z=y.
# TRANS - t_PathEdge_PathEdge7 PathEdge PathEdge 0,1,2,3,4 5,6,7,4,8
t_PathEdge_PathEdge7(c:C,p:P,x19:A,x20:A,y:A,d:C,h:P,x:A,z:A) output
t_PathEdge_PathEdge7(c,p,x19,x20,y,d,h,x,z) :- r_PathEdge(d,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,x19,x20,y), threadAC(x,d), z=y.
# TRANS - t_threadAC_PathEdge3 threadAC PathEdge 0,1 1,2,0,3,4
t_threadAC_PathEdge3(x:A,d:C,h:P,y:A,z:A) output
t_threadAC_PathEdge3(x,d,h,y,z) :- r_PathEdge(d,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,_,_,y), threadAC(x,d), z=y.

### PathEdge(e,h,x,y,z) :- ForkPHcs(c,p,d,h), PathEdge(c,p,_,_,x), threadAC(x,e), threadAC(y,d), z=y.
# TRANS - t_ForkPHcs_PathEdge2 ForkPHcs PathEdge 0,1,2,3 4,3,5,6,7
t_ForkPHcs_PathEdge2(c:C,p:P,d:C,h:P,e:C,x:A,y:A,z:A) output
t_ForkPHcs_PathEdge2(c,p,d,h,e,x,y,z) :- r_PathEdge(e,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,_,_,x), threadAC(x,e), threadAC(y,d), z=y.
# TRANS - t_PathEdge_PathEdge8 PathEdge PathEdge 0,1,2,3,4 5,6,4,7,8
t_PathEdge_PathEdge8(c:C,p:P,x21:A,x22:A,x:A,e:C,h:P,y:A,z:A) output
t_PathEdge_PathEdge8(c,p,x21,x22,x,e,h,y,z) :- r_PathEdge(e,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,x21,x22,x), threadAC(x,e), threadAC(y,d), z=y.
# TRANS - t_threadAC_PathEdge4 threadAC PathEdge 0,1 1,2,0,3,4
t_threadAC_PathEdge4(x:A,e:C,h:P,y:A,z:A) output
t_threadAC_PathEdge4(x,e,h,y,z) :- r_PathEdge(e,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,_,_,x), threadAC(x,e), threadAC(y,d), z=y.
# TRANS - t_threadAC_PathEdge5 threadAC PathEdge 0,1 2,3,4,0,5
t_threadAC_PathEdge5(y:A,d:C,e:C,h:P,x:A,z:A) output
t_threadAC_PathEdge5(y,d,e,h,x,z) :- r_PathEdge(e,h,x,y,z), ForkPHcs(c,p,d,h), PathEdge(c,p,_,_,x), threadAC(x,e), threadAC(y,d), z=y.

### mhp(c,p,t1,t2) :- PathEdge(c,p,t1,_,t2), t1!=0, t2!=0.
# TRANS - t_PathEdge_mhp PathEdge mhp 0,1,2,3,4 0,1,2,4
t_PathEdge_mhp(c:C,p:P,t1:A,x23:A,t2:A) output
t_PathEdge_mhp(c,p,t1,x23,t2) :- r_mhp(c,p,t1,t2), PathEdge(c,p,t1,x23,t2), t1!=0, t2!=0.

### mhe(c,e,t1,t2) :- mhp(c,p,t1,t2), PE(p,e).
# TRANS - t_mhp_mhe mhp mhe 0,1,2,3 0,4,2,3
t_mhp_mhe(c:C,p:P,t1:A,t2:A,e:E) output
t_mhp_mhe(c,p,t1,t2,e) :- r_mhe(c,e,t1,t2), mhp(c,p,t1,t2), PE(p,e).

### parallelRaceHext(t1,c1,e1,t2,c2,e2) :- escapingRaceHext(t1,c1,e1,t2,c2,e2), mhe(c1,e1,t1,t2), mhe(c2,e2,t2,t1).
# TRANS - t_escapingRaceHext_parallelRaceHext escapingRaceHext parallelRaceHext 0,1,2,3,4,5 0,1,2,3,4,5
t_escapingRaceHext_parallelRaceHext(t1:A,c1:C,e1:E,t2:A,c2:C,e2:E) output
t_escapingRaceHext_parallelRaceHext(t1,c1,e1,t2,c2,e2) :- r_parallelRaceHext(t1,c1,e1,t2,c2,e2), escapingRaceHext(t1,c1,e1,t2,c2,e2), mhe(c1,e1,t1,t2), mhe(c2,e2,t2,t1).
# TRANS - t_mhe_parallelRaceHext mhe parallelRaceHext 0,1,2,3 2,0,1,3,4,5
t_mhe_parallelRaceHext(c1:C,e1:E,t1:A,t2:A,c2:C,e2:E) output
t_mhe_parallelRaceHext(c1,e1,t1,t2,c2,e2) :- r_parallelRaceHext(t1,c1,e1,t2,c2,e2), escapingRaceHext(t1,c1,e1,t2,c2,e2), mhe(c1,e1,t1,t2), mhe(c2,e2,t2,t1).
# TRANS - t_mhe_parallelRaceHext1 mhe parallelRaceHext 0,1,2,3 3,4,5,2,0,1
t_mhe_parallelRaceHext1(c2:C,e2:E,t2:A,t1:A,c1:C,e1:E) output
t_mhe_parallelRaceHext1(c2,e2,t2,t1,c1,e1) :- r_parallelRaceHext(t1,c1,e1,t2,c2,e2), escapingRaceHext(t1,c1,e1,t2,c2,e2), mhe(c1,e1,t1,t2), mhe(c2,e2,t2,t1).

### outQuery(e1,e2) :- parallelRaceHext(_,_,e1,_,_,e2).
# TRANS - t_parallelRaceHext_outQuery parallelRaceHext outQuery 0,1,2,3,4,5 2,5
t_parallelRaceHext_outQuery(x24:A,x25:C,e1:E,x26:A,x27:C,e2:E) output
t_parallelRaceHext_outQuery(x24,x25,e1,x26,x27,e2) :- r_outQuery(e1,e2), parallelRaceHext(x24,x25,e1,x26,x27,e2).
