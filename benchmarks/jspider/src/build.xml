<!-- ======================================================================= -->
<!-- == JSpider ANT Build Script                                          == -->
<!-- ======================================================================= -->
<!-- $Id: build.xml,v 1.34 2003/04/06 14:00:20 vanrogu Exp $ -->
<project name="JSpider (http://www.javacoding.net/jspider)" default="buildSimple">

  <!-- ===================================================================== -->
  <!-- == Properties                                                      == -->
  <!-- ===================================================================== -->

  <!-- load the project properties from the config file -->
  <property file="build/project.properties"/>

  <!-- load the folder properties from the config file -->
  <property prefix="folder" file="build/folder.properties"/>

  <!-- load the project properties from the config file -->
  <property prefix="project" file="${folder.build}/project.properties"/>

  <!-- load the dependency properties from the config file -->
  <property prefix="dependency" file="${folder.build}/dependencies.properties"/>




  <!-- ===================================================================== -->
  <!-- == Filtersets                                                      == -->
  <!-- ===================================================================== -->

  <!-- filterset to be applied on the java source (version nrs, etc...) -->
  <filterset id="filterset.src">
    <filtersfile file="${folder.build}/project.properties"/>
  </filterset>

  <!-- filterset to be applied on the config files -->
  <filterset id="filterset.conf">
    <filtersfile file="${folder.build}/config.properties"/>
    <!-- user.properties will be added in the task, it cannot be defined here as
         it may be missing (will be generated by init task in that case) -->
  </filterset>

  <!-- filterset to be applied on the buid.report file -->
  <filterset id="filterset.report">
    <filter token="ant.version" value="${ant.version}"/>
    <filter token="java.version" value="${java.version}"/>
    <filter token="java.vendor" value="${java.vendor}"/>
    <filter token="os.name" value="${os.name}"/>
    <filter token="os.arch" value="${os.arch}"/>
    <filter token="os.version" value="${os.version}"/>
  </filterset>




  <!-- ===================================================================== -->
  <!-- == Paths                                                           == -->
  <!-- ===================================================================== -->

  <!-- XDoclet path (for 'to do' docs) -->
  <path id="path.dependency.xdoclet">
      <fileset dir="${folder.res.lib}/${dependency.xdoclet.version}">
          <include name="${dependency.xdoclet.files}"/>
      </fileset>
  </path>

  <!-- Clover path -->
  <path id="path.dependency.clover">
      <fileset dir="${folder.res.lib}/${dependency.clover.version}">
          <include name="${dependency.clover.files}"/>
      </fileset>
  </path>

  <!-- commons-logging path -->
  <path id="path.dependency.commons-logging">
      <fileset dir="${folder.res.lib}/${dependency.commons-logging.version}">
          <include name="${dependency.commons-logging.files}"/>
      </fileset>
  </path>

  <!-- compile classpath for the main source tree -->
  <path id="path.classpath.compile.main">
      <path refid="path.dependency.commons-logging"/>
      <path refid="path.dependency.clover"/>
  </path>

  <!-- compile classpath for the test source tree -->
  <path id="path.classpath.compile.test">
      <pathelement path="path.classpath.compile.main"/>
      <pathelement location="${folder.stage.compiled.main}"/>
      <pathelement location="${folder.res.lib}/${dependency.junit.version}/${dependency.junit.files}"/>
      <path refid="path.dependency.clover"/>
  </path>

  <!-- run classpath for the JUnit tests  -->
  <path id="path.classpath.run.test">
      <pathelement location="${folder.dist.prepared}/lib/junit.jar"/>
      <pathelement location="${folder.dist.prepared}/lib/jspider.jar"/>
      <pathelement location="${folder.dist.prepared}/lib/unittests.jar"/>
      <path refid="path.dependency.clover"/>
  </path>






  <!-- ===================================================================== -->
  <!-- == Config Tasks                                                    == -->
  <!-- ===================================================================== -->

  <!-- Will be called by targets that will need a build to fail with junit -->
  <target name="testsFailBuild">
      <property name="config.tests.fail.build" value="true"/>
  </target>

    <!-- Will be called by targets that will need to write junit docs...  -->
  <target name="testsDontFailBuild">
      <property name="config.tests.fail.build" value="false"/>
  </target>





  <!-- ===================================================================== -->
  <!-- == General Tasks                                                   == -->
  <!-- ===================================================================== -->

  <!-- == INIT ============================================================= -->
  <target name="init">
    <tstamp prefix="build"/>
    <tstamp>
      <format property="build.timestamp.standard" pattern="yyyy/MM/dd HH:mm"/>
    </tstamp>
    <property name="build.timestamp.version" value="${build.DSTAMP}"/>
    <echo>JSpider version.number ... : ${project.jspider.version.number}</echo>
    <echo>JSpider version.string ... : ${project.jspider.version.string}</echo>
    <echo></echo>
    <echo>Build timestamp .......... : ${build.timestamp.standard}</echo>
    <echo>Release number ........... : ${build.timestamp.version}</echo>
    <!-- make sure the user.properties exists -->
    <copy file="base.user.properties" tofile="user.properties" overwrite="False"/>
  </target>



  <!-- == CLEAN ============================================================ -->
  <target name="clean" depends="init">
    <delete dir="${folder.stage}"/>
    <delete dir="${folder.dist}"/>
  </target>





  <!-- ===================================================================== -->
  <!-- == Build Tasks                                                     == -->
  <!-- ===================================================================== -->

  <!-- == BUILD ============================================================ -->
  <target name="build" depends="init">
    <!-- copy the main source tree while filtering -->
    <mkdir dir="${folder.stage.src}"/>
    <mkdir dir="${folder.stage.src.main}"/>
    <copy todir="${folder.stage.src.main}">
        <fileset dir="${folder.src.main}"/>
        <filterset>
          <filterset refid="filterset.src"/>
          <filter token="build.DSTAMP" value="${build.DSTAMP}"/>
        </filterset>
    </copy>

    <!-- copy the test source tree while filtering -->
    <mkdir dir="${folder.stage.src.test}"/>
    <copy todir="${folder.stage.src.test}">
        <fileset dir="${folder.src.test}"/>
        <filterset>
          <filterset refid="filterset.src"/>
          <filter token="build.DSTAMP" value="${build.DSTAMP}"/>
        </filterset>
    </copy>

    <!-- compile main source tree to the stage.compiled.main folder -->
    <mkdir dir="${folder.stage}" />
    <mkdir dir="${folder.stage.compiled}" />
    <mkdir dir="${folder.stage.compiled.main}"/>
    <javac srcdir="${folder.stage.src.main}"
           destdir="${folder.stage.compiled.main}"
		   debug="true"
           includeAntRuntime="false">
      <classpath refid="path.classpath.compile.main"/>
    </javac>

    <!-- compile test source tree to the stage.compiled.main folder -->
    <mkdir dir="${folder.stage.compiled.test}"/>
    <javac srcdir="${folder.stage.src.test}"
           destdir="${folder.stage.compiled.test}"
           includeAntRuntime="false">
      <classpath refid="path.classpath.compile.test"/>
    </javac>
  </target>



  <!--
    build target to be used when developing.  Fast, but no docs.  JUnit tests
    that fail will fail the complete build te ensure the fixing of these issues.
    -->
  <target name="buildSimple"
          depends="testsFailBuild,prepareDist,testTechnical"
          description="builds a runnable and testable distribution with technical tests">
  </target>



  <!--
    build target that does a build with complete documentation.  JUnit test
    failures don't fail the build to allow the JUnit docs to be generated.
    -->
  <target name="buildComplete"
          depends="testsDontFailBuild,buildSimple,generateFullDocs"
          description="buildSimple + documentation">
  </target>



  <!--
    build target that performs a build with complete documentation, and functional
    tests.
    It also packages the distribution files (zip, tar, tar.gz, ...)
    -->
  <target name="buildDistro"
          depends="testsDontFailBuild,clean,buildSimple,testFunctional,generateFullDocs,package"
          description="buildComplete + functionalTests + packaging">
  </target>





  <!-- ===================================================================== -->
  <!-- == Package Tasks                                                   == -->
  <!-- ===================================================================== -->

  <!-- == Jar ============================================================== -->
  <target name="jar" depends="build">
    <mkdir dir="${folder.dist.prepared}"/>
    <mkdir dir="${folder.dist.prepared}/lib"/>
    <jar jarfile="${folder.dist.prepared}/lib/jspider.jar" basedir="${folder.stage.compiled.main}"/>
    <jar jarfile="${folder.dist.prepared}/lib/unittests.jar" basedir="${folder.stage.compiled.test}"/>
  </target>

  <!-- == Prepare Distribution ============================================= -->
  <target name="prepareDist" depends="jar">
    <copy todir="${folder.dist.prepared}" file="${folder.build}/build.report" filtering="true">
      <filterset>
        <filter token="build.timestamp.standard" value="${build.timestamp.standard}"/>
        <filterset refid="filterset.report"/>
        <filterset refid="filterset.conf"/>
        <filterset refid="filterset.src"/>
      </filterset>
    </copy>
    <copy todir="${folder.dist.prepared}/src">
        <fileset dir=".">
            <include name="src/**"/>
            <include name="test/**"/>
            <include name="xdocs/**"/>
            <include name="build/**"/>
            <include name="res/**"/>
            <include name="continuous.*"/>
            <include name="base.*"/>
            <include name="build.xml"/>
            <include name="project.xml"/>
            <include name="LICENSE.txt"/>
        </fileset>
    </copy>
    <copy todir="${folder.dist.prepared}/conf">
      <fileset dir="${folder.res.conf}"/>
      <filterset>
        <filterset refid="filterset.conf"/>
        <filtersfile file="user.properties"/>
      </filterset>
    </copy>
    <mkdir dir="${folder.stage}/clean/conf"/>
    <copy todir="${folder.stage}/clean/conf">
      <fileset dir="${folder.res.conf}"/>
      <filterset>
        <filterset refid="filterset.conf"/>
        <filtersfile file="base.user.properties"/>
      </filterset>
    </copy>
    <copy todir="${folder.dist.prepared}/bin" overwrite="true">
      <fileset dir="${folder.res.bin}">
      </fileset>
    </copy>
    <fixcrlf srcdir="${folder.dist.prepared}/bin" eol="lf" includes="*.sh"/>
    <fixcrlf srcdir="${folder.dist.prepared}/bin" eol="crlf" includes="*.bat"/>
    <chmod perm="ugo+x" file="${folder.dist.prepared}/bin/jspider.sh"/>
    <chmod perm="ugo+x" file="${folder.dist.prepared}/bin/jspider-tool.sh"/>
    <copy todir="${folder.dist.prepared}/lib">
      <fileset dir="${folder.res.lib}/${dependency.junit.version}">
          <include name="${dependency.junit.files}"/>
      </fileset>
      <fileset dir="${folder.res.lib}/${dependency.velocity.version}">
            <include name="${dependency.velocity.files}"/>
      </fileset>
      <fileset dir="${folder.res.lib}/${dependency.commons-logging.version}">
            <include name="${dependency.commons-logging.files}"/>
      </fileset>
      <fileset dir="${folder.res.lib}/${dependency.log4j.version}">
            <include name="${dependency.log4j.files}"/>
      </fileset>
    </copy>
    <copy todir="${folder.dist.prepared}/output">
      <fileset dir="${folder.res.output}">
      </fileset>
    </copy>
    <copy todir="${folder.dist.prepared}/common">
      <fileset dir="${folder.res.common}">
      </fileset>
    </copy>
  </target>

  <!-- == Package ========================================================== -->
  <target name="package" depends="init">
      <mkdir dir="${folder.dist.packaged}"/>
      <property name="packaging.basefilename.src" value="jspider-src-${jspider.version.number}"/>
      <property name="packaging.basefilename.bin" value="jspider-${jspider.version.number}"/>

      <!-- src packages -->
      <zip zipfile="${folder.dist.packaged}/${packaging.basefilename.src}.zip">
          <!-- make sure your user settings(proxy+password,...) are not put in the distributable-->
          <exclude name="conf/**"/>
          <zipfileset dir="${folder.stage}/clean">
            <include name="conf/**"/>
          </zipfileset>
          <zipfileset dir="${folder.dist.prepared}">
            <exclude name="conf/**"/>
          </zipfileset>
          <zipfileset dir="${folder.stage}">
            <include name="doc/**"/>
          </zipfileset>
      </zip>
      <tar tarfile="${folder.dist.packaged}/${packaging.basefilename.src}.tar">
      <!-- make sure your user settings(proxy+password,...) are not put in the distributable-->
          <exclude name="conf/**"/>
          <tarfileset dir="${folder.stage}/clean">
            <include name="conf/**"/>
          </tarfileset>
          <tarfileset dir="${folder.dist.prepared}">
            <exclude name="conf/**"/>
          </tarfileset>
          <tarfileset dir="${folder.stage}">
            <include name="doc/**"/>
          </tarfileset>
      </tar>
      <gzip zipfile="${folder.dist.packaged}/${packaging.basefilename.src}.tar.gz" src="${folder.dist.packaged}/${packaging.basefilename.src}.tar"/>

      <!-- bin packages -->
      <zip zipfile="${folder.dist.packaged}/${packaging.basefilename.bin}.zip">
          <zipfileset dir="${folder.dist.prepared}" >
              <exclude name="conf/**"/>
              <exclude name="src/**"/>
          </zipfileset>
          <zipfileset dir="${folder.stage}/clean">
            <include name="conf/**"/>
          </zipfileset>
      </zip>
      <tar basedir="${folder.dist.prepared}" tarfile="${folder.dist.packaged}/${packaging.basefilename.bin}.tar">
          <exclude name="conf/**"/>
          <exclude name="src/**"/>
          <tarfileset dir="${folder.stage}/clean">
            <include name="conf/**"/>
          </tarfileset>
      </tar>
      <gzip zipfile="${folder.dist.packaged}/${packaging.basefilename.bin}.tar.gz" src="${folder.dist.packaged}/${packaging.basefilename.bin}.tar"/>
  </target>



  <!-- ===================================================================== -->
  <!-- == Test Tasks                                                      == -->
  <!-- ===================================================================== -->

  <!-- == Test Interactively (swing ui) ==================================== -->
  <target name="testInteractive"
          depends="init"
          description="runs the JUnit tests interactively (swing ui)">
    <java classname="junit.swingui.TestRunner" fork="true">
      <classpath refid="path.classpath.run.test"/>
      <sysproperty key="jspider.home" value="${folder.dist.prepared}"></sysproperty>
    </java>
  </target>



  <!-- == Prepare Test ===================================================== -->
  <target name="prepareTest" depends="init">
    <mkdir dir="${folder.stage.doc.junit.xml}"/>
  </target>



  <!-- == Test Technical =================================================== -->
  <target name="testTechnical"
          depends="prepareTest"
          description="runs the JUnit technical tests">
    <junit printsummary="yes" haltonfailure="${config.tests.fail.build}"> <!-- fork="yes" dir="${folder.dist.prepared}">-->
      <sysproperty key="jspider.home" value="${folder.dist.prepared}"></sysproperty>
      <classpath refid="path.classpath.run.test"/>
      <formatter type="xml"/>
      <batchtest todir="${folder.stage.doc.junit.xml}">
        <fileset dir="${folder.stage.src.test}">
          <include name="**/*Test.java"/>
          <exclude name="**/functional/**"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- == Test Functional ================================================== -->
  <target name="testFunctional"
          depends="prepareTest"
          description="runs the JUnit functional tests">
    <echo>If this hangs, you should check your proxy settings in user.properties!</echo>
    <junit printsummary="yes" haltonfailure="${config.tests.fail.build}" fork="yes" dir="${folder.dist.prepared}">
      <sysproperty key="jspider.home" value="."></sysproperty>
      <classpath refid="path.classpath.run.test"/>
      <formatter type="xml"/>
      <batchtest todir="${folder.stage.doc.junit.xml}">
        <fileset dir="${folder.stage.compiled.test}">
          <include name="**/functional/**/*Test.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>



  <!-- == Test Full ======================================================== -->
  <target name="testFull"
          depends="testTechnical,testFunctional"
          description="runs the JUnit technical and functional tests">
  </target>





  <!-- ===================================================================== -->
  <!-- == Documentation Tasks                                             == -->
  <!-- ===================================================================== -->

  <!-- == Generate JUnit Docs ============================================== -->
  <target name="generateJUnitDocs">
    <mkdir dir="${folder.stage.doc.junit.report}"/>
    <junitreport todir="${folder.stage.doc.junit.report}">
      <fileset dir="${folder.stage.doc.junit.xml}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${folder.stage.doc.junit.report}"/>
      <report format="noframes" todir="${folder.stage.doc.junit.report}"/>
    </junitreport>
  </target>

  <!-- == Generate API Docs ================================================ -->
  <target name="generateAPIDocs">
    <mkdir dir="${folder.stage.doc.api}"/>
    <javadoc sourcepath="${folder.stage.src.main}"
             packagenames="**/**"
             destdir="${folder.stage.doc.api}"
             author="true"/>
  </target>

  <!-- == Generate TO DO Docs ============================================== -->
  <target name="generateTodoDocs">
    <mkdir dir="${folder.stage.doc.todo}"/>
    <taskdef
       name="document"
       classname="xdoclet.modules.doc.DocumentDocletTask"
       classpathref="path.dependency.xdoclet"
    />
    <document destdir="${folder.stage.doc.todo}">
      <fileset dir="${folder.stage.src.main}">
        <include name="**/*.java"/>
      </fileset>
      <fileset dir="${folder.stage.src.test}">
        <include name="**/*.java"/>
      </fileset>
      <info header="TODO List" projectname="${jspider.version.string}" tag="todo"/>
    </document>
  </target>

  <!-- == Generate Full Docs =============================================== -->
  <target name="generateFullDocs"
          depends="generateAPIDocs,generateJUnitDocs,generateTodoDocs">
  </target>



    <!-- == CLOVER TEST COVERAGE REPORTING =================================== -->
    <target name="cloverInit">
        <property name="clover.running" value="true"/>
        <property name="clover.initstring" location="demo_coverage.db"/>
        <property name="build.compiler" value="org.apache.tools.ant.taskdefs.CloverCompilerAdapter"/>
    </target>
    <target name="cloverReport" depends="cloverInit">
        <java classname="com.cortexeb.tools.clover.reporters.html.HtmlReporter" fork="yes">
            <arg line="--outputdir clover_html --initstring ${clover.initstring} --title 'clover report'"/>
            <classpath refid="path.dependency.clover"/>
       </java>
    </target>
    <target name="buildSimpleWithClover" depends="clean,cloverInit, buildSimple, cloverReport">
    </target>

</project>
