# Author: Ari Rabkin (asrabkin@gmail.com)
# name=logconfdep-dlog

.include "I.dom"
.include "H.dom"
.include "V.dom"
.include "U.dom"
.include "UV.dom"
.include "Z.dom"
.include "K.dom"
.include "StrConst.dom"
.include "Opt.dom"

.bddvarorder I0xStrConst0_Opt0_H0_K0_Z0_V0_V1_U0_UV0

#  WE'RE ONLY HANDLING LOCAL CONTROL DEPENDENCE
#    There's also load-dependence, where a log statement depends on its container
# class being loaded.  Can find container class easily. Find options that potentially
# affect variables of that type. Use that to find load dependence.
#
#  Also standard interprocedural control-flow dependence. Maybe use RHS solver to 
#  catch these cases?
#


logStmt(i:I) input
logVHolds(i:I, cmpt:V, z:K) input
logVHoldsU(i:I, cmpt:U, z:K) input


#cOnLine(i:I, h:H, cst:StrConst) input

#refFlow(v:V,site:Opt) input
#primFlow(u:U,site:Opt) input

refCdep(v:V,site:Opt) input
primCdep(u:U,site:Opt) input


primRefDep(u:UV,v:V) input
primControlDep(i:I,u:UV) input 
UVU(uv:UV,u:U) input
UVV(uv:UV,v:V) input

IinvkArg(i:I0,n:Z0,v:V1) input
IinvkPrimArg(i:I0,n:Z0,u:U0) input

dependentLogStmt(i:I,u:UV) 
uvConf(uv:UV,src:Opt)
logArg(i:I, cmpt:V, z:K)

logFieldDataDep(logStmt:I0, fld:K, src:Opt) output
logConfDep(logStmt:I0, src:Opt) output

reachableI(i:I) input
RlogStmt(i:I) output

RlogStmt(i) :- logStmt(i),reachableI(i).

logArg(i,v,z) :- logVHolds(i,v,z),RlogStmt(i).
logPrimArg(i,z,u) :- logVHoldsU(i,u,z),RlogStmt(i).

dependentLogStmt(logStmt,uv) :- RlogStmt(logStmt),primControlDep(logStmt,uv).
uvConf(uv,src) :- UVU(uv,u),primCdep(u,src).
uvConf(uv,src) :- primRefDep(uv,v),refCdep(v,src).

logConfDep(logStmt, src) :-  dependentLogStmt(logStmt,uv),uvConf(uv, src).

logFieldDataDep(i,z,src) :- logArg(i,v,z),refCdep(v,src).
logFieldDataDep(i,z,src) :- logPrimArg(i,z,u),primCdep(u,src).