# Copyright (c) 2008-2010, Intel Corporation.
# Copyright (c) 2006-2007, The Trustees of Stanford University.
# All rights reserved.
# Licensed under the terms of the New BSD License.

# Context-insensitive may-alias/call-graph analysis.

# Author: Mayur Naik (mhn@cs.stanford.edu)
# Modified by Ariel Rabkin (asrabkin@cs.berkeley.edu)
# name=cipa-0cfa-arr-dlog

.include "T.dom"
.include "F.dom"
.include "M.dom"
.include "I.dom"
.include "H.dom"
.include "V.dom"
.include "Z.dom"

.bddvarorder I0xM0xM1_T0_V0xV1_T1_H0_F0_H1_Z0

###
# Relations
###

VT(v:V0,t:T0) input
HT(h:H0,t:T1) input
cha(n:M1,t:T1,m:M0) input
sub(t1:T1,t2:T0) input
MmethArg(m:M0,n:Z0,v:V0) input
MmethRet(m:M0,n:Z0,v:V1) input
IinvkArg0(i:I0,v:V1) input
IinvkArg(i:I0,n:Z0,v:V1) input
IinvkRet(i:I0,n:Z0,v:V0) input
MI(m:M,i:I) input
MH(m:M,h:H) input
statIM(i:I,m:M) input
specIM(i:I,m:M) input
virtIM(i:I,m:M) input
instM(m:M) input
MobjValAsgnInst(m:M0,l:V0,h:H0) input
MobjVarAsgnInst(m:M0,l:V0,r:V1) input
MgetInstFldInst(m:M0,l:V0,b:V1,f:F0) input
MputInstFldInst(m:M0,b:V0,f:F0,r:V1) input
MgetStatFldInst(m:M0,l:V0,f:F0) input
MputStatFldInst(m:M0,f:F0,r:V) input
clsForNameIT(i:I0,t:T0) input
objNewInstIH(i:I0,h:H0) input
objNewInstIM(i:I0,m:M0) input
conNewInstIH(i:I0,h:H0) input
conNewInstIM(i:I0,m:M0) input
aryNewInstIH(i:I0,h:H0) input
classT(t:T) input
staticTM(t:T,m:M) input
staticTF(t:T,f:F) input
clinitTM(t:T,m:M) input

clsTH(t:T0,h:H0) input
externalThis(v:V) input

IHM(i:I,h:H,m:M)
VV(v1:V,v2:V) output
specIMV(i:I,m:M,v:V)
objValAsgnInst(l:V,h:H) output
objVarAsgnInst(l:V,r:V) output
getInstFldInst(l:V,b:V,f:F) output
putInstFldInst(b:V,f:F,r:V) output
getStatFldInst(l:V,f:F) output
putStatFldInst(f:F,r:V) output

reachableT(t:T) output
VHfilter(v:V,h:H) output
VH(v:V,h:H) output
FH(f:F,h:H) output
HFH(h1:H,f:F,h2:H) output
rootM(m:M) output
reachableI(i:I) output
reachableM(m:M) output
IM(i:I,m:M) output
MM(m:M,n:M) output

### Handle unresolved calls

scopeExcludedM(m:M) input

MMx(m:M,n:M) output
unresolvedInvk(i:I) output
badCalls(i:I,m:M) output
IMplus(i:I,m:M) output

## Entrypoints and threads

resolveRPC(interfacem:M,concretem:M,t:T) input
MentryPoints(m:M) input
externalArg(v:V) output
newThread(ctor:I, tRun:M,v:V)  input
TFT(t:T0,f:F,t2:T1) input
startedRunnable(h:H,tRun:M)  

### Misc enhancements

McheckCastInst(m:M,l:V,t:T,r:V) input
checkCastInst(l:V,t:T,r:V) output

#### Collection-tracking relations
IRetrieve(i:I,o:V,c:V) input
IInsert(i:I,c:V,o:V) input
INewColl(i:I,c:V,o:V) input

collHolds(c:H, o:H) output
collHoldsV(c:V, o:H) output

RIRetrieve(o:V,c:V) output
RIInsert(c:V,o:V) output
RINewColl(c:V,o:V) output
#emptyColl(v:V)
#undefV(v:V) output

#debugging
#insertM(m:M) output
#retrieveM(m:M) output
putsInto(v:V, collH:H) output
reachableHT(h:H,t:T) output

###### End of declarations


########
# Constraints
###

VHfilter(v,h) :- VT(v,t), HT(h,s), sub(s,t).
VHfilter(_,0).

IHM(i,h,m2) :- virtIM(i,m1), HT(h,t), cha(m1,t,m2).

# base cases: each root method and each class initializer is reachable
reachableM(0).
reachableM(m) :- reachableT(t), clinitTM(t,m).
# inductive case
reachableM(m) :- IM(_,m).

reachableI(i) :- MI(m,i), reachableM(m).

# possibly-multiple-target call sites
IM(i,m) :- reachableI(i), IinvkArg0(i,v), VH(v,h), IHM(i,h,m).
# definitely-single-target call sites
specIMV(i,m,v) :- specIM(i,m), IinvkArg0(i,v).

IM(i,m) :- reachableI(i), specIMV(i,m,v), VH(v,_).
IM(i,m) :- reachableI(i), statIM(i,m).

# arguments and return/throw variables
VV(v,u) :- IinvkArg(i,z,u), IM(i,m), MmethArg(m,z,v).
VV(u,v) :- IinvkRet(i,z,u), IM(i,m), MmethRet(m,z,v).

VH(u,h) :- VV(u,v), VH(v,h), VHfilter(u,h).

objValAsgnInst(l,h)   :- reachableM(m), MobjValAsgnInst(m,l,h).
objVarAsgnInst(l,r)   :- reachableM(m), MobjVarAsgnInst(m,l,r).
getInstFldInst(l,b,f) :- reachableM(m), MgetInstFldInst(m,l,b,f).
putInstFldInst(b,f,r) :- reachableM(m), MputInstFldInst(m,b,f,r).
getStatFldInst(l,f)   :- reachableM(m), MgetStatFldInst(m,l,f).
putStatFldInst(f,r)   :- reachableM(m), MputStatFldInst(m,f,r).

reachableT(t) :- reachableI(i), conNewInstIH(i,h), HT(h,t).
reachableT(t) :- reachableI(i), objNewInstIH(i,h), HT(h,t).
reachableT(t) :- reachableI(i), clsForNameIT(i,t).

reachableM(m) :- reachableI(i), objNewInstIM(i,m).
reachableM(m) :- reachableI(i), conNewInstIM(i,m).

VH(v,h)  :- reachableI(i), objNewInstIM(i,m), MmethArg(m,0,v), objNewInstIH(i,h).
VH(v,h)  :- reachableI(i), objNewInstIH(i,h), IinvkRet(i,0,v).
VH(v,h2) :- reachableI(i), conNewInstIM(i,m), IinvkArg(i,1,u), MmethArg(m,1,v), VH(u,h), HFH(h,0,h2).
VH(v,h)  :- reachableI(i), conNewInstIM(i,m), MmethArg(m,0,v), conNewInstIH(i,h).
VH(v,h)  :- reachableI(i), conNewInstIH(i,h), IinvkRet(i,0,v).
VH(v,h)  :- reachableI(i), aryNewInstIH(i,h), IinvkRet(i,0,v).

VH(l,h) :- objValAsgnInst(l,h).
VH(l,h) :- objVarAsgnInst(l,r), VH(r,h), VHfilter(l,h).
VH(l,h2) :- getInstFldInst(l,b,f), VH(b,h1), HFH(h1,f,h2). split
HFH(h1,f,h2) :- putInstFldInst(b,f,r), VH(b,h1), VH(r,h2). split
VH(l,h) :- getStatFldInst(l,f), FH(f,h).
FH(f,h) :- putStatFldInst(f,r), VH(r,h).

## See: http://java.sun.com/docs/books/jls/second_edition/html/execution.doc.html
## Section 12.4 Initialization of Classes and Interfaces
## A class or interface type T will be initialized immediately before
## the first occurrence of any one of the following:

# 1. T is a class and an instance of T is created.
# this handles both normal allocation and reflective allocation
reachableT(t) :- objValAsgnInst(_,h), HT(h,t).
# 2. T is a class and a static method declared by T is invoked
reachableT(t) :- reachableM(m), staticTM(t,m).
# 3. A static field declared by T is assigned. 
reachableT(t) :- putStatFldInst(f,_), staticTF(t,f).
# 4. A static field declared by T is used and the reference to the
#    field is not a compile-time constant.
reachableT(t) :- getStatFldInst(_,f), staticTF(t,f).
# 5. Before a class is initialized, its direct superclass must be
#    initialized.
reachableT(t) :- classT(t), reachableT(s), sub(s,t).

rootM(0).
rootM(m) :- reachableT(t), clinitTM(t,m).
rootM(m) :- MentryPoints(m).
MM(m,n) :- IM(i,n), MI(m,i).


### Extended call graph for unresolved calls

unresolvedInvk(i) :- reachableI(i),!IM(i,_).
badCalls(i,m) :- unresolvedInvk(i),virtIM(i,m).
MMx(m,n) :- MM(m,n).
MMx(m,n) :- badCalls(i,n),MI(m,i).

### Thread modeling

## Still needed with the new StubRewrite mechanism --
  #many calls will start runnables, not just new Thread()
startedRunnable(h,tRun) :- reachableI(i),newThread(i,tRun,v), VH(v,h).
VH(arg,h) :- MmethArg(tRun, 0, arg),startedRunnable(h,tRun).
reachableM(tRun) :- startedRunnable(_,tRun).

### Extra entry points

IM(i,m2) :- reachableI(i),virtIM(i,m),resolveRPC(m,m2,_).
VH(v,h) :- MmethArg(m,0,v),resolveRPC(_,m,t),clsTH(t,h).

#should we only do this for instance methods?  [instM(m)]
retI(i) :- IRetrieve(i,_,_).
exclCall(i) :- IM(i,m),scopeExcludedM(m),!retI(i).
externalArg(v) :- MmethArg(m,_,v),MentryPoints(m).
externalArg(v) :- IinvkRet(i,_,v),exclCall(i).
nonThisExtArg(v) :- externalArg(v),!externalThis(v).

#fields of external args point to external args
HFH(h1,f,h2) :- clsTH(t,h1),TFT(t,f,t2),sub(t3,t2),clsTH(t3,h2).

#POTENTIALLY DANGEROUS: if v is a reference to object, then sets v to point to everything.
VH(v,h) :- nonThisExtArg(v),VT(v,t),clsTH(t2,h),sub(t2,t).
VH(v,h) :- externalThis(v),VT(v,t),clsTH(t,h).

#Be more aggressive with this-es
reachableHT(h,t) :- HT(h,t),reachableM(m),MH(m,h).
VH(v,h) :- externalThis(v),VT(v,t),reachableHT(h,t).



reachableM(m) :- MentryPoints(m).



#### Collection-tracking relations


RIRetrieve(o,c) :- reachableI(i),IRetrieve(i,o,c).
RIInsert(c,o) :- reachableI(i),IInsert(i,c,o).
RINewColl(c1,c2) :- reachableI(i),INewColl(i,c1,c2).

#if v is being inserted into collection at collH
putsInto(v, collH) :- RIInsert(cv,v),VH(cv,collH).

collHolds(ch,oh) :- putsInto(v, ch),VH(v,oh). 
external(h) :- clsTH(_,h).
#collHoldsV(cv,oh) :- RIInsert(cv,o),VH(o,oh),!external(oh). 

collHoldsV(cv,oh) :- collHolds(ch,oh),VH(cv,ch).
#just commenting out the below as a test
#collHolds(ch,oh) :- collHoldsV(cv,oh),VH(cv,ch).
collHoldsV(c2v,oh) :- collHoldsV(cv,oh),RINewColl(c2v,cv).

#VH(v,oh) :- collHoldsV(cv,oh),RIRetrieve(v,cv),VHfilter(v,oh). 

#try to set return from empty collection to the hypothetical of the class?
# Somehow this doesn't stratify right.


### Misc enhancements

checkCastInst(l,t,r)   :- reachableM(m), McheckCastInst(m,l,t,r).

IMplus(i,m) :- IM(i,m).
IMplus(i,m) :- objNewInstIM(i,m).
IMplus(i,m) :- conNewInstIM(i,m).


## debugging
#insertM(m) :- IInsert(i,_,_),IM(i,m).
#retrieveM(m) :- IRetrieve(i,_,_),IM(i,m).

