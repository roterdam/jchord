***** SEED: <<main:([Ljava/lang/String;)V@T, null>, g2:I@T>
***** SLICE:
	0!main:([Ljava/lang/String;)V@T (T.java:5) [<A T8> = new A] <-- fp
	3!main:([Ljava/lang/String;)V@T (T.java:5) [T9 = T8] <-- fp
	4!main:([Ljava/lang/String;)V@T (T.java:5) [<init> ()V(<A T9>)] <-- fp
	8!main:([Ljava/lang/String;)V@T (T.java:6) [<A T10> = new A]
	11!main:([Ljava/lang/String;)V@T (T.java:6) [T11 = T10]
	12!main:([Ljava/lang/String;)V@T (T.java:6) [<init> ()V(<A T11>)]
	15!main:([Ljava/lang/String;)V@T (T.java:6) [R4 = T10]
	24!main:([Ljava/lang/String;)V@T (T.java:8) [<int T13> = <A R4>.f:I@A]
	27!main:([Ljava/lang/String;)V@T (T.java:8) [g2:I@T = <int T13>]
	6!<init>:()V@A (T.java:15) [<A R0>.f:I@A = IConst: 5]

false negatives:
1: INVOKESTATIC_V <init>:()V@java.lang.Object, (R0)

=====

*** Class: T
Method: main:([Ljava/lang/String;)V@T
	0#1
	3#2
	4#3
	7#4
	8#5
	11#6
	12#7
	15#8
	17#9
	20#10
	24#11
	27#12
	30#13
Control flow graph for main:([Ljava/lang/String;)V@T:
BB0 (ENTRY)	(in: <none>, out: BB2)

BB2	(in: BB0 (ENTRY), out: BB1 (EXIT))
1: NEW T8, A
2: MOVE_A T9, T8
3: INVOKESTATIC_V <init>:()V@A, (T9)
4: MOVE_A R3, T8
5: NEW T10, A
6: MOVE_A T11, T10
7: INVOKESTATIC_V <init>:()V@A, (T11)
8: MOVE_A R4, T10
9: GETFIELD_I T12, R3, .f
10: PUTSTATIC_I T12, .g1
11: GETFIELD_I T13, R4, .f
12: PUTSTATIC_I T13, .g2
13: RETURN_V

BB1 (EXIT)	(in: BB2, out: <none>)

Exception handlers: []
Register factory: Registers: 14
*** Class: A
Method: <init>:()V@A
	1#1
	6#2
	9#3
Control flow graph for <init>:()V@A:
BB0 (ENTRY)	(in: <none>, out: BB2)

BB2	(in: BB0 (ENTRY), out: BB1 (EXIT))
1: INVOKESTATIC_V <init>:()V@java.lang.Object, (R0)
2: PUTFIELD_I R0, .f, IConst: 5
3: RETURN_V

BB1 (EXIT)	(in: BB2, out: <none>)

Exception handlers: []
Register factory: Registers: 1
