// SetFactory.java, created Tue Oct 19 22:22:44 1999 by pnkfelix
// Copyright (C) 1999 Felix S. Klock II <pnkfelix@mit.edu>
// Licensed under the terms of the GNU GPL; see COPYING for details.
package jwutil.collections;

import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;

/**
 * <code>SetFactory</code> is a <code>Set</code> generator.
 * Subclasses should implement constructions of specific types of
 * <code>Set</code>s.
 * 
 * @author  Felix S. Klock II <pnkfelix@mit.edu>
 * @version $Id: SetFactory.java,v 1.2 2005/04/29 02:32:24 joewhaley Exp $
 */
public abstract class SetFactory extends CollectionFactory {
    
    /** A <code>SetFactory</code> that generates <code>HashSet</code>s. */
    public static final SetFactory hashSetFactory = new SerialSetFactory() {
        /**
         * Version ID for serialization.
         */
        private static final long serialVersionUID = 3689347719475246897L;
        
        public Set makeSet(Collection c) {
            return new HashSet(c);
        }
        public Set makeSet(int i) {
            return new HashSet(i);
        }
    };
    
    /** A <code>SetFactory</code> that generates
        <code>LinearSet</code>s backed by <code>ArrayList</code>s. */
    public static final SetFactory linearSetFactory = new SerialSetFactory() {
        /**
         * Version ID for serialization.
         */
        private static final long serialVersionUID = 3258688814758245937L;
        
        public Set makeSet(Collection c) {
            Set ls;
            if (c instanceof Set) {
                ls = new LinearSet((Set)c);
            } else {
                ls = new LinearSet(c.size());
                ls.addAll(c);
            }
            return ls;
        }
        public Set makeSet(int i) {
            return new LinearSet(i);
        }
    };

    /** A <code>SetFactory</code> that generates <code>TreeSet</code>s. */
    public static final SetFactory treeSetFactory = new SerialSetFactory() {
        /**
         * Version ID for serialization.
         */
        private static final long serialVersionUID = 3257008752384423731L;

        public Set makeSet(Collection c) {
            return new TreeSet(c);
        }
    };
    
    /** Creates a <code>SetFactory</code>. */
    public SetFactory() {
        super();
    }
    
    /* (non-Javadoc)
     * @see jwutil.collections.CollectionFactory#makeCollection(java.util.Collection)
     */
    public final Collection makeCollection(Collection c) {
        return makeSet(c);
    }

    /* (non-Javadoc)
     * @see jwutil.collections.CollectionFactory#makeCollection(int)
     */
    public final Collection makeCollection(int initCapacity) {
        return makeSet(initCapacity);
    }

    /** Returns a <code>SetFactory</code> that generates synchronized
        (thread-safe) <code>Set</code>s.  The <code>Set</code>s
        generated are backed by the <code>Set</code>s generated by
        <code>sf</code>. 
        @see java.util.Collections#synchronizedSet(java.util.Set)
    */
    public static SetFactory synchronizedSetFactory(final SetFactory sf) {
        return new SerialSetFactory() {
            /**
             * Version ID for serialization.
             */
            private static final long serialVersionUID = 3257286950267402040L;

            public java.util.Set makeSet(Collection c) {
                return Collections.synchronizedSet(sf.makeSet(c));
            }
        };
    }

    /** Generates a new, mutable, empty <code>Set</code>. */
    public final java.util.Set makeSet() {
        return makeSet(Collections.EMPTY_SET);
    }

    /** Generates a new, mutable, empty <code>Set</code>, using
        <code>initialCapacity</code> as a hint to use for the capacity
        for the produced <code>Set</code>. */
    public java.util.Set makeSet(int initialCapacity) {
        return makeSet();
    }

    /** Generates a new mutable <code>Set</code>, using the elements
        of <code>c</code> as a template for its initial contents. 
    */ 
    public abstract Set makeSet(Collection c);
    
    // private classes to add java.io.Serializable to *Factories.
    // if we could make anonymous types w/ multiple inheritance, we wouldn't
    // need these.
    private abstract static class SerialSetFactory
        extends SetFactory implements java.io.Serializable { }
}
