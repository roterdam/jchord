// LinearSet.java, created Wed Aug  4 12:03:54 1999 by pnkfelix
// Copyright (C) 1999 Felix S. Klock II <pnkfelix@mit.edu>
// Licensed under the terms of the GNU GPL; see COPYING for details.
package jwutil.collections;

import java.util.AbstractSet;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

/**
 * <code>LinearSet</code> is a simplistic light-weight
 * <code>Set</code> designed for use when the number of entries is
 * small.  It is backed by a <code>List</code>.
 * 
 * @author  Felix S. Klock II <pnkfelix@mit.edu>
 * @version $Id: LinearSet.java,v 1.2 2005/04/29 02:32:24 joewhaley Exp $
 */
public class LinearSet extends AbstractSet implements Cloneable,
                                                      java.io.Serializable {
    /**
     * Version ID for serialization.
     */
    private static final long serialVersionUID = 3256443586294919225L;
    
    private List list;
    private ListFactory lf;

    /** Creates a <code>LinearSet</code>. Uses an
        <code>ArrayList</code> as the backing store.*/
    public LinearSet() {
        this(ListFactory.arrayListFactory);
    }

    /** Creates a <code>LinearSet</code> with given capacity. 
        Uses an <code>ArrayList</code> as the backing store.
     */
    public LinearSet(final int capacity) {
        this(ListFactory.arrayListFactory, capacity);
    }

    /** Creates a <code>LinearSet</code>, filling it with the elements
        of <code>set</code>.  Uses an <code>ArrayList</code> as the
        backing store.
    */
    public LinearSet(final Set set) {
        this(ListFactory.arrayListFactory, set);
    }

    /** Creates an empty <code>LinearSet</code>, using a
        <code>List</code> generated by <code>lf</code> as the backing
        store.  
    */
    public LinearSet(final ListFactory lf) {
        list = lf.makeList();
        this.lf = lf;
    }

    /** Creates an empty <code>LinearSet</code> with a given capacity,
        using a <code>List</code> generated by <code>lf</code> as the
        backing store.  
    */
    public LinearSet(final ListFactory lf, int capacity) {
        list = lf.makeList(capacity);
        this.lf = lf;
    }

    /** Creates an empty <code>LinearSet</code>, using a
        <code>List</code> generated by <code>lf</code> as the backing
        store, and fills it with the elements of <code>set</code>.
    */
    public LinearSet(final ListFactory lf, final Set set) {
        list = lf.makeList(set);
        this.lf = lf;
    }

    LinearSet(ListFactory lf, List list) {
        this.list = list;
        this.lf = lf;
    }
    
    public Iterator iterator() {
        return list.iterator();
    }

    public int size() {
        return list.size();
    }

    public boolean add(Object o) {
        if (list.contains(o)) {
            return false;
        } else {
            list.add(o);
            return true;
        }
    }

    public boolean addAll(Collection c) {
        HashSet s = new HashSet(this.size() + c.size());
        s.addAll(this);
        boolean r = s.addAll(c);
        this.list = lf.makeList(s);
        return r;
    }

    public boolean remove(Object o) {
        int index = list.indexOf(o);
        if (index == -1) {
            return false;
        } else {
            list.remove(index);
            return true;
        }
    }
    
    public void clear() {
        list.clear();
    }

    public Object get(Object o) {
        int index = list.indexOf(o);
        if (index == -1) {
            return null;
            //throw new NoSuchElementException(o);
        }
        return list.get(index);
    }
    
    public Object clone() {
        try{
            LinearSet newset = (LinearSet) super.clone();
            newset.list = lf.makeList(list);
            return newset;
        } catch(CloneNotSupportedException e) {
            throw new InternalError();
        }
    }
}
