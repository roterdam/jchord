# Author: Ravi Mangal, Xin Zhang
# name=typestate-dlog

.include "I.dom"
.include "M.dom"
.include "P.dom"
.include "V.dom"
.include "Z.dom"
.include "H.dom"
.include "MS.dom"
.include "K.dom"
.include "F.dom"

.bddvarorder P0xP1_I0xM0_V0xV1xV2_H0xH1xH2_F0_Z0xZ1_MS0xMS1xMS2xMS3_K0xK1

###
# Relations
###

PP(p:P,q:P) input
PI(p:P,i:I) input
IM(i:I,m:M) input
PobjValAsgnInst(p:P,v:V,h:H) input
PobjVarAsgnInst(p:P,v:V,u:V) input
MPhead(m:M,p:P) input
rootM(m:M) input
PobjNullAsgnInst(p:P,v:V) input
PgetInstFldInst(p:P,v:V,u:V,f:F) input
PgetStatFldInst(p:P,v:V,f:F) input
MmethArg(m:M0,n:Z0,v:V0) input
IinvkArg(i:I0,n:Z0,v:V1) input
MP(m:M,p:P) input
MPtail(m:M,p:P) input
IinvkRet(i:I0,n:Z0,v:V0) input
MmethRet(m:M0,n:Z0,v:V1) input
MZfirst(m:M,z:Z) input
MZlast(m:M,z:Z) input
MZZ(m:M,z:Z,z:Z) input
MK(m:M,k:K) input
gen(ms1:MS,v:V,ms2:MS) input 		#ms2 = ms1+v
kill(ms1:MS,v:V,ms2:MS) input 		#ms2 = ms1-v
contain(v:V,ms:MS) input
virtIM(i:I,m:M) input
specIM(i:I,m:M) input
PobjRetInst(p:P,v:V) input
checkExcludedH(h:H) input
checkExcludedI(i:I) input
VH(v:V, h:H) input
reachableM(m:M) input
trackedH(h:H) input

allow(v:V) input
deny(v:V) input

path(p:P,h1:H,ms1:MS,h2:H,ms2:MS,k:K) output #k=0 implies that return var is in must set
summary(m:M,h:H,ms1:MS,h2:H,k:K) output
pathArg(p:P,z:Z,m:M,ms1:MS,ms2:MS) output
#VVMZ(v:V,u:V,m:M,z:Z)
#VVMZRet(v:V,u:V,m:M)
PInvkInst(p:P,m:M,v:V,u:V,z:Z)
PInvkRetInst(p:P,m:M,v:V,u:V)
PInvkRetInstFilter(p:P,m:M)
PInvkRetInstNotFilter(p:P,m:M)
nonRelevantP(p:P) output
relevantP(p:P) output
pathArgInit(p:P,ms1:MS,h:H)
pathArgLast(p:P,m:M,ms1:MS,ms2:MS)
PInvkSkip(p:P)
IMFilter(i:I)

unprovenQuery(p:P,h:H) output


###
# Constraints
###
## Assuming throughout that no instruction will be processed
## after a return instruction for any path edge.

#VVMZ(v,u,m,z) :- IinvkArg(i,z,u), IM(i,m),  MmethArg(m,z,v).
#VVMZRet(v,u,m) :- IinvkRet(i,z,v), IM(i,m),  MmethRet(m,z,u).
PInvkInst(p,m,v,u,z) :- PI(p,i), IM(i,m), IinvkArg(i,z,u), MmethArg(m,z,v).
PInvkRetInst(p,m,v,u) :- PI(p,i), IM(i,m), IinvkRet(i,z,v), MmethRet(m,z,u).
PInvkRetInstFilter(p,m) :- PInvkRetInst(p,m,_,_).
PInvkRetInstNotFilter(p,m) :- !PInvkRetInstFilter(p,m).
IMFilter(i) :- IM(i,_).
PInvkSkip(p) :- PI(p,i), !IMFilter(i).

#path(p,0,0,0,0,0) :- rootM(m), MPhead(m,p).
#path(p,0,0,0,0,0) :- path(q,0,0,0,0,0,0), PP(q,p).
#path(p,0,0,0,0,0) :- reachableM(m), MP(m,p).
#path(p,0,0,0,0,0) :- reachableM(m), MPtail(m,p).

path(p,0,0,0,0,0) :- reachableM(m), MPhead(m,p).

### v = new h
path(p,0,0,h,ms,0) :- PobjValAsgnInst(p,v,h), PP(q,p), path(q,0,0,0,0,0), allow(v), gen(0,v,ms), trackedH(h).split
path(p,0,0,h,0,0) :- PobjValAsgnInst(p,v,h), PP(q,p), path(q,0,0,0,0,0), deny(v), trackedH(h).split
path(p,h1,ms1,h2,ms3,0) :- PobjValAsgnInst(p,v,_), PP(q,p), path(q,h1,ms1,h2,ms2,0), contain(v,ms2), kill(ms2,v,ms3).split
path(p,h1,ms1,h2,ms2,0) :- PobjValAsgnInst(p,v,_), PP(q,p), path(q,h1,ms1,h2,ms2,0), !contain(v,ms2).split

### v = u
path(p,h1,ms1,h2,ms3,0) :- PobjVarAsgnInst(p,v,u), PP(q,p), path(q,h1,ms1,h2,ms2,0), !contain(u,ms2), contain(v,ms2), kill(ms2,v,ms3).split
path(p,h1,ms1,h2,ms2,0) :- PobjVarAsgnInst(p,v,u), PP(q,p), path(q,h1,ms1,h2,ms2,0), !contain(u,ms2), !contain(v,ms2).split
path(p,h1,ms1,h2,ms2,0) :- PobjVarAsgnInst(p,v,u), PP(q,p), path(q,h1,ms1,h2,ms2,0), contain(u,ms2), deny(v).split
path(p,h1,ms1,h2,ms3,0) :- PobjVarAsgnInst(p,v,u), PP(q,p), path(q,h1,ms1,h2,ms2,0), contain(u,ms2), allow(v), gen(ms2,v,ms3).split

### v = null
path(p,h1,ms1,h2,ms3,0) :- PobjNullAsgnInst(p,v), PP(q,p), path(q,h1,ms1,h2,ms2,0), contain(v,ms2), kill(ms2,v,ms3).split
path(p,h1,ms1,h2,ms2,0) :- PobjNullAsgnInst(p,v), PP(q,p), path(q,h1,ms1,h2,ms2,0), !contain(v,ms2).split

### v = u.f
path(p,h1,ms1,h2,ms3,0) :- PgetInstFldInst(p,v,_,_), PP(q,p), path(q,h1,ms1,h2,ms2,0), contain(v,ms2), kill(ms2,v,ms3).split
path(p,h1,ms1,h2,ms2,0) :- PgetInstFldInst(p,v,_,_), PP(q,p), path(q,h1,ms1,h2,ms2,0), !contain(v,ms2).split

### v = f
path(p,h1,ms1,h2,ms3,0) :- PgetStatFldInst(p,v,_), PP(q,p), path(q,h1,ms1,h2,ms2,0), contain(v,ms2), kill(ms2,v,ms3).split
path(p,h1,ms1,h2,ms2,0) :- PgetStatFldInst(p,v,_), PP(q,p), path(q,h1,ms1,h2,ms2,0), !contain(v,ms2).split

### Method Call
pathArgInit(q,ms1,h1) :- PInvkInst(p,m,_,_,z), MZfirst(m,z), PP(q,p), path(q,_,_,h1,ms1,_).split
pathArg(q,z,m,ms2,ms3) :- PInvkInst(p,m,v,u,z), PP(q,p), MZfirst(m,z), path(q,_,_,_,ms2,_), contain(u,ms2), \
									allow(v), gen(0,v,ms3).split
pathArg(q,z,m,ms2,0) :- PInvkInst(p,m,v,u,z), PP(q,p), MZfirst(m,z), path(q,_,_,_,ms2,_), contain(u,ms2), deny(v).split
pathArg(q,z,m,ms2,0) :- PInvkInst(p,m,_,u,z), PP(q,p), MZfirst(m,z), path(q,_,_,_,ms2,_), !contain(u,ms2).split

pathArg(q,z2,m,ms2,ms4) :- PInvkInst(p,m,v,u,z2), PP(q,p), MZZ(m,z1,z2), pathArg(q,z1,m,ms2,ms3), \
								 	 contain(u,ms2), allow(v), gen(ms3,v,ms4).split
pathArg(q,z2,m,ms2,ms3) :- PInvkInst(p,m,v,u,z2), PP(q,p), MZZ(m,z1,z2), pathArg(q,z1,m,ms2,ms3), \
								 	 contain(u,ms2), deny(v).split
pathArg(q,z2,m,ms2,ms3) :- PInvkInst(p,m,_,u,z2), PP(q,p), MZZ(m,z1,z2), pathArg(q,z1,m,ms2,ms3), \
								 	 !contain(u,ms2).split

pathArgLast(q,m,ms1,ms2) :- pathArg(q,z,m,ms1,ms2), MZlast(m,z).

path(p,h1,ms2,h2,ms3,0) :- pathArgLast(q,m,ms1,ms2), pathArgInit(q,ms1,h1), MPhead(m,p), ms2=ms3, h1=h2.split


# To handle corner case of static method with no reference parameters
pathArgInit(q,ms1,h1) :- PI(p,i), IM(i,m), PP(q,p), MK(m,k), k=0, path(q,_,_,h1,ms1,_).split
pathArgLast(q,m,ms1,0) :- PI(p,i), IM(i,m), PP(q,p), MK(m,k), k=0, path(q,_,_,_,ms1,_).split
#path(p,h1,0,h2,0,0,0) :- PI(p,i), IM(i,m), PP(q,p), MK(m,k), k=0, path(q,_,_,h1,_,_), MPhead(m,p), h1=h2.split

# To handle corner case of invoke instruction with no target method
path(p,h1,ms2,h2,ms3,0) :- PInvkSkip(p), PP(q,p), path(q,h1,ms2,h2,ms3,0).split

#Applying Summary Edge
path(p,h1,ms1,h3,ms5,0) :- PInvkRetInst(p,m,v,_), PP(q,p), path(q,h1,ms1,h2,ms2,0), pathArgLast(q,m,ms2,ms3),  \
							 summary(m,h2,ms3,h3,0), contain(v,ms2), kill(ms2,v,ms5).split
path(p,h1,ms1,h3,ms2,0) :- PInvkRetInst(p,m,v,_), PP(q,p), path(q,h1,ms1,h2,ms2,0), pathArgLast(q,m,ms2,ms3), \
							 summary(m,h2,ms3,h3,0), !contain(v,ms2).split
path(p,h1,ms1,h3,ms5,0) :- PInvkRetInst(p,m,v,_), PP(q,p), path(q,h1,ms1,h2,ms2,0), pathArgLast(q,m,ms2,ms3), \
							 summary(m,h2,ms3,h3,1), allow(v), gen(ms2,v,ms5).split
path(p,h1,ms1,h3,ms2,0) :- PInvkRetInst(p,m,v,_), PP(q,p), path(q,h1,ms1,h2,ms2,0), pathArgLast(q,m,ms2,ms3), \
							 summary(m,h2,ms3,h3,1), deny(v).split
							 
# To handle corner case of invoke instruction with no return value or with no var capturing the returned value;
# such instructions are not captured by PInvkRetInst
path(p,h1,ms1,h3,ms2,0) :- PI(p,i), IM(i,m), PInvkRetInstNotFilter(p,m), PP(q,p), path(q,h1,ms1,h2,ms2,0), pathArgLast(q,m,ms2,ms3), \
							 summary(m,h2,ms3,h3,_).split

### Method Return
path(p,h1,ms1,h2,ms2,1) :- PobjRetInst(p,v), PP(q,p), path(q,h1,ms1,h2,ms2,0), contain(v,ms2).split
path(p,h1,ms1,h2,ms2,0) :- PobjRetInst(p,v), PP(q,p), path(q,h1,ms1,h2,ms2,0), !contain(v,ms2).split
#path(p,h1,ms1,h2,ms2,r,k) :- path(q,h1,ms1,h2,ms2,r,k), PP(q,p), MPtail(m,p). #Handled by nonRelevantP
summary(m,h1,ms1,h2,k) :- MPtail(m,p), path(p,h1,ms1,h2,_,k).split

### All remaining instructions
relevantP(p) :- PobjValAsgnInst(p,_,_).
relevantP(p) :- PobjVarAsgnInst(p,_,_).
relevantP(p) :- PobjNullAsgnInst(p,_).
relevantP(p) :- PgetInstFldInst(p,_,_,_).
relevantP(p) :- PgetStatFldInst(p,_,_).
relevantP(p) :- PI(p,_).
relevantP(p) :- PobjRetInst(p,_).
relevantP(p) :- MPhead(_,p).

#nonRelevantP(p) :- PP(_,p), !PobjValAsgnInst(p,_,_), !PobjVarAsgnInst(p,_,_), !PobjNullAsgnInst(p,_), !PgetInstFldInst(p,_,_,_), \
#				   !PgetStatFldInst(p,_,_), !PI(p,_), !PobjRetInst(p,_).split
nonRelevantP(p) :- PP(_,p), !relevantP(p).
path(p,h1,ms1,h2,ms2,k) :- nonRelevantP(p), PP(q,p), path(q,h1,ms1,h2,ms2,k).split 


### Query
unprovenQuery(q,h) :- PI(q,i), virtIM(i,_), PP(p,q), path(p,_,_,h,ms,_), IinvkArg(i,0,v), VH(v,h), !contain(v,ms), !checkExcludedI(i).split
#unprovenQuery(q,h) :- PI(q,i), specIM(i,_), PP(p,q), path(p,_,_,h,ms,_), IinvkArg(i,0,v), VH(v,h), !contain(v,ms), !checkExcludedI(i).split