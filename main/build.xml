<?xml version="1.0" encoding="UTF-8"?>
<!--
	Main build file for Chord
-->
<project name="chord" default="compile">

	<!--
	==========================================================================
		DESCRIPTION OF TARGETS
	==========================================================================
	-->

	<target name="help">
		<echo>
		compile   Compile Chord
		run       Run Chord
		          Optional properties: See Chord user guide
		j2h_xref  Convert .java files to .html with cross-references
		          Required properties:
		          - java.dir (dir containing Java source files)
		          - html.dir (dir to dump generated HTML files)
		j2h_fast  Convert .java files to .html without cross-references
		          Required properties:
		          - java.dir (dir containing Java source files)
		          - html.dir (dir to dump generated HTML files)
		solve     Run bddbddb (BDD-based Datalog solver)
		          Required properties:
		          - work.dir   (dir containing input/output BDD files)
		          - dlog.file  (file specifying Datalog program)
		          Optional properties:
		          - max.heap   (default=2048m)
		          - max.tuples (default=1000)
		          - verbose    ([0..6]; default=4)
		debug     Run bddbddb's interactive interpreter
		          Required properties:
		          - work.dir   (dir containing input/output BDD files)
		          - dlog.file  (file specifying Datalog program)
		          Optional properties:
		          - max.heap   (default=2048m)
		          - max.tuples (default=1000)
		          - verbose    ([0..6]; default=4)
		javadoc   Generate javadoc for Chord's Java source code
		htmldoc   Generate HTML user guide (needs hyperlatex)
		pdfdoc    Generate PDF user guide (needs pdflatex)
		clean     Cleanup all generated executable files
		cleandoc  Cleanup all generated javadoc/htmldoc/pdfdoc files
		</echo>
	</target>

	<!--
	==========================================================================
		STATIC AND DYNAMIC PROPERTIES
	==========================================================================
	-->

	<property name="tools.home" location="tools"/>

	<property name="lib.home" location="lib"/>

	<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${tools.home}/ant-contrib.jar"/>

	<!--
		This target does the following things in order:
		1. Loads file build.properties from Chord's main/ directory
		2. Sets property chord.use.buddy if use_buddy=true occurs in that file
		3. Sets property chord.use.jvmti if use_jvmti=true occurs in that file
		4. If either property chord.use.buddy or chord.use.jvmti is set then:
			1. sets property chord.jdk_root to the root of the JDK installation
			2. sets property chord.arch to '-m32' or '-m64'
			3. sets property chord.make to 'make' on Linux and to 'gmake' on
			   non-GNU operation systems
	-->
	<target name="build-props">
		<property file="build.properties"/>
		<fail message="Property chord.use.buddy must not be explicitly set.">
			<condition><isset property="chord.use.buddy"/></condition>
		</fail>
		<fail message="Property chord.use.jvmti must not be explicitly set.">
			<condition><isset property="chord.use.jvmti"/></condition>
		</fail>
		<condition property="chord.use.buddy">
			<equals arg1="${use_buddy}" arg2="true"/>
		</condition>
		<condition property="chord.use.jvmti">
			<equals arg1="${use_jvmti}" arg2="true"/>
		</condition>
		<if><or><isset property="chord.use.buddy"/><isset property="chord.use.jvmti"/></or>
			<then>
				<path id="jdk_root"><pathelement location="${java.home}/.."/></path>
				<pathconvert targetos="unix" property="chord.jdk_root" refid="jdk_root"/>
				<if><equals arg1="${os.name}" arg2="FreeBSD"/>
					<then><property name="chord.make" value="gmake"/></then>
					<else><property name="chord.make" value="make"/></else>
				</if>
				<if><equals arg1="${sun.arch.data.model}" arg2="32"/>
					<then><property name="chord.arch" value="-m32"/></then>
					<else><property name="chord.arch" value="-m64"/></else>
				</if>
			</then>
		</if>
	</target>

	<!--
		This target does the following things in order:
		1. Sets property chord.work.dir to the current directory if not already set.
		2. Checks that the value of property chord.work.dir is an existing directory.
		3. Sets property chord.props.file to "${chord.work.dir}/chord.properties" if
		   not already set.
		4. If the file specified by property chord.props.file exists, then loads all
		   properties defined in the file.  Each relative (as opposed to absolute) path
		   element in the value of any property named chord.<...>.path set in this file
		   is converted to an absolute path element w.r.t. chord.work.dir.
	-->
	<target name="exec-props" depends="build-props">
	<if><isset property="chord.work.dir"/>
		<then>
			<fail message="ERROR: Directory ${chord.work.dir} does not exist.">
				<condition>
					<not><available file="${chord.work.dir}" type="dir"/></not>
				</condition>
			</fail>
		</then>
		<else>
			<property name="chord.work.dir" location="."/>
		</else>
	</if>
	<property name="chord.props.file" location="${chord.work.dir}/chord.properties"/>
	<if><available file="${chord.props.file}"/>
		<then>
			<property file="${chord.props.file}"/>
			<dirname property="chord.props.dir" file="${chord.props.file}"/>
			<propertyselector property="chord.path.prop.list" delimiter=","
				match="chord\..*\.path"/>
			<antfetch antfile="${tools.home}/pathconvert.xml" dir="${chord.props.dir}"
				target="pathconvert" inheritAll="true" return="${chord.path.prop.list}"/>
		</then>
	</if>
	</target>

	<!--
		This target does the following things in order:
		1. Sets property chord.bddbddb.class.path to the classpath of bddbddb.
		2. Sets property chord.java.analysis.path to classes/ if not already set.
		3. Sets property chord.main.class.path to the entire Chord classpath.
	-->
	<target name="paths">
		<!-- Classpath of bddbddb -->
		<path id="bddbddb_class_path">
			<fileset dir="${lib.home}/bddbddb" includes="*.jar"/>
			<pathelement location="${lib.home}/jwutil.jar"/>
		</path>
		<fail message="ERROR: Property chord.bddbddb.class.path must not be explicitly set.">
			<condition><isset property="chord.bddbddb.class.path"/></condition>
		</fail>
		<property name="chord.bddbddb.class.path" refid="bddbddb_class_path"/>
		<!-- Classpath of Chord -->
		<property name="chord.java.analysis.path" location="classes"/>
		<path id="main_class_path">
			<pathelement path="${chord.java.analysis.path}"/>
			<pathelement location="classes"/>
			<pathelement path="${chord.bddbddb.class.path}"/>
			<pathelement location="${lib.home}/trove-2.0.4.jar"/>
			<pathelement location="${lib.home}/scannotation-1.0.2.jar"/>
			<pathelement location="${lib.home}/joeq.jar"/>
			<pathelement location="${lib.home}/javassist.jar"/>
			<pathelement location="${lib.home}/j2h.jar"/>
			<pathelement location="${lib.home}/hj.jar"/>
			<pathelement location="${lib.home}/CnCHj.jar"/>
		</path>
		<fail message="Property chord.main.class.path must not be explicitly set.">
			<condition><isset property="chord.main.class.path"/></condition>
		</fail>
		<property name="chord.main.class.path" refid="main_class_path"/>
	</target>

	<!--
	==========================================================================
		COMPILE CHORD
	==========================================================================
	-->

	<target name="compile" depends="build-props, paths" description="Compile Chord.">
		<if><isset property="chord.use.buddy"/>
			<then>
				<exec executable="${chord.make}" dir="bdd">
					<arg value="JDK_ROOT=${chord.jdk_root}"/>
					<arg value="M32_FLAG=${chord.arch}"/>
				</exec>
			</then>
		</if>
		<if><isset property="chord.use.jvmti"/>
			<then>
				<exec executable="${chord.make}" dir="agent">
					<arg value="JDK_ROOT=${chord.jdk_root}"/>
					<arg value="M32_FLAG=${chord.arch}"/>
				</exec>
			</then>
		</if>
		<mkdir dir="classes"/>
		<javac debug="true" debuglevel="source,lines,vars" includeAntRuntime="false"
			source="1.5" target="1.5" destdir="classes"
			classpathref="main_class_path" srcdir="src"/>
		<jar destfile="${lib.home}/chord_instr_agent.jar">
			<manifest>
				<attribute name="Premain-Class" value="chord.instr.OnlineTransformer"/>
				<attribute name="Boot-Class-Path" value="${chord.main.class.path}"/>
				<attribute name="Can-Retransform-Classes" value="true"/>
			</manifest>
		</jar>
	</target>

	<!--
	==========================================================================
		RUN CHORD
	==========================================================================
	-->

	<target name="run" depends="exec-props, paths" description="Run Chord.">
		<fail message="Property chord.main.dir must not be explicitly set.">
			<condition><isset property="chord.main.dir"/></condition>
		</fail>
		<property name="chord.main.dir" location="."/>
		<property name="chord.max.heap" value="2048m"/>
		<property name="chord.max.stack" value="32m"/>
		<property name="chord.jvmargs"
			value="-ea -Xmx${chord.max.heap} -Xss${chord.max.stack}"/>
		<property name="chord.classic" value="true"/>
		<if>
			<equals arg1="${chord.classic}" arg2="true"/>
			<then>
				<property name="chord.entry.class" value="chord.project.Main"/>
				<property name="chord.entry.args" value=""/>
			</then>
			<else>
				<property name="chord.entry.class" value="hj.lang.Runtime"/>
				<property name="chord.entry.args"
					value="-INIT_THREADS_PER_PLACE=1 -NUMBER_OF_LOCAL_PLACES=1
					   -rt=wsh CnCHJ.runtime.CnCRuntime -policy=BlockingCoarse
					   chord.project.Main"/>
			</else>
		</if>
		<java classname="${chord.entry.class}" fork="true" dir="${chord.work.dir}"
				resultproperty="chord.run.result">
			<jvmarg line="${chord.jvmargs}"/>
			<arg line="${chord.entry.args}"/>
			<syspropertyset>
				<propertyref builtin="all"/>
			</syspropertyset>
			<classpath>
				<pathelement path="${chord.main.class.path}"/>
				<pathelement path="${chord.class.path}"/>
			</classpath>
		</java>
		<if>
			<not><equals arg1="${chord.run.result}" arg2="0"/></not>
			<then>
				<fail message="Chord exited abnormally; see above file(s) for details."/>
			</then>
		</if>
	</target>

	<!--
	==========================================================================
		JAVA TO HTML UTILS
	==========================================================================
	-->

	<target name="j2h_xref" description="HTMLize Java source code with cross-referencing.">
		<fail unless="java.dir"/>
		<fail unless="html.dir"/>
		<java classname="j2h" fork="true" failonerror="true">
			<arg value="-js"/>
			<arg file="${java.dir}"/>
			<arg value="-d"/>
			<arg file="${html.dir}"/>
			<arg value="-m"/>
			<arg value="4"/>
			<arg value="-t"/>
			<arg value="4"/>
			<classpath><pathelement location="${lib.home}/j2h.jar"/></classpath>
		</java>
	</target>
  
	<target name="j2h_fast" description="HTMLize Java source code without cross-referencing.">
		<fail unless="java.dir"/>
		<fail unless="html.dir"/>
		<taskdef name="java2html" classname="de.java2html.anttasks.Java2HtmlTask">
			<classpath><pathelement location="${lib.home}/java2html.jar"/></classpath>
		</taskdef>
		<java2html srcdir="${java.dir}" destdir="${html.dir}" includes="**/*.java"
			style="eclipse" showLineNumbers="true" addLineAnchors="true" tabs="4"/>
	</target>

	<!--
	==========================================================================
		BDDBDDB UTILS
	==========================================================================
	-->

	<target name="solve" depends="paths" description="Run bddbddb (BDD-based Datalog solver).">
		<fail unless="work.dir"/>
		<fail unless="dlog.file"/>
		<property name="max.heap" value="2048m"/>
		<property name="verbose" value="4"/>
		<java classname="net.sf.bddbddb.Solver"
				fork="true" failonerror="true" maxmemory="${max.heap}"
				classpath="${chord.bddbddb.class.path}">
			<sysproperty key="java.library.path" file="${lib.home}"/>
			<sysproperty key="basedir" file="${work.dir}"/>
			<sysproperty key="verbose" value="${verbose}"/>
			<syspropertyset>
				<propertyref builtin="commandline"/>
			</syspropertyset>
			<arg file="${dlog.file}"/>
		</java>
	</target>

	<target name="debug" depends="paths" description="Run bddbddb's interactive interpreter.">
		<fail unless="work.dir"/>
		<fail unless="dlog.file"/>
		<property name="max.heap" value="2048m"/>
		<property name="verbose" value="4"/>
		<java classname="net.sf.bddbddb.Interactive"
				fork="true" failonerror="true" maxmemory="${max.heap}"
				classpath="${chord.bddbddb.class.path}">
			<sysproperty key="java.library.path" file="${lib.home}"/>
			<sysproperty key="basedir" file="${work.dir}"/>
			<sysproperty key="verbose" value="${verbose}"/>
			<syspropertyset>
				<propertyref builtin="commandline"/>
			</syspropertyset>
			<arg file="${dlog.file}"/>
		</java>
	</target>

	<!--
	==========================================================================
		BUILD DOCUMENTATION
	==========================================================================
	-->

	<target name="javadoc" depends="paths" description="Generate Javadoc.">
		<javadoc destdir="javadoc" classpathref="main_class_path">
			<fileset dir="src">
				<include name="**/*.java"/>
			</fileset>
		</javadoc>
		<copy todir="javadoc" flatten="true">
			<fileset dir="src">
				<include name="**/*.dlog"/>
				<include name="**/*.datalog"/>
			</fileset>
		</copy>
	</target>

	<target name="htmldoc" description="Generate HTML user guide (needs Hyperlatex).">
		<exec executable="hyperlatex" dir="doc">
			<arg value="user_guide.tex"/>
		</exec>
	</target>

	<target name="pdfdoc" description="Generate PDF user guide (needs pdflatex).">
		<exec executable="pdflatex" dir="doc">
			<arg value="user_guide.tex"/>
		</exec>
	</target>

	<!--
	==========================================================================
		CLEAN UP
	==========================================================================
	-->

	<target name="clean" depends="build-props" description="Clean all generated files.">
		<delete dir="classes"/>
		<delete file="${lib.home}/chord_instr_agent.jar"/>
		<if><isset property="chord.use.jvmti"/>
			<then>
				<exec executable="${chord.make}" dir="bdd">
					<arg value="clean"/>
				</exec>
			</then>
		</if>
		<if><isset property="chord.use.buddy"/>
			<then>
				<exec executable="${chord.make}" dir="agent">
					<arg value="clean"/>
				</exec>
			</then>
		</if>
	</target>

	<target name="cleandoc" description="Clean generated Javadoc and user guide.">
		<delete dir="javadoc"/>
		<delete dir="doc/user_guide"/>
		<delete file="doc/user_guide.pdf"/>
		<delete file="doc/user_guide.aux"/>
		<delete file="doc/user_guide.log"/>
		<delete file="doc/user_guide.out"/>
		<delete file="doc/user_guide.dvi"/>
	</target>
</project>
