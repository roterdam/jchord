# name=refPdefP-dlog

.include "M.dom"
.include "X.dom"
.include "E.dom"
.include "F.dom"
.include "P.dom"
.include "V.dom"
.include "U.dom"
.include "H.dom"
.include "Z.dom"
.include "I.dom"


# 36 X<E<M<P
.bddvarorder F0_E0_E1_X0_I0xM0xP0_V0_U0_H0_Z0

# 36 X<P<E<M
#.bddvarorder X0_P0_F0_E0_E1_I0xM0_V0_U0_H0_Z0


###
# Relations
###

EF(e:E0,f:F0) input
statF(f:F0) input
instF(f:F0) input
XG(x:X0,f:F0) input
XE(x:X0,e:E0) input
XU(x:X0,u:U0) input
XP(x:X0,p:P0) input
MPhead(m:M0,p:P0) input
MPtail(m:M0,p:P0) input
writeE(e:E0) input
PE(p:P0,e:E0) input
PI(p0:P0,i0:I0) input
EV(e:E0,v:V0) input
VH(v:V0,h:H0) input
PDefReg(p:P0,u:U0) input
PRefReg(p:P0,u:U0) input
MArg(m:M0,u:U0,z:Z0) input
MRet(m:M0,u:U0) input
formalIn(m:M0,x:X0) input
formalOut(m:M0,x:X0) input
actualIn(i:I0,x:X0) input
actualOut(i:I0,x:X0) input

actualInP(p:P0,x:X0) output
actualOutP(p:P0,x:X0) output
formalInP(p:P0,x:X0) output
formalOutP(p:P0,x:X0) output

## x is formal-in or actual-out at program point p and is associated with register u
formalInOrActualOutXPU(x:X0,p:P0,u:U0) output
## x is formal-in or actual-out at program point p and is associated with static field f
formalInOrActualOutXPG(x:X0,p:P0,f:F0) output
## x is formal-in or actual-out at program point p and is associated with instance field access e
formalInOrActualOutXPE(x:X0,p:P0,e:E0) output
actualInOrFormalOutXPU(x:X0,p:P0,u:U0) output
actualInOrFormalOutXPG(x:X0,p:P0,f:F0) output
actualInOrFormalOutXPE(x:X0,p:P0,e:E0) output

# p is a call site
callP(p:P0) output
# p is not a call site
nonCallP(p:P0) output
EH(e:E0,h:H0) output
# heap location represented by e and e2 may alias each other
mayAlias(e:E0,e2:E1) output

# u/f/e is referred at program point p which is not a call site
nonCallRefPU(p:P0,u:U0) output
nonCallRefPG(p:P0,f:F0) output
nonCallRefPE(p:P0,e:E0) output

# u is referred at p
refPU(p:P0,u:U0) output
refPG(p:P0,f:F0) output
refPE(p:P0,e:E0) output
# u is defined at p
defPU(p:P0,u:U0) output
defPG(p:P0,f:F0) output
defPE(p:P0,e:E0) output


###
# Constraints
###

actualOutP(p,x) :- actualOut(i,x), PI(p,i).
actualInP(p,x) :- actualIn(i,x), PI(p,i).
formalOutP(p,x) :- formalOut(m,x), MPtail(m,p).
formalInP(p,x) :- formalIn(m,x), MPhead(m,p).

formalInOrActualOutXPU(x,p,u) :- XP(x,p), XU(x,u), formalInP(p,x).
formalInOrActualOutXPU(x,p,u) :- XP(x,p), XU(x,u), actualOutP(p,x).
formalInOrActualOutXPG(x,p,f) :- XP(x,p), XG(x,f), formalInP(p,x).
formalInOrActualOutXPG(x,p,f) :- XP(x,p), XG(x,f), actualOutP(p,x).
formalInOrActualOutXPE(x,p,e) :- XP(x,p), XE(x,e), formalInP(p,x).
formalInOrActualOutXPE(x,p,e) :- XP(x,p), XE(x,e), actualOutP(p,x).

#actualInOrFormalOutXPU(x,p,u) :- XP(x,p), MPtail(m,p), MRet(m,u).
actualInOrFormalOutXPU(x,p,u) :- XP(x,p), XU(x,u), formalOutP(p,x).
actualInOrFormalOutXPU(x,p,u) :- XP(x,p), XU(x,u), actualInP(p,x).
actualInOrFormalOutXPG(x,p,f) :- XP(x,p), XG(x,f), actualInP(p,x).
actualInOrFormalOutXPG(x,p,f) :- XP(x,p), XG(x,f), formalOutP(p,x).
actualInOrFormalOutXPE(x,p,e) :- XP(x,p), XE(x,e), actualInP(p,x).
actualInOrFormalOutXPE(x,p,e) :- XP(x,p), XE(x,e), formalOutP(p,x).

callP(p) :- PI(p,_).
nonCallP(p) :- !callP(p).

EH(e,h) :- EV(e,v), VH(v,h).
mayAlias(e,e2) :- EF(e,f), EF(e2,f), EH(e,h), EH(e2,h).

nonCallRefPU(p,u) :- nonCallP(p), PRefReg(p,u).
nonCallRefPG(p,f) :- PE(p,e2), EF(e2,f), !writeE(e2), statF(f).
nonCallRefPE(p,e) :- PE(p,e2), !writeE(e2), mayAlias(e,e2).

refPU(p,u) :- PRefReg(p,u).
refPU(p,u) :- MPtail(m,p), MRet(m,u).
refPG(p,f) :- nonCallRefPG(p,f).
refPG(p,f) :- actualInP(p,x), XG(x,f).
refPG(p,f) :- formalOutP(p,x), XG(x,f).
refPE(p,e) :- nonCallRefPE(p,e).
refPE(p,e) :- actualInP(p,x), XE(x,e2), mayAlias(e,e2).
refPE(p,e) :- formalOutP(p,x), XE(x,e2), mayAlias(e,e2).

defPG(p,f) :- PE(p,e), writeE(e), EF(e,f), statF(f).
defPG(p,f) :- formalInP(p,x), XG(x,f).
defPG(p,f) :- actualOutP(p,x), XG(x,f).
defPE(p,e) :- PE(p,e), writeE(e), EF(e,f), instF(f).
defPE(p,e) :- PE(p,e), writeE(e), EF(e,0).
defPE(p,e) :- formalInP(p,x), XE(x,e).
defPE(p,e) :- actualOutP(p,x), XE(x,e).
defPU(p,u) :- PDefReg(p,u).
defPU(p,u) :- MPhead(m,p), MArg(m,u,_).
